
C:\Users\Max\Desktop\gd32_dev\GD32W51x_RELEASE_V1.0.2\MBL\Project\GCC\output\bin\mbl-ns.axf:     file format elf32-littlearm
C:\Users\Max\Desktop\gd32_dev\GD32W51x_RELEASE_V1.0.2\MBL\Project\GCC\output\bin\mbl-ns.axf
architecture: armv8-m.main, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08003069

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x00000100 memsz 0x00000100 flags r--
    LOAD off    0x00010200 vaddr 0x20000200 paddr 0x08000100 align 2**16
         filesz 0x000009f8 memsz 0x000009f8 flags r-x
    LOAD off    0x00020af8 vaddr 0x08000af8 paddr 0x08000af8 align 2**16
         filesz 0x000055f0 memsz 0x000055f0 flags rwx
    LOAD off    0x00030bf8 vaddr 0x20000bf8 paddr 0x080060e8 align 2**16
         filesz 0x000001d8 memsz 0x00001214 flags rw-
    LOAD off    0x00037c00 vaddr 0x08007c00 paddr 0x08007c00 align 2**16
         filesz 0x00000100 memsz 0x00000100 flags r--
    LOAD off    0x0003d200 vaddr 0x2000d200 paddr 0x20001e0c align 2**16
         filesz 0x00000000 memsz 0x00003000 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .MBL_API_CODE 00000100  08007c00  08007c00  00037c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .vectors      00000100  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .code_to_sram 000009f8  20000200  08000100  00010200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00004fb0  08000af8  08000af8  00020af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000638  08005aa8  08005aa8  00025aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.attributes 00000036  080060e0  080060e0  00037d00  2**0
                  CONTENTS, READONLY
  6 .init_array   00000004  080060e0  080060e0  000260e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e4  080060e4  000260e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000bf8  080060e8  00030bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000103c  20000dd0  080062c0  00030dd0  2**2
                  ALLOC
 10 .stack        00003000  2000d200  20001e0c  0003d200  2**0
                  ALLOC
 11 .debug_info   0000dd08  00000000  00000000  00037d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000026af  00000000  00000000  00045a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a30  00000000  00000000  000480f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00008ef5  00000000  00000000  00048b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000049b5  00000000  00000000  00051a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000066  00000000  00000000  000563ca  2**0
                  CONTENTS, READONLY
 17 .debug_loc    0000744f  00000000  00000000  00056430  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 000013e0  00000000  00000000  0005d880  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  000029b8  00000000  00000000  0005ec60  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         00000084  00000000  00000000  00061618  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000117  00000000  00000000  0006169c  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08007c00 l    d  .MBL_API_CODE	00000000 .MBL_API_CODE
08000000 l    d  .vectors	00000000 .vectors
20000200 l    d  .code_to_sram	00000000 .code_to_sram
08000af8 l    d  .text	00000000 .text
08005aa8 l    d  .rodata	00000000 .rodata
080060e0 l    d  .ARM.attributes	00000000 .ARM.attributes
080060e0 l    d  .init_array	00000000 .init_array
080060e4 l    d  .fini_array	00000000 .fini_array
20000bf8 l    d  .data	00000000 .data
20000dd0 l    d  .bss	00000000 .bss
2000d200 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 mbl_api.c
00000000 l    df *ABS*	00000000 CMakeFiles/mbl-ns.dir/__/platform/gdm32/gcc/mbl_startup_gdm32.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800308a l       .text	00000000 CodeInit
0800306c l       .text	00000000 CopyData
08003074 l       .text	00000000 DataInit
0800309e l       .text	00000000 Zerobss
08003082 l       .text	00000000 CopyCode
08003098 l       .text	00000000 FillZerobss
080030b0 l       .text	00000000 LoopForever
080030d4 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 mbl_qspi_flash.c
20000200 l     F .code_to_sram	0000005a qspi_flash_write_enable
2000025c l     F .code_to_sram	0000004c qspi_flash_autopolling_ready
00000000 l    df *ABS*	00000000 gd32w51x_qspi.c
20000570 l     F .code_to_sram	00000144 qspi_config
200006b4 l     F .code_to_sram	00000144 qspi_config_fmc_s
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 crtstuff.c
08001430 l     F .text	00000000 __do_global_dtors_aux
20000dd0 l     O .bss	00000000 completed.10274
080060e4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08001454 l     F .text	00000000 frame_dummy
20000dd4 l     O .bss	00000000 object.10279
080060e0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mbl_flash.c
00000000 l    df *ABS*	00000000 mbl_image.c
00000000 l    df *ABS*	00000000 mbl_ns.c
20000dec l     O .bss	00000004 img_reset.10702
00000000 l    df *ABS*	00000000 mbl_sys.c
08001bb8 l     F .text	000000b0 sys_status_crypt
08001c68 l     F .text	000000bc active_header_get
08001d24 l     F .text	0000023c sys_status_internal_set
20000df0 l     O .bss	00001000 alloc_buf.11031
00000000 l    df *ABS*	00000000 mbl_uart.c
00000000 l    df *ABS*	00000000 gd32w51x_fmc.c
00000000 l    df *ABS*	00000000 gd32w51x_gpio.c
00000000 l    df *ABS*	00000000 gd32w51x_icache.c
08002bd0 l     F .text	00000020 icache_remap_disable.part.0
00000000 l    df *ABS*	00000000 gd32w51x_rcu.c
00000000 l    df *ABS*	00000000 gd32w51x_usart.c
00000000 l    df *ABS*	00000000 mbl_system_gdm32.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-vfprintf_float.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 dtoa.c
08003a54 l     F .text	0000011e quorem
00000000 l    df *ABS*	00000000 findfp.c
08004730 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 mprec.c
08005fb8 l     O .rodata	0000000c p05.7490
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
080050f4 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
20001df8 l     O .bss	00000004 heap_end.5507
00000000 l    df *ABS*	00000000 c:/users/max/.platformio/packages/toolchain-gccarmnoneeabi@1.90201.191206/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v8-m.main+fp/hard/crti.o
00000000 l    df *ABS*	00000000 c:/users/max/.platformio/packages/toolchain-gccarmnoneeabi@1.90201.191206/bin/../lib/gcc/arm-none-eabi/9.2.1/thumb/v8-m.main+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000c04 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
080060e4 l       .init_array	00000000 __init_array_end
080060e0 l       .ARM.attributes	00000000 __preinit_array_end
080060e0 l       .init_array	00000000 __init_array_start
080060e0 l       .ARM.attributes	00000000 __preinit_array_start
080059c8 l     F .text	00000010 __mbedtls_memory_buffer_alloc_init_veneer
080059d8 l     F .text	00000010 __mbedtls_aes_setkey_enc_veneer
080059e8 l     F .text	00000010 __mbedtls_aes_free_veneer
080059f8 l     F .text	00000010 __mbedtls_aes_crypt_cbc_veneer
08005a08 l     F .text	00000010 __qspi_flash_sector_erase_veneer
08005a18 l     F .text	00000010 __qspi_flash_read_veneer
08005a28 l     F .text	00000010 __mbedtls_aes_setkey_dec_veneer
08005a38 l     F .text	00000010 __mbedtls_aes_init_veneer
08005a48 l     F .text	00000010 __mbedtls_calloc_veneer
08005a58 l     F .text	00000010 __mbedtls_free_veneer
08005a68 l     F .text	00000010 __qspi_flash_config_veneer
08005a78 l     F .text	00000010 __mbedtls_aes_crypt_ecb_veneer
08005a88 l     F .text	00000010 __qspi_flash_page_program_veneer
08005a98 l     F .text	00000010 __mbedtls_md5_ret_veneer
20000ba8 l     F .code_to_sram	00000010 __rcu_periph_clock_enable_veneer
20000bb8 l     F .code_to_sram	00000010 __gpio_mode_set_veneer
20000bc8 l     F .code_to_sram	00000010 __gpio_output_options_set_veneer
20000bd8 l     F .code_to_sram	00000010 __gpio_af_set_veneer
20000be8 l     F .code_to_sram	00000010 __memset_veneer
0ff63e95 g       *ABS*	00000000 mbedtls_rsa_rsaes_oaep_encrypt
080030d4  w    F .text	00000002 RTC_Alarm_IRQHandler
0ff58a29 g       *ABS*	00000000 mbedtls_cipher_reset
0800314a g     F .text	000000c4 __cvt
080030d4  w    F .text	00000002 EXTI2_IRQHandler
08001650 g     F .text	00000170 flash_write
0ff58ea1 g       *ABS*	00000000 mbedtls_ctr_drbg_init
080013b4 g     F .text	0000002c .hidden __aeabi_dcmpun
0ff73048 g       *ABS*	00000000 mbedtls_md5_info
08005920 g     F .text	00000020 _isatty_r
08002f00 g     F .text	00000010 usart_transmit_config
08001378 g     F .text	00000012 .hidden __aeabi_dcmple
0ff61005 g       *ABS*	00000000 mbedtls_pem_read_buffer
0ff6bb35 g       *ABS*	00000000 x25519_ge_tobytes
0ff62461 g       *ABS*	00000000 mbedtls_pkcs12_derivation
0ff590a9 g       *ABS*	00000000 mbedtls_ctr_drbg_set_prediction_resistance
080030d4  w    F .text	00000002 TIMER2_IRQHandler
080012b4 g     F .text	0000007a .hidden __cmpdf2
08000000 g       .vectors	00000100 __Vectors
08002f2c g     F .text	000000d0 system_clock_180m_40m_hxtal
0ff59291 g       *ABS*	00000000 mbedtls_des_free
08005794 g     F .text	00000024 _lseek_r
080030d4  w    F .text	00000002 DebugMon_Handler
080030d4  w    F .text	00000002 LVD_IRQHandler
0ff6335d g       *ABS*	00000000 mbedtls_rsa_export_raw
0ff5fde9 g       *ABS*	00000000 mbedtls_mpi_grow
20000904 g     F .code_to_sram	0000005c qspi_receive
0ff5eca9 g       *ABS*	00000000 mbedtls_md_starts
0ff5dd15 g       *ABS*	00000000 mbedtls_internal_sha512_process
0ff73138 g       *ABS*	00000000 mbedtls_sha256_info
0ff56f35 g       *ABS*	00000000 mbedtls_asn1_get_bitstring_null
080012b4 g     F .text	0000007a .hidden __eqdf2
0ff5af09 g       *ABS*	00000000 mbedtls_ecp_point_init
0ff63449 g       *ABS*	00000000 mbedtls_rsa_free
0ff4f989 g       *ABS*	00000000 __exit
0ff59201 g       *ABS*	00000000 mbedtls_des_crypt_cbc
0ff59189 g       *ABS*	00000000 mbedtls_des3_init
0ff5b81d g       *ABS*	00000000 mbedtls_hardware_poll
20000aa8 g     F .code_to_sram	0000005c qspi_receive_fmc_s
0ff576f1 g       *ABS*	00000000 mbedtls_asn1_write_tag
08000e24 g     F .text	0000005a .hidden __floatdidf
08002ae8 g     F .text	00000044 gpio_mode_set
0ff590b1 g       *ABS*	00000000 mbedtls_ctr_drbg_update
0ff59881 g       *ABS*	00000000 mbedtls_ecdh_init
08003a24 g     F .text	00000030 printf
0ff5b575 g       *ABS*	00000000 mbedtls_gcm_init
20001dfc g     O .bss	00000001 __lock___atexit_recursive_mutex
0ff57009 g       *ABS*	00000000 mbedtls_asn1_get_len
0ff5aead g       *ABS*	00000000 mbedtls_ecp_point_cmp
0ff5d5d1 g       *ABS*	00000000 mbedtls_internal_sha256_process
0ff627bd g       *ABS*	00000000 mbedtls_pkcs5_pbes2
08005422 g     F .text	00000024 __sseek
080047e0 g     F .text	00000070 __sinit
080030d4  w    F .text	00000002 TIMER0_BRK_IRQHandler
08005450 g     F .text	000000a4 __swbuf_r
0ff72fb8 g       *ABS*	00000000 mbedtls_eckey_info
080030d4  w    F .text	00000002 HardFault_Handler
0ff5977d g       *ABS*	00000000 mbedtls_dhm_read_params
20000960 g     F .code_to_sram	0000005c qspi_autopolling
0ff65a75 g       *ABS*	00000000 mbedtls_strerror
08004784 g     F .text	0000002c __sfmoreglue
0ff60b29 g       *ABS*	00000000 mbedtls_mpi_write_binary
080058b0 g     F .text	0000000c __malloc_unlock
0ff5acc9 g       *ABS*	00000000 mbedtls_ecp_keypair_free
0ff6811d g       *ABS*	00000000 mbedtls_x509write_crt_set_key_usage
0ff655c5 g       *ABS*	00000000 mbedtls_ssl_ciphersuite_uses_ec
0ff5ae19 g       *ABS*	00000000 mbedtls_ecp_muladd
0ff62efd g       *ABS*	00000000 mbedtls_rsa_deduce_primes
080030d4  w    F .text	00000002 SysTick_Handler
0ff64c99 g       *ABS*	00000000 mbedtls_sha1_ret
0ff682d1 g       *ABS*	00000000 mbedtls_x509write_crt_set_version
080030d4  w    F .text	00000002 TIMER0_UP_IRQHandler
0ff56e0d g       *ABS*	00000000 mbedtls_asn1_get_alg
0ff59a61 g       *ABS*	00000000 mbedtls_ecdsa_sign
0ff60a79 g       *ABS*	00000000 mbedtls_mpi_sub_int
20001dfd g     O .bss	00000001 __lock___arc4random_mutex
0ff57395 g       *ABS*	00000000 mbedtls_asn1_write_ia5_string
080023a4 g     F .text	00000164 sys_status_show
0ff56f69 g       *ABS*	00000000 mbedtls_asn1_get_bool
080060e8 g       *ABS*	00000000 _sidata
0ff57ac1 g       *ABS*	00000000 mbedtls_blowfish_crypt_cfb64
080030d4  w    F .text	00000002 TIMER15_IRQHandler
080030d4  w    F .text	00000002 PendSV_Handler
0ff56ca5 g       *ABS*	00000000 mbedtls_aes_free
080030d4  w    F .text	00000002 NMI_Handler
08004958 g     F .text	00000068 _Balloc
080060e0 g       .rodata	00000000 __exidx_end
0ff64ee5 g       *ABS*	00000000 mbedtls_sha256_init
080030d4  w    F .text	00000002 EXTI3_IRQHandler
0ff65315 g       *ABS*	00000000 mbedtls_sha512_ret
0ff5b99d g       *ABS*	00000000 mbedtls_hkdf_extract
0ff59579 g       *ABS*	00000000 mbedtls_dhm_make_public
0ff68111 g       *ABS*	00000000 mbedtls_x509write_crt_set_issuer_key
0ff5a4f1 g       *ABS*	00000000 mbedtls_ecp_copy
0ff5bc09 g       *ABS*	00000000 mbedtls_hmac_drbg_seed_buf
0ff60ffd g       *ABS*	00000000 mbedtls_pem_init
0ff60979 g       *ABS*	00000000 mbedtls_mpi_shrink
080012a4 g     F .text	0000008a .hidden __gtdf2
0ff586b5 g       *ABS*	00000000 mbedtls_cipher_auth_encrypt
0ff60d21 g       *ABS*	00000000 mbedtls_oid_get_extended_key_usage
0ff64b99 g       *ABS*	00000000 mbedtls_sha1_finish
0ff663c5 g       *ABS*	00000000 mbedtls_x509_crt_info
0ff623e1 g       *ABS*	00000000 mbedtls_pk_write_pubkey_pem
0ff63ce9 g       *ABS*	00000000 mbedtls_rsa_rsaes_oaep_decrypt
080028b8 g     F .text	00000010 fmc_lock
0ff63849 g       *ABS*	00000000 mbedtls_rsa_pkcs1_decrypt
0ff614b1 g       *ABS*	00000000 mbedtls_pk_can_do
0ff64da5 g       *ABS*	00000000 mbedtls_sha256
0ff6460d g       *ABS*	00000000 mbedtls_rsa_rsassa_pss_verify
0ff590f1 g       *ABS*	00000000 mbedtls_des3_crypt_cbc
0ff62ae1 g       *ABS*	00000000 mbedtls_rsa_check_privkey
0ff61609 g       *ABS*	00000000 mbedtls_pk_get_type
20000b04 g     F .code_to_sram	0000005c qspi_autopolling_fmc_s
080058fc g     F .text	00000024 _fstat_r
0ff6055d g       *ABS*	00000000 mbedtls_mpi_read_string
0ff58e81 g       *ABS*	00000000 mbedtls_ctr_drbg_free
0ff58ec1 g       *ABS*	00000000 mbedtls_ctr_drbg_random_with_add
0ff5762d g       *ABS*	00000000 mbedtls_asn1_write_octet_string
20001e08 g     O .bss	00000004 errno
0ff77791 g       *ABS*	00000000 ROM_CRYP_AES_ECB
08002cb0 g     F .text	00000180 rcu_clock_freq_get
08002338 g     F .text	0000004a sys_fw_version_set
08005aa8 g       .text	00000000 _etext
0ff65e7d g       *ABS*	00000000 mbedtls_x509_crl_parse
20000dd0 g       .bss	00000000 _sbss
0ff66cb5 g       *ABS*	00000000 mbedtls_x509_csr_free
00003000 g       *ABS*	00000000 __stack_size
0ff5e815 g       *ABS*	00000000 mbedtls_md5_update_ret
0ff59e49 g       *ABS*	00000000 mbedtls_ecdsa_write_signature_restartable
0ff5e699 g       *ABS*	00000000 mbedtls_md
0ff5a78d g       *ABS*	00000000 mbedtls_ecp_group_copy
0ff62ad1 g       *ABS*	00000000 mbedtls_platform_setup
08002508 g     F .text	00000120 sys_status_dump
0ff5a069 g       *ABS*	00000000 mbedtls_ecjpake_read_round_one
08001340 g     F .text	00000010 .hidden __aeabi_cdcmple
0ff57c35 g       *ABS*	00000000 mbedtls_blowfish_init
0ff64cc1 g       *ABS*	00000000 mbedtls_sha1_starts_ret
0ff59859 g       *ABS*	00000000 mbedtls_ecdh_gen_public
0ff67831 g       *ABS*	00000000 mbedtls_x509_set_extension
0ff57165 g       *ABS*	00000000 mbedtls_asn1_get_tag
0ff59c89 g       *ABS*	00000000 mbedtls_ecdsa_verify
0ff590a5 g       *ABS*	00000000 mbedtls_ctr_drbg_set_entropy_len
0ff64db1 g       *ABS*	00000000 mbedtls_sha256_finish
0ff657e5 g       *ABS*	00000000 mbedtls_ssl_list_ciphersuites
0ff608f1 g       *ABS*	00000000 mbedtls_mpi_shift_r
0ff591b5 g       *ABS*	00000000 mbedtls_des3_set2key_enc
0ff58049 g       *ABS*	00000000 mbedtls_camellia_init
0ff65085 g       *ABS*	00000000 mbedtls_sha512_clone
0ff68115 g       *ABS*	00000000 mbedtls_x509write_crt_set_issuer_name
0ff58ea9 g       *ABS*	00000000 mbedtls_ctr_drbg_random
0ff6229d g       *ABS*	00000000 mbedtls_pk_write_pubkey
0ff56a99 g       *ABS*	00000000 mbedtls_aes_crypt_cfb128
0ff67761 g       *ABS*	00000000 mbedtls_x509_serial_gets
0ff5fbcd g       *ABS*	00000000 mbedtls_mpi_gen_prime
0ff5a521 g       *ABS*	00000000 mbedtls_ecp_curve_info_from_grp_id
0ff5fdc9 g       *ABS*	00000000 mbedtls_mpi_get_bit
0800210c g     F .text	0000010c sys_status_get
0ff6ba4d g       *ABS*	00000000 x25519_ge_p3_to_cached
0ff604fd g       *ABS*	00000000 mbedtls_mpi_read_binary
080030d4  w    F .text	00000002 TIMER3_IRQHandler
0ff66af9 g       *ABS*	00000000 mbedtls_x509_crt_verify_info
0ff64ef1 g       *ABS*	00000000 mbedtls_sha256_ret
0ff662bd g       *ABS*	00000000 mbedtls_x509_crt_check_key_usage
0ff573ad g       *ABS*	00000000 mbedtls_asn1_write_int
0ff64c8d g       *ABS*	00000000 mbedtls_sha1_init
080030d4  w    F .text	00000002 DMA0_Channel6_IRQHandler
0ff64839 g       *ABS*	00000000 mbedtls_rsa_validate_crt
0ff58989 g       *ABS*	00000000 mbedtls_cipher_info_from_values
0ff56fa5 g       *ABS*	00000000 mbedtls_asn1_get_int
0ff67591 g       *ABS*	00000000 mbedtls_x509_get_serial
08002ac8 g     F .text	00000014 fmc_offset_value_config
0ff5904d g       *ABS*	00000000 mbedtls_ctr_drbg_seed_entropy_len
0ff59fb5 g       *ABS*	00000000 mbedtls_ecjpake_free
20000a44 g     F .code_to_sram	00000064 qspi_transmit_fmc_s
08003120 g     F .text	0000001a memcpy
08001330 g     F .text	00000020 .hidden __aeabi_cdrcmple
0ff65e75 g       *ABS*	00000000 mbedtls_x509_crl_init
0ff64cbd g       *ABS*	00000000 mbedtls_sha1_starts
0ff64c95 g       *ABS*	00000000 mbedtls_sha1_process
08002ef4 g     F .text	0000000a usart_enable
0ff58919 g       *ABS*	00000000 mbedtls_cipher_info_from_string
08004778 g     F .text	0000000c _cleanup_r
08000dac g     F .text	00000022 .hidden __floatsidf
080030d4  w    F .text	00000002 I2C0_EV_IRQHandler
080012ac g     F .text	00000082 .hidden __ltdf2
0ff5ba2d g       *ABS*	00000000 mbedtls_hmac_drbg_random_with_add
080030d4  w    F .text	00000002 EXTI0_IRQHandler
08002c88 g     F .text	0000001e rcu_periph_clock_disable
0ff67f01 g       *ABS*	00000000 mbedtls_x509write_crt_init
0ff66ad1 g       *ABS*	00000000 mbedtls_x509_crt_parse_der_nocopy
20010200 g       .stack	00000000 Image$$ARM_LIB_STACKHEAP$$ZI$$Limit
0ff58e1d g       *ABS*	00000000 mbedtls_ciphersuite_preference_init
0ff59151 g       *ABS*	00000000 mbedtls_des3_crypt_ecb
0800492c g     F .text	00000010 malloc
0ff56d25 g       *ABS*	00000000 mbedtls_arc4_free
0ff58595 g       *ABS*	00000000 mbedtls_ccm_star_auth_decrypt
0ff62aa1 g       *ABS*	00000000 mbedtls_platform_set_printf
08002cac g     F .text	00000004 rcu_periph_reset_disable
08005950 g     F .text	00000010 _fstat
08005ef0 g     O .rodata	000000c8 __mprec_tens
0ff5a16d g       *ABS*	00000000 mbedtls_ecjpake_setup
0ff5a541 g       *ABS*	00000000 mbedtls_ecp_curve_info_from_name
080030d4  w    F .text	00000002 UsageFault_Handler
0ff56cb9 g       *ABS*	00000000 mbedtls_aes_setkey_dec
0ff5a795 g       *ABS*	00000000 mbedtls_ecp_group_free
20000bf8 g     O .data	00000004 mbl_err_process
0ff62d75 g       *ABS*	00000000 mbedtls_rsa_copy
0ff5a221 g       *ABS*	00000000 mbedtls_ecjpake_write_round_two
0ff67aa5 g       *ABS*	00000000 mbedtls_x509_write_names
20000dd0 g       .bss	00000000 __bss_start__
0ff641b9 g       *ABS*	00000000 mbedtls_rsa_rsaes_pkcs1_v15_encrypt
080018e8 g     F .text	000000cc flash_erase
08000d8c g     F .text	0000001e .hidden __aeabi_ui2d
08002628 g     F .text	000000f8 sys_status_check
0800491c g     F .text	00000008 _localeconv_r
0ff686ad g       *ABS*	00000000 mbedtls_x509write_csr_set_md_alg
0ff58511 g       *ABS*	00000000 mbedtls_ccm_encrypt_and_tag
0ff60cd9 g       *ABS*	00000000 mbedtls_oid_get_attr_short_name
08004b0c g     F .text	00000012 __i2b
0ff56ea1 g       *ABS*	00000000 mbedtls_asn1_get_alg_null
0ff58055 g       *ABS*	00000000 mbedtls_camellia_setkey_dec
20000bf8 g       .data	00000000 _sdata
080030d4  w    F .text	00000002 SPI1_IRQHandler
080030d4  w    F .text	00000002 DMA0_Channel0_IRQHandler
0ff57bd9 g       *ABS*	00000000 mbedtls_blowfish_crypt_ecb
08002760 g     F .text	00000110 uart_config
08000b08 g     F .text	00000000 .hidden __aeabi_drsub
08002a54 g     F .text	00000010 ob_lock
0ff67f19 g       *ABS*	00000000 mbedtls_x509write_crt_pem
0ff676c9 g       *ABS*	00000000 mbedtls_x509_get_time
0ff64f21 g       *ABS*	00000000 mbedtls_sha256_starts
080053a8 g     F .text	00000020 _sbrk_r
0ff64fdd g       *ABS*	00000000 mbedtls_sha256_update
0ff5eebd g       *ABS*	00000000 mbedtls_mpi_bitlen
0ff59925 g       *ABS*	00000000 mbedtls_ecdsa_free
0ff62b9d g       *ABS*	00000000 mbedtls_rsa_check_pubkey
0ff73198 g       *ABS*	00000000 mbedtls_sha512_info
0ff5a59d g       *ABS*	00000000 mbedtls_ecp_curve_val_init
0ff652fd g       *ABS*	00000000 mbedtls_sha512_free
080058bc g     F .text	00000024 _read_r
0ff5e811 g       *ABS*	00000000 mbedtls_md5_update
0ff60d39 g       *ABS*	00000000 mbedtls_oid_get_md_alg
0ff61e21 g       *ABS*	00000000 mbedtls_pk_verify_restartable
0ff5a3e5 g       *ABS*	00000000 mbedtls_ecp_check_pub_priv
08001364 g     F .text	00000012 .hidden __aeabi_dcmplt
0ff6033d g       *ABS*	00000000 mbedtls_mpi_mul_mpi
0ff590c1 g       *ABS*	00000000 mbedtls_ctr_drbg_update_ret
0ff5b07d g       *ABS*	00000000 mbedtls_ecp_set_zero
080019d4 g     F .text	000000ec boot_image_find
0ff593e1 g       *ABS*	00000000 mbedtls_dhm_free
08000dd0 g     F .text	00000042 .hidden __extendsfdf2
0ff58631 g       *ABS*	00000000 mbedtls_cipher_auth_decrypt
080010d4 g     F .text	000001d0 .hidden __aeabi_ddiv
0ff68701 g       *ABS*	00000000 mbedtls_xtea_crypt_cbc
08005e14 g     O .rodata	00000009 valid_image_status
08000b14 g     F .text	00000276 .hidden __adddf3
0ff57c41 g       *ABS*	00000000 mbedtls_blowfish_setkey
0ff5fe41 g       *ABS*	00000000 mbedtls_mpi_init
0ff59ec9 g       *ABS*	00000000 mbedtls_ecjpake_derive_secret
0ff62675 g       *ABS*	00000000 mbedtls_pkcs12_pbe
0ff60191 g       *ABS*	00000000 mbedtls_mpi_lsb
0ff60f01 g       *ABS*	00000000 mbedtls_oid_get_oid_by_sig_alg
0ff588c9 g       *ABS*	00000000 mbedtls_cipher_free
080060e0 g       .rodata	00000000 __exidx_start
20001dfe g     O .bss	00000001 __lock___env_recursive_mutex
08000e80 g     F .text	00000254 .hidden __aeabi_dmul
0ff5ecd9 g       *ABS*	00000000 mbedtls_memory_buffer_alloc_free
0ff631f9 g       *ABS*	00000000 mbedtls_rsa_export
0ff61639 g       *ABS*	00000000 mbedtls_pk_parse_key
08001ff8 g     F .text	000000c0 sys_statu_integritys_check
08005960 g     F .text	00000010 _isatty
0ff60d69 g       *ABS*	00000000 mbedtls_oid_get_numeric_string
20001dff g     O .bss	00000001 __lock___sinit_recursive_mutex
0ff5bb05 g       *ABS*	00000000 mbedtls_hmac_drbg_reseed
08005e20 g     O .rodata	00000004 _global_impure_ptr
0ff63fd9 g       *ABS*	00000000 mbedtls_rsa_rsaes_pkcs1_v15_decrypt
0800149c g     F .text	0000003c flash_nodec_config
080030d8 g     F .text	00000048 __libc_init_array
080014fc g     F .text	0000001c flash_init
0ff615b5 g       *ABS*	00000000 mbedtls_pk_free
080030d4  w    F .text	00000002 TIMER16_IRQHandler
0ff63735 g       *ABS*	00000000 mbedtls_rsa_get_len
0ff615f1 g       *ABS*	00000000 mbedtls_pk_get_name
0ff67ed1 g       *ABS*	00000000 mbedtls_x509write_crt_free
0ff5ee65 g       *ABS*	00000000 mbedtls_mpi_add_mpi
08005ec8 g     O .rodata	00000028 __mprec_bigtens
0ff5a1bd g       *ABS*	00000000 mbedtls_ecjpake_write_round_one
0ff65081 g       *ABS*	00000000 mbedtls_sha512
0ff66c99 g       *ABS*	00000000 mbedtls_x509_crt_verify_with_profile
08000d8c g     F .text	0000001e .hidden __floatunsidf
08005990 g     F .text	0000001c _sbrk
08004dae g     F .text	00000038 __mcmp
20000324 g     F .code_to_sram	0000003a qspi_flash_read_id
0ff5e7a9 g       *ABS*	00000000 mbedtls_md5_process
0ff57345 g       *ABS*	00000000 mbedtls_asn1_write_bool
080030d4  w    F .text	00000002 DMA0_Channel3_IRQHandler
0ff5bc5d g       *ABS*	00000000 mbedtls_hmac_drbg_set_entropy_len
080030d4  w    F .text	00000002 I2C0_ER_IRQHandler
08002b2c g     F .text	0000003c gpio_output_options_set
0ff5bc61 g       *ABS*	00000000 mbedtls_hmac_drbg_set_prediction_resistance
080059ac g     F .text	00000000 _init
0ff60ebd g       *ABS*	00000000 mbedtls_oid_get_oid_by_pk_alg
0ff57eed g       *ABS*	00000000 mbedtls_camellia_crypt_ecb
0ff61541 g       *ABS*	00000000 mbedtls_pk_decrypt
0ff67fa9 g       *ABS*	00000000 mbedtls_x509write_crt_set_authority_key_identifier
0ff591d9 g       *ABS*	00000000 mbedtls_des3_set3key_dec
0ff5b581 g       *ABS*	00000000 mbedtls_gcm_setkey
08002870 g     F .text	0000000c log_uart_init
0ff668cd g       *ABS*	00000000 mbedtls_x509_crt_parse
0ff5a60d g       *ABS*	00000000 mbedtls_ecp_gen_keypair
0ff57525 g       *ABS*	00000000 mbedtls_asn1_write_mpi
08001518 g     F .text	000000a4 flash_read
0ff5a011 g       *ABS*	00000000 mbedtls_ecjpake_init
0ff60aa5 g       *ABS*	00000000 mbedtls_mpi_sub_mpi
200007f8 g     F .code_to_sram	00000074 qspi_init
0ff5e941 g       *ABS*	00000000 mbedtls_md_get_name
0ff66a35 g       *ABS*	00000000 mbedtls_x509_crt_parse_der
0ff65a81 g       *ABS*	00000000 mbedtls_time
08002bf0 g     F .text	00000018 icache_enable
0ff64639 g       *ABS*	00000000 mbedtls_rsa_rsassa_pss_verify_ext
20001e0c g       .bss	00000000 _ebss
0ff6866d g       *ABS*	00000000 mbedtls_x509write_csr_set_key_usage
0ff592e9 g       *ABS*	00000000 mbedtls_dhm_calc_secret
20000bfc g     O .data	00000004 mbl_trace_level
0ff59035 g       *ABS*	00000000 mbedtls_ctr_drbg_seed
0ff5985d g       *ABS*	00000000 mbedtls_ecdh_get_params
0ff56ee9 g       *ABS*	00000000 mbedtls_asn1_get_bitstring
08003068  w    F .text	0000004a Reset_Handler
0ff57199 g       *ABS*	00000000 mbedtls_asn1_store_named_data
08001f8c g     F .text	0000006c sys_status_init
0ff67a6d g       *ABS*	00000000 mbedtls_x509_time_is_past
0ff60e79 g       *ABS*	00000000 mbedtls_oid_get_oid_by_md
0ff5b5d5 g       *ABS*	00000000 mbedtls_gcm_starts
08004a6c g     F .text	00000040 __hi0bits
0ff63889 g       *ABS*	00000000 mbedtls_rsa_pkcs1_encrypt
0ff642a9 g       *ABS*	00000000 mbedtls_rsa_rsassa_pkcs1_v15_sign
0ff60fbd g       *ABS*	00000000 mbedtls_oid_get_x509_ext_type
080013e0 g     F .text	0000004e .hidden __fixdfsi
0800223c g     F .text	00000024 sys_trace_level_set
0ff5af25 g       *ABS*	00000000 mbedtls_ecp_point_read_binary
0ff5a65d g       *ABS*	00000000 mbedtls_ecp_gen_privkey
0ff68669 g       *ABS*	00000000 mbedtls_x509write_csr_set_key
20001e00 g     O .bss	00000001 __lock___malloc_recursive_mutex
080030d4  w    F .text	00000002 DMA0_Channel2_IRQHandler
0ff58549 g       *ABS*	00000000 mbedtls_ccm_setkey
0ff60fd5 g       *ABS*	00000000 mbedtls_pem_free
0ff576ad g       *ABS*	00000000 mbedtls_asn1_write_printable_string
0ff58fa9 g       *ABS*	00000000 mbedtls_ctr_drbg_reseed
0ff56b21 g       *ABS*	00000000 mbedtls_aes_crypt_cfb8
0ff601d9 g       *ABS*	00000000 mbedtls_mpi_lset
0ff5e795 g       *ABS*	00000000 mbedtls_md5_free
0ff613b1 g       *ABS*	00000000 mbedtls_pem_write_buffer
0ff575b5 g       *ABS*	00000000 mbedtls_asn1_write_named_bitstring
0ff65785 g       *ABS*	00000000 mbedtls_ssl_get_ciphersuite_sig_alg
0ff58de9 g       *ABS*	00000000 mbedtls_cipher_write_tag
0ff67869 g       *ABS*	00000000 mbedtls_x509_sig_alg_gets
080014d8 g     F .text	00000024 flash_offset_mapping
0ff60d51 g       *ABS*	00000000 mbedtls_oid_get_md_hmac
0ff5afa1 g       *ABS*	00000000 mbedtls_ecp_point_read_string
08000b14 g     F .text	00000276 .hidden __aeabi_dadd
0ff63c59 g       *ABS*	00000000 mbedtls_rsa_public
080012ac g     F .text	00000082 .hidden __ledf2
0ff59931 g       *ABS*	00000000 mbedtls_ecdsa_from_keypair
080030d4  w    F .text	00000002 USART0_IRQHandler
0ff5a5dd g       *ABS*	00000000 mbedtls_ecp_gen_key
0ff61d69 g       *ABS*	00000000 mbedtls_pk_verify_ext
0ff58541 g       *ABS*	00000000 mbedtls_ccm_init
08004c54 g     F .text	0000009c __pow5mult
08000e14 g     F .text	0000006a .hidden __aeabi_ul2d
0ff5770d g       *ABS*	00000000 mbedtls_asn1_write_tagged_string
0ff5f0d1 g       *ABS*	00000000 mbedtls_mpi_div_int
0ff64975 g       *ABS*	00000000 mbedtls_rsa_validate_params
080030d4  w    F .text	00000002 TIMER1_IRQHandler
08005e68 g     O .rodata	00000020 __sf_fake_stderr
080020b8 g     F .text	00000054 sys_status_set
0ff62ad5 g       *ABS*	00000000 mbedtls_platform_teardown
0ff58525 g       *ABS*	00000000 mbedtls_ccm_free
0ff58ac5 g       *ABS*	00000000 mbedtls_cipher_setkey
0ff65f65 g       *ABS*	00000000 mbedtls_x509_crl_parse_der
0ff65311 g       *ABS*	00000000 mbedtls_sha512_process
0ff615d5 g       *ABS*	00000000 mbedtls_pk_get_bitlen
20001e0c g       .bss	00000000 end
0ff60131 g       *ABS*	00000000 mbedtls_mpi_is_prime_ext
080030d4  w    F .text	00000002 I2C1_EV_IRQHandler
0ff657a9 g       *ABS*	00000000 mbedtls_ssl_get_ciphersuite_sig_pk_alg
0ff5ae31 g       *ABS*	00000000 mbedtls_ecp_muladd_restartable
0ff686f9 g       *ABS*	00000000 mbedtls_x509write_csr_set_subject_name
0ff73018 g       *ABS*	00000000 mbedtls_ed25519_info
08004928 g     F .text	00000002 __retarget_lock_release_recursive
0ff60321 g       *ABS*	00000000 mbedtls_mpi_mul_int
0ff6b8a5 g       *ABS*	00000000 x25519_ge_frombytes_vartime
0ff5f479 g       *ABS*	00000000 mbedtls_mpi_exp_mod
0ff606bd g       *ABS*	00000000 mbedtls_mpi_safe_cond_assign
0ff56cc9 g       *ABS*	00000000 mbedtls_aes_setkey_enc
0ff64db5 g       *ABS*	00000000 mbedtls_sha256_finish_ret
0ff58b61 g       *ABS*	00000000 mbedtls_cipher_update
0ff5a591 g       *ABS*	00000000 mbedtls_ecp_curve_list
0ff5ec25 g       *ABS*	00000000 mbedtls_md_init
0ff5944d g       *ABS*	00000000 mbedtls_dhm_make_params
0ff6576d g       *ABS*	00000000 mbedtls_ssl_get_ciphersuite_name
0ff60f65 g       *ABS*	00000000 mbedtls_oid_get_pkcs12_pbe_alg
0ff5e7d5 g       *ABS*	00000000 mbedtls_md5_starts_ret
0ff5e6c5 g       *ABS*	00000000 mbedtls_md5_finish_ret
080013a0 g     F .text	00000012 .hidden __aeabi_dcmpgt
0ff62ad9 g       *ABS*	00000000 mbedtls_platform_zeroize
08005122 g     F .text	00000024 __sfputs_r
0ff5eef5 g       *ABS*	00000000 mbedtls_mpi_cmp_abs
0ff5a62d g       *ABS*	00000000 mbedtls_ecp_gen_keypair_base
0ff61d55 g       *ABS*	00000000 mbedtls_pk_verify
2000086c g     F .code_to_sram	00000034 qspi_command
0ff59ea5 g       *ABS*	00000000 mbedtls_ecjpake_check
080030d4  w    F .text	00000002 SecureFault_Handler
080047b0 g     F .text	0000000c __sfp_lock_acquire
0800493c g     F .text	0000001c memchr
0ff62b59 g       *ABS*	00000000 mbedtls_rsa_check_pub_priv
0800328c  w    F .text	0000046c _printf_float
20001e0c g       .bss	00000000 __bss_end__
08004fa0 g     F .text	000000a0 _free_r
0ff5b1ed g       *ABS*	00000000 mbedtls_entropy_free
0800138c g     F .text	00000012 .hidden __aeabi_dcmpge
080030d4  w    F .text	00000002 EXTI10_15_IRQHandler
080030d4  w    F .text	00000002 RTC_Alarm_S_IRQHandler
0ff572b1 g       *ABS*	00000000 mbedtls_asn1_write_bitstring
08002218 g     F .text	00000024 sys_err_process_set
0ff5aee5 g       *ABS*	00000000 mbedtls_ecp_point_free
0ff654b9 g       *ABS*	00000000 mbedtls_sha512_update
0ff58b21 g       *ABS*	00000000 mbedtls_cipher_setup
08000b10 g     F .text	0000027a .hidden __aeabi_dsub
080030d4 g       .text	00000002 Default_Handler
0ff5ef85 g       *ABS*	00000000 mbedtls_mpi_cmp_int
08002c6c g     F .text	0000001c rcu_periph_clock_enable
0ff6b9d9 g       *ABS*	00000000 x25519_ge_p1p1_to_p2
0ff66895 g       *ABS*	00000000 mbedtls_x509_crt_is_revoked
0ff65359 g       *ABS*	00000000 mbedtls_sha512_starts_ret
0ff5a4a9 g       *ABS*	00000000 mbedtls_ecp_check_pubkey
0ff726a8 g       *ABS*	00000000 ciphersuite_preference_default
08000e14 g     F .text	0000006a .hidden __floatundidf
0ff62939 g       *ABS*	00000000 mbedtls_pkcs5_pbkdf2_hmac
08005970 g     F .text	00000010 _lseek
08004cf0 g     F .text	000000be __lshift
0ff5f581 g       *ABS*	00000000 mbedtls_mpi_exp_mod_sw
0ff662f9 g       *ABS*	00000000 mbedtls_x509_crt_free
0ff5b301 g       *ABS*	00000000 mbedtls_entropy_init
0ff5ece9 g       *ABS*	00000000 mbedtls_memory_buffer_alloc_init
0ff60215 g       *ABS*	00000000 mbedtls_mpi_mod_int
0ff67955 g       *ABS*	00000000 mbedtls_x509_string_to_names
0ff56d35 g       *ABS*	00000000 mbedtls_arc4_init
080030d4  w    F .text	00000002 RTC_WKUP_S_IRQHandler
0ff5775d g       *ABS*	00000000 mbedtls_asn1_write_utf8_string
080030d4  w    F .text	00000002 ADC_IRQHandler
080030d4  w    F .text	00000002 DMA0_Channel7_IRQHandler
0ff60cf1 g       *ABS*	00000000 mbedtls_oid_get_cipher_alg
0ff598e9 g       *ABS*	00000000 mbedtls_ecdh_read_params
0ff6444d g       *ABS*	00000000 mbedtls_rsa_rsassa_pss_sign
0ff66e5d g       *ABS*	00000000 mbedtls_x509_csr_init
0ff5f065 g       *ABS*	00000000 mbedtls_mpi_copy
0ff6bb7d g       *ABS*	00000000 x25519_sc_reduce
08004b1e g     F .text	00000136 __multiply
0ff68281 g       *ABS*	00000000 mbedtls_x509write_crt_set_validity
08002adc g     F .text	0000000c fmc_flag_clear
08002894 g     F .text	00000024 fmc_unlock
0ff591ed g       *ABS*	00000000 mbedtls_des3_set3key_enc
08004ee0 g     F .text	000000a0 __d2b
0ff5999d g       *ABS*	00000000 mbedtls_ecdsa_init
080030d4  w    F .text	00000002 WWDGT_IRQHandler
0ff67b9d g       *ABS*	00000000 mbedtls_x509write_crt_der
0ff59c85 g       *ABS*	00000000 mbedtls_ecdsa_sign_det
08000100 g       *ABS*	00000000 _sicode
0ff592d5 g       *ABS*	00000000 mbedtls_des_setkey_enc
0ff64d01 g       *ABS*	00000000 mbedtls_sha1_update
0ff621a5 g       *ABS*	00000000 mbedtls_pk_write_key_pem
0ff60afd g       *ABS*	00000000 mbedtls_mpi_swap
0ff731e8 g       *ABS*	00000000 mbedtls_x509_crt_profile_suiteb
0ff5c58d g       *ABS*	00000000 mbedtls_internal_sha1_process
0ff5991d g       *ABS*	00000000 mbedtls_ecdh_read_public
200008a0 g     F .code_to_sram	00000064 qspi_transmit
0ff597d1 g       *ABS*	00000000 mbedtls_dhm_read_public
0ff57421 g       *ABS*	00000000 mbedtls_asn1_write_len
2000d200 g       .stack	00000000 Image$$ARM_LIB_STACKHEAP$$ZI$$Base
080055f4 g     F .text	00000020 _close_r
0800294c g     F .text	00000078 fmc_word_program
08000dac g     F .text	00000022 .hidden __aeabi_i2d
0ff5eb2d g       *ABS*	00000000 mbedtls_md_hmac_update
0ff5b0a9 g       *ABS*	00000000 mbedtls_ecp_tls_read_group
0ff68879 g       *ABS*	00000000 mbedtls_xtea_setup
0ff60855 g       *ABS*	00000000 mbedtls_mpi_shift_l
0ff5efad g       *ABS*	00000000 mbedtls_mpi_cmp_mpi
0ff5b421 g       *ABS*	00000000 mbedtls_gcm_finish
0ff62a91 g       *ABS*	00000000 mbedtls_platform_set_hardware_poll
0ff5a839 g       *ABS*	00000000 mbedtls_ecp_group_load
0ff5766d g       *ABS*	00000000 mbedtls_asn1_write_oid
0ff5afd1 g       *ABS*	00000000 mbedtls_ecp_point_write_binary
0ff590ad g       *ABS*	00000000 mbedtls_ctr_drbg_set_reseed_interval
0ff59655 g       *ABS*	00000000 mbedtls_dhm_parse_dhm
08005518 g     F .text	000000dc __swsetup_r
0ff638ed g       *ABS*	00000000 mbedtls_rsa_pkcs1_verify
0ff60f85 g       *ABS*	00000000 mbedtls_oid_get_sig_alg
0ff5ed69 g       *ABS*	00000000 mbedtls_mpi_add_abs
0ff598a9 g       *ABS*	00000000 mbedtls_ecdh_make_params
080010d4 g     F .text	000001d0 .hidden __divdf3
08004850 g     F .text	0000008c __sfp
0ff68871 g       *ABS*	00000000 mbedtls_xtea_init
0ff655fd g       *ABS*	00000000 mbedtls_ssl_ciphersuite_uses_psk
08002e8c g     F .text	00000068 usart_baudrate_set
0ff5b2fd g       *ABS*	00000000 mbedtls_entropy_gather
0ff59829 g       *ABS*	00000000 mbedtls_ecdh_compute_shared
080030d4  w    F .text	00000002 TAMPER_STAMP_IRQHandler
0ff59971 g       *ABS*	00000000 mbedtls_ecdsa_genkey
080030d4  w    F .text	00000002 RTC_WKUP_IRQHandler
0ff637a9 g       *ABS*	00000000 mbedtls_rsa_import_raw
0ff58605 g       *ABS*	00000000 mbedtls_ccm_star_encrypt_and_tag
080047d4 g     F .text	0000000c __sinit_lock_release
0ff602a9 g       *ABS*	00000000 mbedtls_mpi_mod_mpi
0ff5ec41 g       *ABS*	00000000 mbedtls_md_process
0ff67721 g       *ABS*	00000000 mbedtls_x509_key_size_helper
08000e80 g     F .text	00000254 .hidden __muldf3
080053c8 g     F .text	00000022 __sread
0ff5ec59 g       *ABS*	00000000 mbedtls_md_setup
0ff67a71 g       *ABS*	00000000 mbedtls_x509_write_extensions
0ff59e19 g       *ABS*	00000000 mbedtls_ecdsa_write_signature
0ff68585 g       *ABS*	00000000 mbedtls_x509write_csr_free
0ff66ad9 g       *ABS*	00000000 mbedtls_x509_crt_verify
0ff62a79 g       *ABS*	00000000 mbedtls_platform_set_calloc_free
080058a4 g     F .text	0000000c __malloc_lock
0ff61b4d g       *ABS*	00000000 mbedtls_pk_parse_subpubkey
0ff68191 g       *ABS*	00000000 mbedtls_x509write_crt_set_ns_cert_type
0ff5872d g       *ABS*	00000000 mbedtls_cipher_check_tag
0ff5b9f1 g       *ABS*	00000000 mbedtls_hmac_drbg_free
0800571c g     F .text	00000078 _fflush_r
08004f80 g     F .text	0000001e _calloc_r
0ff58781 g       *ABS*	00000000 mbedtls_cipher_crypt
0ff61581 g       *ABS*	00000000 mbedtls_pk_encrypt
0ff59921 g       *ABS*	00000000 mbedtls_ecdh_setup
0ff5faa9 g       *ABS*	00000000 mbedtls_mpi_gcd
0ff66bd5 g       *ABS*	00000000 mbedtls_x509_crt_verify_restartable
08005e88 g     O .rodata	00000020 __sf_fake_stdin
0ff5e8f1 g       *ABS*	00000000 mbedtls_md_finish
08004926 g     F .text	00000002 __retarget_lock_acquire_recursive
0ff64da9 g       *ABS*	00000000 mbedtls_sha256_clone
0ff57d29 g       *ABS*	00000000 mbedtls_calloc
0ff5ad09 g       *ABS*	00000000 mbedtls_ecp_mul
0ff5bc69 g       *ABS*	00000000 mbedtls_hmac_drbg_update
0800313a g     F .text	00000010 memset
0ff5ec35 g       *ABS*	00000000 mbedtls_md_list
08002aa8 g     F .text	00000020 fmc_offset_region_config
08002f10 g     F .text	00000008 usart_data_transmit
080030d4  w    F .text	00000002 MemManage_Handler
0ff61ced g       *ABS*	00000000 mbedtls_pk_sign
08001ac0 g     F .text	000000f8 main
0ff57ddd g       *ABS*	00000000 mbedtls_camellia_crypt_cfb128
08001470 g     F .text	0000002c is_valid_flash_addr
08004924 g     F .text	00000002 __retarget_lock_init_recursive
20000b60 g     F .code_to_sram	00000048 qspi_memorymapped_fmc_s
0ff63911 g       *ABS*	00000000 mbedtls_rsa_private
0ff65595 g       *ABS*	00000000 mbedtls_ssl_ciphersuite_from_string
0ff5e7d1 g       *ABS*	00000000 mbedtls_md5_starts
080030d4  w    F .text	00000002 TIMER0_CMT_IRQHandler
0ff62ac1 g       *ABS*	00000000 mbedtls_platform_set_time
200009bc g     F .code_to_sram	00000044 qspi_memorymapped
08002720 g     F .text	00000024 uart_putc
0ff72df0 g       *ABS*	00000000 mbedtls_cipher_definitions
080028c8 g     F .text	00000084 fmc_page_erase
0ff598c9 g       *ABS*	00000000 mbedtls_ecdh_make_public
0ff65091 g       *ABS*	00000000 mbedtls_sha512_finish_ret
0ff5e959 g       *ABS*	00000000 mbedtls_md_get_type
080030d4  w    F .text	00000002 SVC_Handler
08005446 g     F .text	00000008 __sclose
08001f60 g     F .text	0000002c mbedtls_init
0ff6864d g       *ABS*	00000000 mbedtls_x509write_csr_set_extension
0ff681e5 g       *ABS*	00000000 mbedtls_x509write_crt_set_subject_key
0ff60fa5 g       *ABS*	00000000 mbedtls_oid_get_sig_alg_desc
0ff5b3d5 g       *ABS*	00000000 mbedtls_gcm_crypt_and_tag
0ff64ed9 g       *ABS*	00000000 mbedtls_sha256_free
0ff58039 g       *ABS*	00000000 mbedtls_camellia_free
0ff6ba89 g       *ABS*	00000000 x25519_ge_sub
08003b78 g     F .text	00000bb8 _dtoa_r
08005040 g     F .text	000000b4 _malloc_r
080058e0 g     F .text	0000001a __ascii_wctomb
08000e24 g     F .text	0000005a .hidden __aeabi_l2d
0ff5b361 g       *ABS*	00000000 mbedtls_gcm_auth_decrypt
0ff672d9 g       *ABS*	00000000 mbedtls_x509_get_ext
0ff5aced g       *ABS*	00000000 mbedtls_ecp_keypair_init
0ff5e9cd g       *ABS*	00000000 mbedtls_md_hmac_finish
0ff56cb1 g       *ABS*	00000000 mbedtls_aes_init
0ff589d5 g       *ABS*	00000000 mbedtls_cipher_init
0ff61619 g       *ABS*	00000000 mbedtls_pk_info_from_type
0ff6575d g       *ABS*	00000000 mbedtls_ssl_get_ciphersuite_id
080030d4  w    F .text	00000002 EXTI4_IRQHandler
0ff67341 g       *ABS*	00000000 mbedtls_x509_get_name
0ff64eed g       *ABS*	00000000 mbedtls_sha256_process
0ff685a5 g       *ABS*	00000000 mbedtls_x509write_csr_init
0ff64831 g       *ABS*	00000000 mbedtls_rsa_set_padding
0ff72fe8 g       *ABS*	00000000 mbedtls_eckeydh_info
0ff5e7a1 g       *ABS*	00000000 mbedtls_md5_init
0ff5895d g       *ABS*	00000000 mbedtls_cipher_info_from_type
0ff73078 g       *ABS*	00000000 mbedtls_rsa_alt_info
0ff589dd g       *ABS*	00000000 mbedtls_cipher_list
0ff5e6b9 g       *ABS*	00000000 mbedtls_md5_clone
08002ffc g     F .text	0000006c SystemInit
0ff685ad g       *ABS*	00000000 mbedtls_x509write_csr_pem
0ff654bd g       *ABS*	00000000 mbedtls_sha512_update_ret
080030d4  w    F .text	00000002 DMA0_Channel5_IRQHandler
080012b4 g     F .text	0000007a .hidden __nedf2
0ff5ec2d g       *ABS*	00000000 mbedtls_md_init_ctx
08002c08 g     F .text	00000064 icache_disable
0ff687a5 g       *ABS*	00000000 mbedtls_xtea_crypt_ecb
0ff5eb51 g       *ABS*	00000000 mbedtls_md_info_from_string
080059b8 g     F .text	00000000 _fini
08003a24 g     F .text	00000030 iprintf
0ff673e5 g       *ABS*	00000000 mbedtls_x509_get_rsassa_pss_params
0ff64d05 g       *ABS*	00000000 mbedtls_sha1_update_ret
0ff65b4d g       *ABS*	00000000 mbedtls_x509_crl_info
0ff6508d g       *ABS*	00000000 mbedtls_sha512_finish
0ff56d95 g       *ABS*	00000000 mbedtls_asn1_find_named_data
0ff63739 g       *ABS*	00000000 mbedtls_rsa_import
0800320e g     F .text	0000007c __exponent
0ff67a69 g       *ABS*	00000000 mbedtls_x509_time_is_future
0ff62ab1 g       *ABS*	00000000 mbedtls_platform_set_snprintf
08002e30 g     F .text	0000005c usart_deinit
0ff56c45 g       *ABS*	00000000 mbedtls_aes_crypt_ofb
0ff5ee39 g       *ABS*	00000000 mbedtls_mpi_add_int
080022e8 g     F .text	0000004e sys_running_img_set
080030d4  w    F .text	00000002 PVM_IRQHandler
0ff56de9 g       *ABS*	00000000 mbedtls_asn1_free_named_data_list
080054f4 g     F .text	00000024 _write_r
0ff6818d g       *ABS*	00000000 mbedtls_x509write_crt_set_md_alg
0ff57d3d g       *ABS*	00000000 mbedtls_camellia_crypt_cbc
0ff61515 g       *ABS*	00000000 mbedtls_pk_debug
0ff73108 g       *ABS*	00000000 mbedtls_sha224_info
0ff64b9d g       *ABS*	00000000 mbedtls_sha1_finish_ret
0ff5b34d g       *ABS*	00000000 mbedtls_free
0ff5bd45 g       *ABS*	00000000 mbedtls_hwpka_flag_set
0ff584fd g       *ABS*	00000000 mbedtls_ccm_auth_decrypt
0ff5b341 g       *ABS*	00000000 mbedtls_entropy_update_manual
080036f8 g     F .text	000000e0 _printf_common
20000c00 g     O .data	00000004 _impure_ptr
20000360 g     F .code_to_sram	00000164 qspi_flash_config
08002ca8 g     F .text	00000004 rcu_periph_reset_enable
0ff5acb5 g       *ABS*	00000000 mbedtls_ecp_is_zero
08005614 g     F .text	00000108 __sflush_r
0ff79139 g       *ABS*	00000000 ROM_HMAC_SHA1
0ff62bed g       *ABS*	00000000 mbedtls_rsa_complete
0ff57c25 g       *ABS*	00000000 mbedtls_blowfish_free
0ff5982d g       *ABS*	00000000 mbedtls_ecdh_free
0800287c g     F .text	00000018 log_uart_idle_wait
0ff597f5 g       *ABS*	00000000 mbedtls_dhm_set_group
080030d4  w    F .text	00000002 TAMP_STAMP_S_IRQHandler
0ff57e69 g       *ABS*	00000000 mbedtls_camellia_crypt_ctr
0ff60f4d g       *ABS*	00000000 mbedtls_oid_get_pk_alg
0ff67165 g       *ABS*	00000000 mbedtls_x509_dn_gets
08005880 g     F .text	00000024 __ascii_mbtowc
08002384 g     F .text	00000020 sys_trng_seed_set
0ff5b839 g       *ABS*	00000000 mbedtls_hkdf
0ff672c9 g       *ABS*	00000000 mbedtls_x509_get_alg_null
0ff5b149 g       *ABS*	00000000 mbedtls_ecp_tls_write_group
0ff61e6d g       *ABS*	00000000 mbedtls_pk_write_key_der
0ff5fe4d g       *ABS*	00000000 mbedtls_mpi_inv_mod
0ff632cd g       *ABS*	00000000 mbedtls_rsa_export_crt
0ff6805d g       *ABS*	00000000 mbedtls_x509write_crt_set_basic_constraints
080030d4  w    F .text	00000002 EXTI5_9_IRQHandler
0ff5bb8d g       *ABS*	00000000 mbedtls_hmac_drbg_seed
0ff64b91 g       *ABS*	00000000 mbedtls_sha1_clone
0ff5e7ad g       *ABS*	00000000 mbedtls_md5_ret
0ff5b181 g       *ABS*	00000000 mbedtls_ecp_tls_write_point
0ff5f0fd g       *ABS*	00000000 mbedtls_mpi_div_mpi
08002a64 g     F .text	00000044 fmc_no_rtdec_config
0ff609e9 g       *ABS*	00000000 mbedtls_mpi_size
0ff5917d g       *ABS*	00000000 mbedtls_des3_free
0ff68109 g       *ABS*	00000000 mbedtls_x509write_crt_set_extension
0ff58da9 g       *ABS*	00000000 mbedtls_cipher_update_ad
0ff66d05 g       *ABS*	00000000 mbedtls_x509_csr_info
0ff5b0c9 g       *ABS*	00000000 mbedtls_ecp_tls_read_group_id
0ff56c11 g       *ABS*	00000000 mbedtls_aes_crypt_ecb
2000051c g     F .code_to_sram	00000052 qspi_flash_page_program
0ff64c81 g       *ABS*	00000000 mbedtls_sha1_free
0ff56b95 g       *ABS*	00000000 mbedtls_aes_crypt_ctr
080030d4  w    F .text	00000002 RCU_IRQHandler
0ff570b5 g       *ABS*	00000000 mbedtls_asn1_get_mpi
0ff607f9 g       *ABS*	00000000 mbedtls_mpi_set_bit
0ff57775 g       *ABS*	00000000 mbedtls_base64_decode
0ff730d8 g       *ABS*	00000000 mbedtls_sha1_info
0ff576c5 g       *ABS*	00000000 mbedtls_asn1_write_raw_buffer
080030d4  w    F .text	00000002 DMA0_Channel1_IRQHandler
200004c4 g     F .code_to_sram	00000058 qspi_flash_read
080030d4  w    F .text	00000002 TIMER0_Channel_IRQHandler
0ff63125 g       *ABS*	00000000 mbedtls_rsa_deduce_private_exponent
0ff60125 g       *ABS*	00000000 mbedtls_mpi_is_prime
0ff5a0ad g       *ABS*	00000000 mbedtls_ecjpake_read_round_two
0ff56d41 g       *ABS*	00000000 mbedtls_arc4_setup
080057b8 g     F .text	00000048 __swhatbuf_r
0ff65ac9 g       *ABS*	00000000 mbedtls_x509_crl_free
0ff66889 g       *ABS*	00000000 mbedtls_x509_crt_init
0ff64385 g       *ABS*	00000000 mbedtls_rsa_rsassa_pkcs1_v15_verify
0ff5a571 g       *ABS*	00000000 mbedtls_ecp_curve_info_from_tls_id
0ff5bc6d g       *ABS*	00000000 mbedtls_hmac_drbg_update_ret
0ff64b8d g       *ABS*	00000000 mbedtls_sha1
080030d4  w    F .text	00000002 EXTI1_IRQHandler
08001350 g     F .text	00000012 .hidden __aeabi_dcmpeq
0ff599a1 g       *ABS*	00000000 mbedtls_ecdsa_read_signature
0ff570e1 g       *ABS*	00000000 mbedtls_asn1_get_sequence_of
08002744 g     F .text	0000001a _write
0ff5929d g       *ABS*	00000000 mbedtls_des_init
0ff62751 g       *ABS*	00000000 mbedtls_pkcs12_pbe_sha1_rc4_128
20000dd0 g       .data	00000000 _edata
0ff66e65 g       *ABS*	00000000 mbedtls_x509_csr_parse
080030d4  w    F .text	00000002 SPI0_IRQHandler
0ff5b719 g       *ABS*	00000000 mbedtls_gcm_update
0ff60d09 g       *ABS*	00000000 mbedtls_oid_get_ec_grp
0ff5b10d g       *ABS*	00000000 mbedtls_ecp_tls_read_point
08002a30 g     F .text	00000024 ob_unlock
0ff5e8b5 g       *ABS*	00000000 mbedtls_md_clone
0ff59e2d g       *ABS*	00000000 mbedtls_ecdsa_write_signature_det
0ff5b555 g       *ABS*	00000000 mbedtls_gcm_free
20001e01 g     O .bss	00000001 __lock___at_quick_exit_mutex
0ff599b5 g       *ABS*	00000000 mbedtls_ecdsa_read_signature_restartable
0ff57b51 g       *ABS*	00000000 mbedtls_blowfish_crypt_ctr
200002ec g     F .code_to_sram	00000038 qspi_flash_chip_erase
0ff5a7fd g       *ABS*	00000000 mbedtls_ecp_group_init
0ff5ac65 g       *ABS*	00000000 mbedtls_ecp_grp_id_list
0ff64fe1 g       *ABS*	00000000 mbedtls_sha256_update_ret
0ff5ea29 g       *ABS*	00000000 mbedtls_md_hmac_reset
0ff65309 g       *ABS*	00000000 mbedtls_sha512_init
080029c4 g     F .text	0000006c fmc_continuous_program
0ff57a1d g       *ABS*	00000000 mbedtls_blowfish_crypt_cbc
080030d4  w    F .text	00000002 USART2_IRQHandler
0ff672b9 g       *ABS*	00000000 mbedtls_x509_get_alg
080053ea g     F .text	00000038 __swrite
08007c00 g     O .MBL_API_CODE	00000100 mbl_api
0ff65355 g       *ABS*	00000000 mbedtls_sha512_starts
0ff66259 g       *ABS*	00000000 mbedtls_x509_crt_check_extended_key_usage
0ff59191 g       *ABS*	00000000 mbedtls_des3_set2key_dec
0ff62e7d g       *ABS*	00000000 mbedtls_rsa_deduce_crt
08005148 g     F .text	00000260 _vfiprintf_r
0ff5ecc1 g       *ABS*	00000000 mbedtls_md_update
080048dc g     F .text	0000003e _fwalk_reent
08004de6 g     F .text	000000fa __mdiff
080013e0 g     F .text	0000004e .hidden __aeabi_d2iz
0ff5e94d g       *ABS*	00000000 mbedtls_md_get_size
20000200 g       .code_to_sram	00000000 _scode
0ff68279 g       *ABS*	00000000 mbedtls_x509write_crt_set_subject_name
0ff5e6c1 g       *ABS*	00000000 mbedtls_md5_finish
0ff6762d g       *ABS*	00000000 mbedtls_x509_get_sig_alg
080047bc g     F .text	0000000c __sfp_lock_release
0ff58109 g       *ABS*	00000000 mbedtls_camellia_setkey_enc
08005ea8 g     O .rodata	00000020 __sf_fake_stdout
0ff5fa81 g       *ABS*	00000000 mbedtls_mpi_free
0ff5e965 g       *ABS*	00000000 mbedtls_md_hmac
0ff57605 g       *ABS*	00000000 mbedtls_asn1_write_null
08005fdf g     O .rodata	00000101 _ctype_
0ff731d8 g       *ABS*	00000000 mbedtls_x509_crt_profile_next
08005980 g     F .text	00000010 _read
0ff61989 g       *ABS*	00000000 mbedtls_pk_parse_public_key
080013b4 g     F .text	0000002c .hidden __unorddf2
0ff5ba15 g       *ABS*	00000000 mbedtls_hmac_drbg_random
0ff68865 g       *ABS*	00000000 mbedtls_xtea_free
0ff59265 g       *ABS*	00000000 mbedtls_des_crypt_ecb
20000a00 g     F .code_to_sram	00000010 qspi_abort
0ff59825 g       *ABS*	00000000 mbedtls_ecdh_calc_secret
0ff5ad1d g       *ABS*	00000000 mbedtls_ecp_mul_restartable
0ff61c9d g       *ABS*	00000000 mbedtls_pk_setup_rsa_alt
0ff59445 g       *ABS*	00000000 mbedtls_dhm_init
0ff66f75 g       *ABS*	00000000 mbedtls_x509_csr_parse_der
0ff56a25 g       *ABS*	00000000 mbedtls_aes_crypt_cbc
0ff682d5 g       *ABS*	00000000 mbedtls_x509write_csr_der
0ff5ba0d g       *ABS*	00000000 mbedtls_hmac_drbg_init
0ff5bc65 g       *ABS*	00000000 mbedtls_hmac_drbg_set_reseed_interval
0ff622f1 g       *ABS*	00000000 mbedtls_pk_write_pubkey_der
0ff60751 g       *ABS*	00000000 mbedtls_mpi_safe_cond_swap
080030d4  w    F .text	00000002 BusFault_Handler
080030d4  w    F .text	00000002 USART1_IRQHandler
20001e02 g     O .bss	00000001 __lock___dd_hash_mutex
0ff60e35 g       *ABS*	00000000 mbedtls_oid_get_oid_by_ec_grp
08005800 g     F .text	00000080 __smakebuf_r
08002f18 g     F .text	00000012 usart_flag_get
20001e03 g     O .bss	00000001 __lock___tz_mutex
080017c0 g     F .text	00000128 flash_fast_write
08000af8 g     F .text	00000010 strlen
080037d8 g     F .text	0000024c _printf_i
08002b68 g     F .text	00000068 gpio_af_set
0ff587c5 g       *ABS*	00000000 mbedtls_cipher_finish
0ff5ea61 g       *ABS*	00000000 mbedtls_md_hmac_starts
08001340 g     F .text	00000010 .hidden __aeabi_cdcmpeq
080012a4 g     F .text	0000008a .hidden __gedf2
20000bf8 g       .code_to_sram	00000000 _ecode
0ff6ba09 g       *ABS*	00000000 x25519_ge_p1p1_to_p3
20001df4 g     O .bss	00000004 __malloc_sbrk_start
0ff58a85 g       *ABS*	00000000 mbedtls_cipher_set_padding_mode
0ff61d09 g       *ABS*	00000000 mbedtls_pk_sign_restartable
080030d4  w    F .text	00000002 I2C1_ER_IRQHandler
0ff63829 g       *ABS*	00000000 mbedtls_rsa_init
080030d4  w    F .text	00000002 FMC_IRQHandler
0ff638c9 g       *ABS*	00000000 mbedtls_rsa_pkcs1_sign
0ff61c69 g       *ABS*	00000000 mbedtls_pk_setup
08000dd0 g     F .text	00000042 .hidden __aeabi_f2d
080019b4 g     F .text	0000001e checksum_cal
0ff4f825 g       *ABS*	00000000 ED25519_verify
200002a8 g     F .code_to_sram	00000042 qspi_flash_sector_erase
20001df0 g     O .bss	00000004 __malloc_free_list
0ff67afd g       *ABS*	00000000 mbedtls_x509_write_sig
0ff61631 g       *ABS*	00000000 mbedtls_pk_init
0ff675e5 g       *ABS*	00000000 mbedtls_x509_get_sig
0ff609f5 g       *ABS*	00000000 mbedtls_mpi_sub_abs
0ff5fa19 g       *ABS*	00000000 mbedtls_mpi_fill_random
0ff56cd9 g       *ABS*	00000000 mbedtls_arc4_crypt
08000b10 g     F .text	0000027a .hidden __subdf3
08005148 g     F .text	00000260 _vfprintf_r
0ff5b211 g       *ABS*	00000000 mbedtls_entropy_func
080030d4  w    F .text	00000002 DMA0_Channel4_IRQHandler
0ff5ec0d g       *ABS*	00000000 mbedtls_md_info_from_type
0ff72f88 g       *ABS*	00000000 mbedtls_ecdsa_info
080015bc g     F .text	00000094 flash_indirect_read
0ff57911 g       *ABS*	00000000 mbedtls_base64_encode
08004aac g     F .text	00000060 __lo0bits
0ff5b1bd g       *ABS*	00000000 mbedtls_entropy_add_source
0ff5e909 g       *ABS*	00000000 mbedtls_md_free
08002260 g     F .text	00000088 sys_img_flag_set
0ff60bb1 g       *ABS*	00000000 mbedtls_mpi_write_string
0ff634c1 g       *ABS*	00000000 mbedtls_rsa_gen_key
0ff56dc5 g       *ABS*	00000000 mbedtls_asn1_free_named_data
20000a10 g     F .code_to_sram	00000034 qspi_command_fmc_s
0ff639a9 g       *ABS*	00000000 mbedtls_rsa_private_sw
0ff5a361 g       *ABS*	00000000 mbedtls_ecp_check_privkey
0ff73168 g       *ABS*	00000000 mbedtls_sha384_info
0ff5ed5d g       *ABS*	00000000 mbedtls_memory_buffer_set_verify
0ff58a41 g       *ABS*	00000000 mbedtls_cipher_set_iv
0ff614c1 g       *ABS*	00000000 mbedtls_pk_check_pair
0ff681dd g       *ABS*	00000000 mbedtls_x509write_crt_set_serial
20000c64 g     O .data	0000016c __global_locale
0ff592c1 g       *ABS*	00000000 mbedtls_des_setkey_dec
0ff5be3d g       *ABS*	00000000 mbedtls_internal_md5_process
0ff592a5 g       *ABS*	00000000 mbedtls_des_key_set_parity
0ff681e9 g       *ABS*	00000000 mbedtls_x509write_crt_set_subject_key_identifier
0ff57251 g       *ABS*	00000000 mbedtls_asn1_write_algorithm_identifier
0ff6b7f9 g       *ABS*	00000000 x25519_ge_add
0ff730a8 g       *ABS*	00000000 mbedtls_rsa_info
20001e04 g     O .bss	00000001 __lock___sfp_recursive_mutex
0ff5ed59 g       *ABS*	00000000 mbedtls_memory_buffer_alloc_verify
08005940 g     F .text	00000010 _close
0ff5e6b5 g       *ABS*	00000000 mbedtls_md5
080047c8 g     F .text	0000000c __sinit_lock_acquire
0ff65571 g       *ABS*	00000000 mbedtls_ssl_ciphersuite_from_id
080049ee g     F .text	0000007e __multadd
080049c0 g     F .text	0000002e _Bfree
0ff5b889 g       *ABS*	00000000 mbedtls_hkdf_expand
0ff686b1 g       *ABS*	00000000 mbedtls_x509write_csr_set_ns_cert_type
0ff64f25 g       *ABS*	00000000 mbedtls_sha256_starts_ret



Disassembly of section .code_to_sram:

20000200 <qspi_flash_write_enable>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
static void qspi_flash_write_enable(void)
{
20000200:	b5f0      	push	{r4, r5, r6, r7, lr}
    qspi_command_struct sCommand;
    qspi_autopolling_struct sConfig;

    /* Enable write operations ------------------------------------------ */
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
20000202:	f44f 7180 	mov.w	r1, #256	; 0x100
    sCommand.instruction         = WRITE_ENABLE_CMD;
    sCommand.addressmode         = QSPI_ADDRESS_NONE;
20000206:	2400      	movs	r4, #0
    sCommand.instruction         = WRITE_ENABLE_CMD;
20000208:	2206      	movs	r2, #6
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
2000020a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
2000020e:	b093      	sub	sp, #76	; 0x4c
    sCommand.dummycycles         = 0;
    sCommand.datamode            = QSPI_DATA_NONE;
    sCommand.nbdata              = 0;
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;

    qspi_command(&sCommand);
20000210:	a806      	add	r0, sp, #24
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
20000212:	910c      	str	r1, [sp, #48]	; 0x30
    sCommand.instruction         = WRITE_ENABLE_CMD;
20000214:	9206      	str	r2, [sp, #24]
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
20000216:	9309      	str	r3, [sp, #36]	; 0x24
    sCommand.nbdata              = 0;
20000218:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    sCommand.addressmode         = QSPI_ADDRESS_NONE;
2000021c:	940d      	str	r4, [sp, #52]	; 0x34
    sCommand.address             = 0;
2000021e:	9407      	str	r4, [sp, #28]
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_NONE;
20000220:	940e      	str	r4, [sp, #56]	; 0x38
    sCommand.alternatebytessize  = QSPI_ALTERNATE_BYTES_8_BITS;
20000222:	940a      	str	r4, [sp, #40]	; 0x28
    sCommand.alternatebytes      = 0;
20000224:	9408      	str	r4, [sp, #32]
    sCommand.dummycycles         = 0;
20000226:	940b      	str	r4, [sp, #44]	; 0x2c
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
20000228:	9411      	str	r4, [sp, #68]	; 0x44
    qspi_command(&sCommand);
2000022a:	f000 fb1f 	bl	2000086c <qspi_command>

    /* Configure automatic polling mode to wait for write enabling ---- */
    sConfig.match                = 0x02;
    sConfig.mask                 = 0x02;
    sConfig.matchmode            = QSPI_MATCH_MODE_AND;
    sConfig.statusbytessize      = 1;
2000022e:	2101      	movs	r1, #1
    sConfig.match                = 0x02;
20000230:	2302      	movs	r3, #2
    sConfig.interval             = 0x10;
    sConfig.automaticstop        = QSPI_AUTOMATIC_STOP_ENABLE;

    sCommand.instruction         = READ_STATUS_REG1_CMD;
    sCommand.datamode            = QSPI_DATA_1_LINE;
20000232:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    sConfig.interval             = 0x10;
20000236:	2710      	movs	r7, #16
    sConfig.automaticstop        = QSPI_AUTOMATIC_STOP_ENABLE;
20000238:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
    sCommand.instruction         = READ_STATUS_REG1_CMD;
2000023c:	2505      	movs	r5, #5
    sConfig.statusbytessize      = 1;
2000023e:	9103      	str	r1, [sp, #12]

    qspi_autopolling(&sCommand, &sConfig);
20000240:	a806      	add	r0, sp, #24
20000242:	4669      	mov	r1, sp
    sConfig.mask                 = 0x02;
20000244:	e9cd 3300 	strd	r3, r3, [sp]
    sCommand.instruction         = READ_STATUS_REG1_CMD;
20000248:	e9cd 6505 	strd	r6, r5, [sp, #20]
    sConfig.matchmode            = QSPI_MATCH_MODE_AND;
2000024c:	9404      	str	r4, [sp, #16]
    sConfig.interval             = 0x10;
2000024e:	9702      	str	r7, [sp, #8]
    sCommand.datamode            = QSPI_DATA_1_LINE;
20000250:	920f      	str	r2, [sp, #60]	; 0x3c
    qspi_autopolling(&sCommand, &sConfig);
20000252:	f000 fb85 	bl	20000960 <qspi_autopolling>
}
20000256:	b013      	add	sp, #76	; 0x4c
20000258:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000025a:	bf00      	nop

2000025c <qspi_flash_autopolling_ready>:
    qspi_command_struct sCommand;
    qspi_autopolling_struct sConfig;

    /* Configure automatic polling mode to wait for memory ready ------ */
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
    sCommand.instruction         = READ_STATUS_REG1_CMD;
2000025c:	2105      	movs	r1, #5
    sCommand.addressmode         = QSPI_ADDRESS_NONE;
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
2000025e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
{
20000262:	b5f0      	push	{r4, r5, r6, r7, lr}
    sCommand.addressmode         = QSPI_ADDRESS_NONE;
20000264:	2300      	movs	r3, #0
    sCommand.datamode            = QSPI_DATA_1_LINE;
    sCommand.nbdata              = 0;
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;

    sConfig.match                = 0x00;
    sConfig.mask                 = 0x01;
20000266:	2201      	movs	r2, #1
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
20000268:	f44f 7780 	mov.w	r7, #256	; 0x100
    sCommand.datamode            = QSPI_DATA_1_LINE;
2000026c:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    sConfig.matchmode            = QSPI_MATCH_MODE_AND;
    sConfig.statusbytessize      = 1;
    sConfig.interval             = 0x10;
20000270:	2510      	movs	r5, #16
    sConfig.automaticstop        = QSPI_AUTOMATIC_STOP_ENABLE;
20000272:	f44f 0480 	mov.w	r4, #4194304	; 0x400000
{
20000276:	b093      	sub	sp, #76	; 0x4c
    sCommand.instruction         = READ_STATUS_REG1_CMD;
20000278:	9106      	str	r1, [sp, #24]
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
2000027a:	9009      	str	r0, [sp, #36]	; 0x24

    qspi_autopolling(&sCommand, &sConfig);
2000027c:	4669      	mov	r1, sp
2000027e:	a806      	add	r0, sp, #24
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
20000280:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
    sConfig.interval             = 0x10;
20000284:	e9cd 5202 	strd	r5, r2, [sp, #8]
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
20000288:	970c      	str	r7, [sp, #48]	; 0x30
    sCommand.addressmode         = QSPI_ADDRESS_NONE;
2000028a:	930d      	str	r3, [sp, #52]	; 0x34
    sCommand.address             = 0;
2000028c:	9307      	str	r3, [sp, #28]
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_NONE;
2000028e:	930e      	str	r3, [sp, #56]	; 0x38
    sCommand.alternatebytessize  = QSPI_ALTERNATE_BYTES_8_BITS;
20000290:	930a      	str	r3, [sp, #40]	; 0x28
    sCommand.alternatebytes      = 0;
20000292:	9308      	str	r3, [sp, #32]
    sCommand.dummycycles         = 0;
20000294:	930b      	str	r3, [sp, #44]	; 0x2c
    sConfig.match                = 0x00;
20000296:	9300      	str	r3, [sp, #0]
    sConfig.matchmode            = QSPI_MATCH_MODE_AND;
20000298:	9304      	str	r3, [sp, #16]
    sCommand.datamode            = QSPI_DATA_1_LINE;
2000029a:	960f      	str	r6, [sp, #60]	; 0x3c
    sConfig.mask                 = 0x01;
2000029c:	9201      	str	r2, [sp, #4]
    sConfig.automaticstop        = QSPI_AUTOMATIC_STOP_ENABLE;
2000029e:	9405      	str	r4, [sp, #20]
    qspi_autopolling(&sCommand, &sConfig);
200002a0:	f000 fb5e 	bl	20000960 <qspi_autopolling>
}
200002a4:	b013      	add	sp, #76	; 0x4c
200002a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

200002a8 <qspi_flash_sector_erase>:
    \param[in]  address: qspi flash address
    \param[out] none
    \retval     0
*/
int32_t qspi_flash_sector_erase(uint32_t address)
{
200002a8:	b570      	push	{r4, r5, r6, lr}
200002aa:	b08c      	sub	sp, #48	; 0x30
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
    sCommand.instruction         = SECTOR_ERASE_CMD;
    sCommand.addressmode         = QSPI_ADDRESS_1_LINE;
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
    sCommand.address             = address;
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_NONE;
200002ac:	2400      	movs	r4, #0
{
200002ae:	4605      	mov	r5, r0
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
200002b0:	f44f 7680 	mov.w	r6, #256	; 0x100
    qspi_flash_write_enable();
200002b4:	f7ff ffa4 	bl	20000200 <qspi_flash_write_enable>
    sCommand.instruction         = SECTOR_ERASE_CMD;
200002b8:	2120      	movs	r1, #32
    sCommand.addressmode         = QSPI_ADDRESS_1_LINE;
200002ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
200002be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    sCommand.alternatebytes      = 0;
    sCommand.dummycycles         = 0;
    sCommand.datamode            = QSPI_DATA_NONE;
    sCommand.nbdata              = 0;
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
    qspi_command(&sCommand);
200002c2:	4668      	mov	r0, sp
    sCommand.instruction         = SECTOR_ERASE_CMD;
200002c4:	9100      	str	r1, [sp, #0]
    sCommand.addressmode         = QSPI_ADDRESS_1_LINE;
200002c6:	9207      	str	r2, [sp, #28]
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
200002c8:	9303      	str	r3, [sp, #12]
    sCommand.nbdata              = 0;
200002ca:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    sCommand.address             = address;
200002ce:	9501      	str	r5, [sp, #4]
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
200002d0:	9606      	str	r6, [sp, #24]
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_NONE;
200002d2:	9408      	str	r4, [sp, #32]
    sCommand.alternatebytessize  = QSPI_ALTERNATE_BYTES_8_BITS;
200002d4:	9404      	str	r4, [sp, #16]
    sCommand.alternatebytes      = 0;
200002d6:	9402      	str	r4, [sp, #8]
    sCommand.dummycycles         = 0;
200002d8:	9405      	str	r4, [sp, #20]
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
200002da:	940b      	str	r4, [sp, #44]	; 0x2c
    qspi_command(&sCommand);
200002dc:	f000 fac6 	bl	2000086c <qspi_command>
    qspi_flash_autopolling_ready();
200002e0:	f7ff ffbc 	bl	2000025c <qspi_flash_autopolling_ready>

    return 0;
}
200002e4:	4620      	mov	r0, r4
200002e6:	b00c      	add	sp, #48	; 0x30
200002e8:	bd70      	pop	{r4, r5, r6, pc}
200002ea:	bf00      	nop

200002ec <qspi_flash_chip_erase>:
    \param[in]  none
    \param[out] none
    \retval     0
*/
int32_t qspi_flash_chip_erase(void)
{
200002ec:	b510      	push	{r4, lr}
200002ee:	b08c      	sub	sp, #48	; 0x30
    qspi_command_struct sCommand;

    qspi_flash_write_enable();
200002f0:	f7ff ff86 	bl	20000200 <qspi_flash_write_enable>
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
    sCommand.instruction         = CHIP_ERASE_CMD;
    sCommand.addressmode         = QSPI_ADDRESS_NONE;
200002f4:	2400      	movs	r4, #0
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
200002f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    sCommand.instruction         = CHIP_ERASE_CMD;
200002fa:	23c7      	movs	r3, #199	; 0xc7
    sCommand.alternatebytes      = 0;
    sCommand.dummycycles         = 0;
    sCommand.datamode            = QSPI_DATA_NONE;
    sCommand.nbdata              = 0;
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
    qspi_command(&sCommand);
200002fc:	4668      	mov	r0, sp
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
200002fe:	9206      	str	r2, [sp, #24]
    sCommand.instruction         = CHIP_ERASE_CMD;
20000300:	9300      	str	r3, [sp, #0]
    sCommand.nbdata              = 0;
20000302:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    sCommand.addressmode         = QSPI_ADDRESS_NONE;
20000306:	9407      	str	r4, [sp, #28]
    sCommand.addresssize         = QSPI_ADDRESS_8_BITS;
20000308:	9403      	str	r4, [sp, #12]
    sCommand.address             = 0;
2000030a:	9401      	str	r4, [sp, #4]
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_NONE;
2000030c:	9408      	str	r4, [sp, #32]
    sCommand.alternatebytessize  = QSPI_ALTERNATE_BYTES_8_BITS;
2000030e:	9404      	str	r4, [sp, #16]
    sCommand.alternatebytes      = 0;
20000310:	9402      	str	r4, [sp, #8]
    sCommand.dummycycles         = 0;
20000312:	9405      	str	r4, [sp, #20]
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
20000314:	940b      	str	r4, [sp, #44]	; 0x2c
    qspi_command(&sCommand);
20000316:	f000 faa9 	bl	2000086c <qspi_command>
    qspi_flash_autopolling_ready();
2000031a:	f7ff ff9f 	bl	2000025c <qspi_flash_autopolling_ready>

    return 0;
}
2000031e:	4620      	mov	r0, r4
20000320:	b00c      	add	sp, #48	; 0x30
20000322:	bd10      	pop	{r4, pc}

20000324 <qspi_flash_read_id>:
    \param[out] None
    \retval     0
*/
int32_t qspi_flash_read_id(void *id)
{
    qspi_command_struct sCommand = {0};
20000324:	2100      	movs	r1, #0
{
20000326:	b530      	push	{r4, r5, lr}
20000328:	b08d      	sub	sp, #52	; 0x34
2000032a:	4604      	mov	r4, r0
    qspi_command_struct sCommand = {0};
2000032c:	2220      	movs	r2, #32
2000032e:	a801      	add	r0, sp, #4

    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
    sCommand.instruction         = CHIP_READ_ID_CMD;
    sCommand.dummycycles         = 0;
20000330:	460d      	mov	r5, r1
    qspi_command_struct sCommand = {0};
20000332:	f000 fc59 	bl	20000be8 <__memset_veneer>
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
20000336:	f44f 7080 	mov.w	r0, #256	; 0x100
    sCommand.instruction         = CHIP_READ_ID_CMD;
2000033a:	219f      	movs	r1, #159	; 0x9f
    sCommand.datamode            = QSPI_DATA_1_LINE;
2000033c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    sCommand.nbdata              = 3;
20000340:	2303      	movs	r3, #3
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
20000342:	9006      	str	r0, [sp, #24]
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
    qspi_command(&sCommand);
20000344:	4668      	mov	r0, sp
    sCommand.nbdata              = 3;
20000346:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    sCommand.instruction         = CHIP_READ_ID_CMD;
2000034a:	9100      	str	r1, [sp, #0]
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
2000034c:	950b      	str	r5, [sp, #44]	; 0x2c
    qspi_command(&sCommand);
2000034e:	f000 fa8d 	bl	2000086c <qspi_command>
    qspi_receive(id);
20000352:	4620      	mov	r0, r4
20000354:	f000 fad6 	bl	20000904 <qspi_receive>

    return 0;
}
20000358:	4628      	mov	r0, r5
2000035a:	b00d      	add	sp, #52	; 0x34
2000035c:	bd30      	pop	{r4, r5, pc}
2000035e:	bf00      	nop

20000360 <qspi_flash_config>:
{
20000360:	b530      	push	{r4, r5, lr}
20000362:	4605      	mov	r5, r0
20000364:	b095      	sub	sp, #84	; 0x54
    rcu_periph_clock_enable(RCU_GPIOA);
20000366:	f44f 6040 	mov.w	r0, #3072	; 0xc00
2000036a:	f000 fc1d 	bl	20000ba8 <__rcu_periph_clock_enable_veneer>
    rcu_periph_clock_enable(RCU_GPIOB);
2000036e:	f640 4001 	movw	r0, #3073	; 0xc01
20000372:	f000 fc19 	bl	20000ba8 <__rcu_periph_clock_enable_veneer>
    gpio_af_set(GPIOA, GPIO_AF_3, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
20000376:	22f0      	movs	r2, #240	; 0xf0
20000378:	2103      	movs	r1, #3
2000037a:	484d      	ldr	r0, [pc, #308]	; (200004b0 <qspi_flash_config+0x150>)
2000037c:	f000 fc2c 	bl	20000bd8 <__gpio_af_set_veneer>
    gpio_mode_set(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
20000380:	23f0      	movs	r3, #240	; 0xf0
20000382:	2200      	movs	r2, #0
20000384:	2102      	movs	r1, #2
20000386:	484a      	ldr	r0, [pc, #296]	; (200004b0 <qspi_flash_config+0x150>)
20000388:	f000 fc16 	bl	20000bb8 <__gpio_mode_set_veneer>
    gpio_output_options_set(GPIOA, GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7);
2000038c:	23f0      	movs	r3, #240	; 0xf0
2000038e:	2202      	movs	r2, #2
20000390:	2100      	movs	r1, #0
20000392:	4847      	ldr	r0, [pc, #284]	; (200004b0 <qspi_flash_config+0x150>)
20000394:	f000 fc18 	bl	20000bc8 <__gpio_output_options_set_veneer>
    gpio_af_set(GPIOB, GPIO_AF_3, GPIO_PIN_3 | GPIO_PIN_4);
20000398:	2218      	movs	r2, #24
2000039a:	2103      	movs	r1, #3
2000039c:	4845      	ldr	r0, [pc, #276]	; (200004b4 <qspi_flash_config+0x154>)
2000039e:	f000 fc1b 	bl	20000bd8 <__gpio_af_set_veneer>
    gpio_mode_set(GPIOB, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO_PIN_3 | GPIO_PIN_4);
200003a2:	2318      	movs	r3, #24
200003a4:	2200      	movs	r2, #0
200003a6:	2102      	movs	r1, #2
200003a8:	4842      	ldr	r0, [pc, #264]	; (200004b4 <qspi_flash_config+0x154>)
200003aa:	f000 fc05 	bl	20000bb8 <__gpio_mode_set_veneer>
    gpio_output_options_set(GPIOB, GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, GPIO_PIN_3 | GPIO_PIN_4);
200003ae:	2318      	movs	r3, #24
200003b0:	2202      	movs	r2, #2
200003b2:	2100      	movs	r1, #0
200003b4:	483f      	ldr	r0, [pc, #252]	; (200004b4 <qspi_flash_config+0x154>)
200003b6:	f000 fc07 	bl	20000bc8 <__gpio_output_options_set_veneer>
    rcu_periph_clock_enable(RCU_QSPI);
200003ba:	f640 6001 	movw	r0, #3585	; 0xe01
    Init.chipselecthightime      = QSPI_CS_HIGH_TIME_1_CYCLE;
200003be:	2400      	movs	r4, #0
    rcu_periph_clock_enable(RCU_QSPI);
200003c0:	f000 fbf2 	bl	20000ba8 <__rcu_periph_clock_enable_veneer>
    Init.fifothreshold           = 4;
200003c4:	2104      	movs	r1, #4
    Init.sampleshift             = QSPI_SAMPLE_SHIFTING_HALFCYCLE;  // QSPI_SAMPLE_SHIFTING_NONE;
200003c6:	2210      	movs	r2, #16
    Init.flashsize               = 23;  /* 2^(FlashSize+1) ***** number of address bits = FlashSize + 1*/
200003c8:	2317      	movs	r3, #23
    qspi_init(&Init);
200003ca:	a802      	add	r0, sp, #8
    Init.fifothreshold           = 4;
200003cc:	e9cd 5102 	strd	r5, r1, [sp, #8]
    Init.flashsize               = 23;  /* 2^(FlashSize+1) ***** number of address bits = FlashSize + 1*/
200003d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    Init.clockmode               = QSPI_CLOCK_MODE_0;
200003d4:	e9cd 4406 	strd	r4, r4, [sp, #24]
    qspi_init(&Init);
200003d8:	f000 fa0e 	bl	200007f8 <qspi_init>
    qspi_flash_read_id(&id);
200003dc:	a801      	add	r0, sp, #4
    uint32_t id = 0;
200003de:	9401      	str	r4, [sp, #4]
    uint8_t mode_s = 0;
200003e0:	f88d 4001 	strb.w	r4, [sp, #1]
    uint16_t mode = 0;
200003e4:	f8ad 4002 	strh.w	r4, [sp, #2]
    qspi_flash_read_id(&id);
200003e8:	f7ff ff9c 	bl	20000324 <qspi_flash_read_id>
    qspi_flash_write_enable();
200003ec:	f7ff ff08 	bl	20000200 <qspi_flash_write_enable>
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
200003f0:	f44f 7080 	mov.w	r0, #256	; 0x100
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
200003f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    sCommand.datamode            = QSPI_DATA_1_LINE;
200003f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    sCommand.instruction         = READ_STATUS_REG1_CMD;
200003fc:	2305      	movs	r3, #5
    sCommand.nbdata              = 1;
200003fe:	2501      	movs	r5, #1
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
20000400:	900e      	str	r0, [sp, #56]	; 0x38
    qspi_command(&sCommand);
20000402:	a808      	add	r0, sp, #32
    sCommand.nbdata              = 1;
20000404:	e9cd 2511 	strd	r2, r5, [sp, #68]	; 0x44
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
20000408:	910b      	str	r1, [sp, #44]	; 0x2c
    sCommand.instruction         = READ_STATUS_REG1_CMD;
2000040a:	9308      	str	r3, [sp, #32]
    sCommand.addressmode         = QSPI_ADDRESS_NONE;
2000040c:	940f      	str	r4, [sp, #60]	; 0x3c
    sCommand.address             = 0;
2000040e:	9409      	str	r4, [sp, #36]	; 0x24
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_NONE;
20000410:	9410      	str	r4, [sp, #64]	; 0x40
    sCommand.alternatebytessize  = QSPI_ALTERNATE_BYTES_8_BITS;
20000412:	940c      	str	r4, [sp, #48]	; 0x30
    sCommand.alternatebytes      = 0;
20000414:	940a      	str	r4, [sp, #40]	; 0x28
    sCommand.dummycycles         = 0;
20000416:	940d      	str	r4, [sp, #52]	; 0x34
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
20000418:	9413      	str	r4, [sp, #76]	; 0x4c
    qspi_command(&sCommand);
2000041a:	f000 fa27 	bl	2000086c <qspi_command>
    qspi_receive(&mode_s);
2000041e:	eb0d 0005 	add.w	r0, sp, r5
20000422:	f000 fa6f 	bl	20000904 <qspi_receive>
    sCommand.instruction         = READ_STATUS_REG_CMD;
20000426:	2135      	movs	r1, #53	; 0x35
    mode |= (uint16_t)mode_s;
20000428:	f8bd 2002 	ldrh.w	r2, [sp, #2]
2000042c:	f89d 3001 	ldrb.w	r3, [sp, #1]
    qspi_command(&sCommand);
20000430:	a808      	add	r0, sp, #32
    mode |= (uint16_t)mode_s;
20000432:	4313      	orrs	r3, r2
20000434:	f8ad 3002 	strh.w	r3, [sp, #2]
    sCommand.instruction         = READ_STATUS_REG_CMD;
20000438:	9108      	str	r1, [sp, #32]
    qspi_command(&sCommand);
2000043a:	f000 fa17 	bl	2000086c <qspi_command>
    qspi_receive(&mode_s);
2000043e:	eb0d 0005 	add.w	r0, sp, r5
20000442:	f000 fa5f 	bl	20000904 <qspi_receive>
    mode |= (uint16_t)mode_s << 8;
20000446:	f89d 2001 	ldrb.w	r2, [sp, #1]
2000044a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
2000044e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (mode & 0x0200) {
20000452:	059a      	lsls	r2, r3, #22
20000454:	d414      	bmi.n	20000480 <qspi_flash_config+0x120>
        switch ((id & 0x00ff0000) >> 16) {
20000456:	f89d 2006 	ldrb.w	r2, [sp, #6]
2000045a:	3a16      	subs	r2, #22
2000045c:	2a02      	cmp	r2, #2
2000045e:	d818      	bhi.n	20000492 <qspi_flash_config+0x132>
            sCommand.instruction = WRITE_STATUS_REG_CMD;//write flash status[s15-s8]
20000460:	2231      	movs	r2, #49	; 0x31
            mode = mode >> 8;
20000462:	0a1b      	lsrs	r3, r3, #8
            mode |= 0x02;
20000464:	f043 0302 	orr.w	r3, r3, #2
            qspi_command(&sCommand);
20000468:	a808      	add	r0, sp, #32
            mode |= 0x02;
2000046a:	f8ad 3002 	strh.w	r3, [sp, #2]
            sCommand.instruction = WRITE_STATUS_REG_CMD;//write flash status[s15-s8]
2000046e:	9208      	str	r2, [sp, #32]
            qspi_command(&sCommand);
20000470:	f000 f9fc 	bl	2000086c <qspi_command>
            qspi_transmit((uint8_t *)&mode);
20000474:	f10d 0002 	add.w	r0, sp, #2
20000478:	f000 fa12 	bl	200008a0 <qspi_transmit>
        qspi_flash_autopolling_ready();
2000047c:	f7ff feee 	bl	2000025c <qspi_flash_autopolling_ready>
    while((QSPI_CTL & QSPI_FLAG_BUSY) != 0U){
20000480:	4a0d      	ldr	r2, [pc, #52]	; (200004b8 <qspi_flash_config+0x158>)
20000482:	6813      	ldr	r3, [r2, #0]
20000484:	045b      	lsls	r3, r3, #17
20000486:	d4fc      	bmi.n	20000482 <qspi_flash_config+0x122>
    QSPI_TCFGF = sCommand.instructionmode | sCommand.instruction | sCommand.addressmode | \
20000488:	4b0c      	ldr	r3, [pc, #48]	; (200004bc <qspi_flash_config+0x15c>)
2000048a:	4a0d      	ldr	r2, [pc, #52]	; (200004c0 <qspi_flash_config+0x160>)
2000048c:	601a      	str	r2, [r3, #0]
}
2000048e:	b015      	add	sp, #84	; 0x54
20000490:	bd30      	pop	{r4, r5, pc}
            sCommand.nbdata      = 2;
20000492:	2202      	movs	r2, #2
            mode |= (0x0200);
20000494:	f443 7300 	orr.w	r3, r3, #512	; 0x200
            qspi_command(&sCommand);
20000498:	a808      	add	r0, sp, #32
            mode |= (0x0200);
2000049a:	f8ad 3002 	strh.w	r3, [sp, #2]
            sCommand.instruction = WRITE_STATUS_REG1_CMD;//write flash status[s15-s0]
2000049e:	9508      	str	r5, [sp, #32]
            sCommand.nbdata      = 2;
200004a0:	9212      	str	r2, [sp, #72]	; 0x48
            qspi_command(&sCommand);
200004a2:	f000 f9e3 	bl	2000086c <qspi_command>
            qspi_transmit((uint8_t *)&mode);
200004a6:	f10d 0002 	add.w	r0, sp, #2
200004aa:	f000 f9f9 	bl	200008a0 <qspi_transmit>
            break;
200004ae:	e7e5      	b.n	2000047c <qspi_flash_config+0x11c>
200004b0:	40020000 	.word	0x40020000
200004b4:	40020400 	.word	0x40020400
200004b8:	40025800 	.word	0x40025800
200004bc:	40025884 	.word	0x40025884
200004c0:	0310edeb 	.word	0x0310edeb

200004c4 <qspi_flash_read>:
    \param[out] data: pointer to the buffer that receives the data read from the flash
    \param[in]  size: size of data read from flash
    \retval     0
*/
int32_t qspi_flash_read(uint32_t address, void *data, uint32_t size)
{
200004c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

#if ( QSPI_FLASH_MODE == QSPI_FLASH_4_LINES )
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
    sCommand.instruction         = QUAD_IO_FAST_READ_CMD;
    sCommand.addressmode         = QSPI_ADDRESS_4_LINES;
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
200004c8:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
    sCommand.address             = address;
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_4_LINES;
    sCommand.alternatebytessize  = QSPI_ALTERNATE_BYTES_8_BITS;
200004cc:	2400      	movs	r4, #0
    sCommand.addressmode         = QSPI_ADDRESS_4_LINES;
200004ce:	f44f 6e40 	mov.w	lr, #3072	; 0xc00
    sCommand.alternatebytes      = 0;
    sCommand.dummycycles         = 4;
    sCommand.datamode            = QSPI_DATA_4_LINES;
200004d2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
{
200004d6:	460d      	mov	r5, r1
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
200004d8:	f44f 7980 	mov.w	r9, #256	; 0x100
    sCommand.instruction         = QUAD_IO_FAST_READ_CMD;
200004dc:	f04f 08eb 	mov.w	r8, #235	; 0xeb
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_4_LINES;
200004e0:	f44f 4740 	mov.w	r7, #49152	; 0xc000
    sCommand.dummycycles         = 4;
200004e4:	2604      	movs	r6, #4
{
200004e6:	b08d      	sub	sp, #52	; 0x34
    sCommand.address             = address;
200004e8:	9001      	str	r0, [sp, #4]
    sCommand.datamode            = QSPI_DATA_1_LINE;
    sCommand.nbdata              = size;
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
#endif

    qspi_command(&sCommand);
200004ea:	4668      	mov	r0, sp
    sCommand.nbdata              = size;
200004ec:	920a      	str	r2, [sp, #40]	; 0x28
    sCommand.addressmode         = QSPI_ADDRESS_4_LINES;
200004ee:	f8cd e01c 	str.w	lr, [sp, #28]
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
200004f2:	f8cd c00c 	str.w	ip, [sp, #12]
    sCommand.datamode            = QSPI_DATA_4_LINES;
200004f6:	9309      	str	r3, [sp, #36]	; 0x24
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
200004f8:	f8cd 9018 	str.w	r9, [sp, #24]
    sCommand.instruction         = QUAD_IO_FAST_READ_CMD;
200004fc:	f8cd 8000 	str.w	r8, [sp]
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_4_LINES;
20000500:	9708      	str	r7, [sp, #32]
    sCommand.alternatebytessize  = QSPI_ALTERNATE_BYTES_8_BITS;
20000502:	9404      	str	r4, [sp, #16]
    sCommand.alternatebytes      = 0;
20000504:	9402      	str	r4, [sp, #8]
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
20000506:	940b      	str	r4, [sp, #44]	; 0x2c
    sCommand.dummycycles         = 4;
20000508:	9605      	str	r6, [sp, #20]
    qspi_command(&sCommand);
2000050a:	f000 f9af 	bl	2000086c <qspi_command>
    qspi_receive(data);
2000050e:	4628      	mov	r0, r5
20000510:	f000 f9f8 	bl	20000904 <qspi_receive>

    return 0;
}
20000514:	4620      	mov	r0, r4
20000516:	b00d      	add	sp, #52	; 0x34
20000518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

2000051c <qspi_flash_page_program>:
    \param[in]  size: size of data read from flash
    \param[out] none
    \retval     0
*/
int32_t qspi_flash_page_program(uint32_t address, const uint8_t *data, uint32_t size)
{
2000051c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000051e:	b08d      	sub	sp, #52	; 0x34
20000520:	4607      	mov	r7, r0
20000522:	460d      	mov	r5, r1
20000524:	4616      	mov	r6, r2
    qspi_command_struct sCommand;

    /* Writing Sequence 4 Line------------------------------------------ */
    qspi_flash_write_enable();
20000526:	f7ff fe6b 	bl	20000200 <qspi_flash_write_enable>

#if ( QSPI_FLASH_MODE == QSPI_FLASH_4_LINES )
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
    sCommand.instruction         = QUAD_IN_FAST_PROG_CMD;
2000052a:	2032      	movs	r0, #50	; 0x32
    sCommand.addressmode         = QSPI_ADDRESS_1_LINE;
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
    sCommand.address             = address;
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_NONE;
2000052c:	2400      	movs	r4, #0
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
2000052e:	f44f 7c80 	mov.w	ip, #256	; 0x100
    sCommand.addressmode         = QSPI_ADDRESS_1_LINE;
20000532:	f44f 6180 	mov.w	r1, #1024	; 0x400
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
20000536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    sCommand.alternatebytessize  = QSPI_ALTERNATE_BYTES_8_BITS;
    sCommand.alternatebytes      = 0;
    sCommand.dummycycles         = 0;
    sCommand.datamode            = QSPI_DATA_4_LINES;
2000053a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
    sCommand.instruction         = QUAD_IN_FAST_PROG_CMD;
2000053e:	9000      	str	r0, [sp, #0]
    sCommand.dummycycles         = 0;
    sCommand.datamode            = QSPI_DATA_1_LINE;
    sCommand.nbdata              = size;
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
#endif
    qspi_command(&sCommand);
20000540:	4668      	mov	r0, sp
    sCommand.instructionmode     = QSPI_INSTRUCTION_1_LINE;
20000542:	f8cd c018 	str.w	ip, [sp, #24]
    sCommand.addressmode         = QSPI_ADDRESS_1_LINE;
20000546:	9107      	str	r1, [sp, #28]
    sCommand.addresssize         = QSPI_ADDRESS_24_BITS;
20000548:	9203      	str	r2, [sp, #12]
    sCommand.datamode            = QSPI_DATA_4_LINES;
2000054a:	9309      	str	r3, [sp, #36]	; 0x24
    sCommand.address             = address;
2000054c:	9701      	str	r7, [sp, #4]
    sCommand.nbdata              = size;
2000054e:	960a      	str	r6, [sp, #40]	; 0x28
    sCommand.alternatebytemode   = QSPI_ALTERNATE_BYTES_NONE;
20000550:	9408      	str	r4, [sp, #32]
    sCommand.alternatebytessize  = QSPI_ALTERNATE_BYTES_8_BITS;
20000552:	9404      	str	r4, [sp, #16]
    sCommand.alternatebytes      = 0;
20000554:	9402      	str	r4, [sp, #8]
    sCommand.dummycycles         = 0;
20000556:	9405      	str	r4, [sp, #20]
    sCommand.sioomode            = QSPI_SIOO_INST_EVERY_CMD;
20000558:	940b      	str	r4, [sp, #44]	; 0x2c
    qspi_command(&sCommand);
2000055a:	f000 f987 	bl	2000086c <qspi_command>
    qspi_transmit((uint8_t *)data);
2000055e:	4628      	mov	r0, r5
20000560:	f000 f99e 	bl	200008a0 <qspi_transmit>
    qspi_flash_autopolling_ready();
20000564:	f7ff fe7a 	bl	2000025c <qspi_flash_autopolling_ready>

    return 0;
}
20000568:	4620      	mov	r0, r4
2000056a:	b00d      	add	sp, #52	; 0x34
2000056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000056e:	bf00      	nop

20000570 <qspi_config>:
    \param[out] none
    \retval     none
*/
static void qspi_config(qspi_command_struct* cmd, uint32_t functionalmode)
{
    if((cmd->datamode != QSPI_DATA_NONE) && (functionalmode != QSPI_MEMORY_MAPPED)){
20000570:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
20000572:	b410      	push	{r4}
    if((cmd->datamode != QSPI_DATA_NONE) && (functionalmode != QSPI_MEMORY_MAPPED)){
20000574:	b132      	cbz	r2, 20000584 <qspi_config+0x14>
20000576:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
2000057a:	d003      	beq.n	20000584 <qspi_config+0x14>
        /* Configure QSPI_DTLEN register with the number of data to read or write */
        QSPI_DTLEN = cmd->nbdata - 1U;
2000057c:	6a83      	ldr	r3, [r0, #40]	; 0x28
2000057e:	4a49      	ldr	r2, [pc, #292]	; (200006a4 <qspi_config+0x134>)
20000580:	3b01      	subs	r3, #1
20000582:	6013      	str	r3, [r2, #0]
    }

    if(cmd->instructionmode != QSPI_INSTRUCTION_NONE){
20000584:	6983      	ldr	r3, [r0, #24]
20000586:	2b00      	cmp	r3, #0
20000588:	d02d      	beq.n	200005e6 <qspi_config+0x76>
        if(cmd->alternatebytemode != QSPI_ALTERNATE_BYTES_NONE){
2000058a:	6a02      	ldr	r2, [r0, #32]
2000058c:	b19a      	cbz	r2, 200005b6 <qspi_config+0x46>
            /* Configure QSPI_ALTE register with alternate bytes value */
            QSPI_ALTE = cmd->alternatebytes;
2000058e:	4b46      	ldr	r3, [pc, #280]	; (200006a8 <qspi_config+0x138>)
20000590:	6882      	ldr	r2, [r0, #8]
20000592:	601a      	str	r2, [r3, #0]

            if(cmd->addressmode != QSPI_ADDRESS_NONE){
20000594:	69c3      	ldr	r3, [r0, #28]
20000596:	2b00      	cmp	r3, #0
20000598:	d06f      	beq.n	2000067a <qspi_config+0x10a>
                /*---- Command with instruction, address and alternate bytes ----*/
                /* Configure QSPI_TCFG register with all communications parameters */
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
                            cmd->alternatebytessize | cmd->alternatebytemode | 
                            cmd->addresssize | cmd->addressmode | cmd->instructionmode | 
                            cmd->instruction | functionalmode;
2000059a:	6a42      	ldr	r2, [r0, #36]	; 0x24
2000059c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
2000059e:	4313      	orrs	r3, r2
200005a0:	430b      	orrs	r3, r1
200005a2:	6902      	ldr	r2, [r0, #16]
200005a4:	4323      	orrs	r3, r4
200005a6:	6a04      	ldr	r4, [r0, #32]
200005a8:	4313      	orrs	r3, r2
200005aa:	68c2      	ldr	r2, [r0, #12]
200005ac:	4323      	orrs	r3, r4
200005ae:	4313      	orrs	r3, r2
200005b0:	6984      	ldr	r4, [r0, #24]
200005b2:	6802      	ldr	r2, [r0, #0]
200005b4:	e038      	b.n	20000628 <qspi_config+0xb8>
                            cmd->addressmode | cmd->instructionmode | 
                            cmd->instruction | functionalmode;
            }
        }
        else{
            if(cmd->addressmode != QSPI_ADDRESS_NONE){
200005b6:	69c2      	ldr	r2, [r0, #28]
200005b8:	2a00      	cmp	r2, #0
200005ba:	d06a      	beq.n	20000692 <qspi_config+0x122>
                /*---- Command with instruction and address ----*/
                /* Configure QSPI_TCFG register with all communications parameters */
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
                            cmd->alternatebytemode | cmd->addresssize | cmd->addressmode | 
                            cmd->instructionmode | cmd->instruction | functionalmode;
200005bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
200005be:	431a      	orrs	r2, r3
200005c0:	430a      	orrs	r2, r1
200005c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
200005c4:	4322      	orrs	r2, r4
200005c6:	68c4      	ldr	r4, [r0, #12]
200005c8:	431a      	orrs	r2, r3
200005ca:	6803      	ldr	r3, [r0, #0]
200005cc:	4322      	orrs	r2, r4
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
200005ce:	6944      	ldr	r4, [r0, #20]
                            cmd->instructionmode | cmd->instruction | functionalmode;
200005d0:	431a      	orrs	r2, r3
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
200005d2:	4b36      	ldr	r3, [pc, #216]	; (200006ac <qspi_config+0x13c>)
                            cmd->instructionmode | cmd->instruction | functionalmode;
200005d4:	ea42 4284 	orr.w	r2, r2, r4, lsl #18

                if(functionalmode != QSPI_MEMORY_MAPPED){
200005d8:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
200005dc:	601a      	str	r2, [r3, #0]
                if(functionalmode != QSPI_MEMORY_MAPPED){
200005de:	d03d      	beq.n	2000065c <qspi_config+0xec>
                    /* Configure QSPI_ADDR register with address value */
                    QSPI_ADDR = cmd->address;
200005e0:	6842      	ldr	r2, [r0, #4]
200005e2:	605a      	str	r2, [r3, #4]
200005e4:	e03a      	b.n	2000065c <qspi_config+0xec>
                            cmd->instruction | functionalmode;
            }
        }
    }
    else{
        if(cmd->alternatebytemode != QSPI_ALTERNATE_BYTES_NONE){
200005e6:	6a03      	ldr	r3, [r0, #32]
200005e8:	b1bb      	cbz	r3, 2000061a <qspi_config+0xaa>
            /* Configure QSPI_ALTE register with alternate bytes value */
            QSPI_ALTE = cmd->alternatebytes;
200005ea:	4b2f      	ldr	r3, [pc, #188]	; (200006a8 <qspi_config+0x138>)
200005ec:	6882      	ldr	r2, [r0, #8]
200005ee:	601a      	str	r2, [r3, #0]

            if(cmd->addressmode != QSPI_ADDRESS_NONE){
200005f0:	69c3      	ldr	r3, [r0, #28]
200005f2:	2b00      	cmp	r3, #0
200005f4:	d135      	bne.n	20000662 <qspi_config+0xf2>
            else{
                /*---- Command with only alternate bytes ----*/
                /* Configure QSPI_TCFG register with all communications parameters */
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
                            cmd->alternatebytemode | cmd->alternatebytessize | 
                            cmd->addressmode | cmd->instructionmode | functionalmode;
200005f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
200005f8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
200005fa:	6a02      	ldr	r2, [r0, #32]
200005fc:	4323      	orrs	r3, r4
200005fe:	430b      	orrs	r3, r1
20000600:	6901      	ldr	r1, [r0, #16]
20000602:	4313      	orrs	r3, r2
20000604:	6982      	ldr	r2, [r0, #24]
20000606:	430b      	orrs	r3, r1
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000608:	6941      	ldr	r1, [r0, #20]
                            cmd->instruction | functionalmode;
2000060a:	4313      	orrs	r3, r2
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000060c:	4a27      	ldr	r2, [pc, #156]	; (200006ac <qspi_config+0x13c>)
                            cmd->instruction | functionalmode;
2000060e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                cmd->instructionmode | functionalmode;
                }
            }
        }
    }
}
20000612:	f85d 4b04 	ldr.w	r4, [sp], #4
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000616:	6013      	str	r3, [r2, #0]
}
20000618:	4770      	bx	lr
            if(cmd->addressmode != QSPI_ADDRESS_NONE){
2000061a:	69c3      	ldr	r3, [r0, #28]
2000061c:	b1a3      	cbz	r3, 20000648 <qspi_config+0xd8>
                            cmd->addressmode | cmd->instructionmode | functionalmode;
2000061e:	6a42      	ldr	r2, [r0, #36]	; 0x24
20000620:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
20000622:	4313      	orrs	r3, r2
20000624:	68c2      	ldr	r2, [r0, #12]
20000626:	430b      	orrs	r3, r1
20000628:	4323      	orrs	r3, r4
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000062a:	6944      	ldr	r4, [r0, #20]
                            cmd->addressmode | cmd->instructionmode | functionalmode;
2000062c:	4313      	orrs	r3, r2
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000062e:	4a1f      	ldr	r2, [pc, #124]	; (200006ac <qspi_config+0x13c>)
                            cmd->addressmode | cmd->instructionmode | functionalmode;
20000630:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                if(functionalmode != QSPI_MEMORY_MAPPED){
20000634:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
                QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000638:	6013      	str	r3, [r2, #0]
                if(functionalmode != QSPI_MEMORY_MAPPED){
2000063a:	d00f      	beq.n	2000065c <qspi_config+0xec>
                    QSPI_ADDR = cmd->address;
2000063c:	6842      	ldr	r2, [r0, #4]
2000063e:	4b1c      	ldr	r3, [pc, #112]	; (200006b0 <qspi_config+0x140>)
}
20000640:	f85d 4b04 	ldr.w	r4, [sp], #4
                    QSPI_ADDR = cmd->address;
20000644:	601a      	str	r2, [r3, #0]
}
20000646:	4770      	bx	lr
                if(cmd->datamode != QSPI_DATA_NONE){
20000648:	6a43      	ldr	r3, [r0, #36]	; 0x24
2000064a:	b13b      	cbz	r3, 2000065c <qspi_config+0xec>
                                cmd->instructionmode | functionalmode;
2000064c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                    QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000064e:	6940      	ldr	r0, [r0, #20]
                                cmd->instructionmode | functionalmode;
20000650:	4313      	orrs	r3, r2
20000652:	430b      	orrs	r3, r1
                    QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000654:	4a15      	ldr	r2, [pc, #84]	; (200006ac <qspi_config+0x13c>)
                                cmd->instructionmode | functionalmode;
20000656:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
                    QSPI_TCFG = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000065a:	6013      	str	r3, [r2, #0]
}
2000065c:	f85d 4b04 	ldr.w	r4, [sp], #4
20000660:	4770      	bx	lr
                            cmd->addressmode | cmd->instructionmode | functionalmode;
20000662:	6a44      	ldr	r4, [r0, #36]	; 0x24
20000664:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
20000666:	4323      	orrs	r3, r4
20000668:	430b      	orrs	r3, r1
2000066a:	6a04      	ldr	r4, [r0, #32]
2000066c:	4313      	orrs	r3, r2
2000066e:	6902      	ldr	r2, [r0, #16]
20000670:	4323      	orrs	r3, r4
20000672:	4313      	orrs	r3, r2
20000674:	68c4      	ldr	r4, [r0, #12]
20000676:	6982      	ldr	r2, [r0, #24]
20000678:	e7d6      	b.n	20000628 <qspi_config+0xb8>
                            cmd->instruction | functionalmode;
2000067a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
2000067c:	6a43      	ldr	r3, [r0, #36]	; 0x24
2000067e:	6904      	ldr	r4, [r0, #16]
20000680:	4313      	orrs	r3, r2
20000682:	430b      	orrs	r3, r1
20000684:	6a02      	ldr	r2, [r0, #32]
20000686:	6981      	ldr	r1, [r0, #24]
20000688:	4323      	orrs	r3, r4
2000068a:	4313      	orrs	r3, r2
2000068c:	430b      	orrs	r3, r1
2000068e:	6802      	ldr	r2, [r0, #0]
20000690:	e7ba      	b.n	20000608 <qspi_config+0x98>
                            cmd->instruction | functionalmode;
20000692:	6a42      	ldr	r2, [r0, #36]	; 0x24
20000694:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
20000696:	431a      	orrs	r2, r3
20000698:	ea42 0301 	orr.w	r3, r2, r1
2000069c:	4323      	orrs	r3, r4
2000069e:	6802      	ldr	r2, [r0, #0]
200006a0:	e7b2      	b.n	20000608 <qspi_config+0x98>
200006a2:	bf00      	nop
200006a4:	40025810 	.word	0x40025810
200006a8:	4002581c 	.word	0x4002581c
200006ac:	40025814 	.word	0x40025814
200006b0:	40025818 	.word	0x40025818

200006b4 <qspi_config_fmc_s>:
    \param[out] none
    \retval     none
*/
static void qspi_config_fmc_s(qspi_command_struct* cmd, uint32_t functionalmode)
{
    if((cmd->datamode != QSPI_DATA_NONE) && (functionalmode != QSPI_MEMORY_MAPPED)){
200006b4:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
200006b6:	b410      	push	{r4}
    if((cmd->datamode != QSPI_DATA_NONE) && (functionalmode != QSPI_MEMORY_MAPPED)){
200006b8:	b132      	cbz	r2, 200006c8 <qspi_config_fmc_s+0x14>
200006ba:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
200006be:	d003      	beq.n	200006c8 <qspi_config_fmc_s+0x14>
        /* Configure QSPI_DTLEN register with the number of data to read or write */
        QSPI_DTLEN_FMC_S = cmd->nbdata - 1U;
200006c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
200006c2:	4a49      	ldr	r2, [pc, #292]	; (200007e8 <qspi_config_fmc_s+0x134>)
200006c4:	3b01      	subs	r3, #1
200006c6:	6013      	str	r3, [r2, #0]
    }

    if(cmd->instructionmode != QSPI_INSTRUCTION_NONE){
200006c8:	6983      	ldr	r3, [r0, #24]
200006ca:	2b00      	cmp	r3, #0
200006cc:	d02d      	beq.n	2000072a <qspi_config_fmc_s+0x76>
        if(cmd->alternatebytemode != QSPI_ALTERNATE_BYTES_NONE){
200006ce:	6a02      	ldr	r2, [r0, #32]
200006d0:	b19a      	cbz	r2, 200006fa <qspi_config_fmc_s+0x46>
            /* Configure QSPI_ALTE register with alternate bytes value */
            QSPI_ALTE_FMC_S = cmd->alternatebytes;
200006d2:	4b46      	ldr	r3, [pc, #280]	; (200007ec <qspi_config_fmc_s+0x138>)
200006d4:	6882      	ldr	r2, [r0, #8]
200006d6:	601a      	str	r2, [r3, #0]

            if(cmd->addressmode != QSPI_ADDRESS_NONE){
200006d8:	69c3      	ldr	r3, [r0, #28]
200006da:	2b00      	cmp	r3, #0
200006dc:	d06f      	beq.n	200007be <qspi_config_fmc_s+0x10a>
                /*---- Command with instruction, address and alternate bytes ----*/
                /* Configure QSPI_TCFG register with all communications parameters */
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
                                    cmd->alternatebytessize | cmd->alternatebytemode | 
                                    cmd->addresssize | cmd->addressmode | cmd->instructionmode | 
                                    cmd->instruction | functionalmode;
200006de:	6a42      	ldr	r2, [r0, #36]	; 0x24
200006e0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
200006e2:	4313      	orrs	r3, r2
200006e4:	430b      	orrs	r3, r1
200006e6:	6902      	ldr	r2, [r0, #16]
200006e8:	4323      	orrs	r3, r4
200006ea:	6a04      	ldr	r4, [r0, #32]
200006ec:	4313      	orrs	r3, r2
200006ee:	68c2      	ldr	r2, [r0, #12]
200006f0:	4323      	orrs	r3, r4
200006f2:	4313      	orrs	r3, r2
200006f4:	6984      	ldr	r4, [r0, #24]
200006f6:	6802      	ldr	r2, [r0, #0]
200006f8:	e038      	b.n	2000076c <qspi_config_fmc_s+0xb8>
                                    cmd->addressmode | cmd->instructionmode | 
                                    cmd->instruction | functionalmode;
            }
        }
        else{
            if(cmd->addressmode != QSPI_ADDRESS_NONE){
200006fa:	69c2      	ldr	r2, [r0, #28]
200006fc:	2a00      	cmp	r2, #0
200006fe:	d06a      	beq.n	200007d6 <qspi_config_fmc_s+0x122>
                /*---- Command with instruction and address ----*/
                /* Configure QSPI_TCFG_FMC_S register with all communications parameters */
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
                                    cmd->alternatebytemode | cmd->addresssize | cmd->addressmode | 
                                    cmd->instructionmode | cmd->instruction | functionalmode;
20000700:	6a44      	ldr	r4, [r0, #36]	; 0x24
20000702:	431a      	orrs	r2, r3
20000704:	430a      	orrs	r2, r1
20000706:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
20000708:	4322      	orrs	r2, r4
2000070a:	68c4      	ldr	r4, [r0, #12]
2000070c:	431a      	orrs	r2, r3
2000070e:	6803      	ldr	r3, [r0, #0]
20000710:	4322      	orrs	r2, r4
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000712:	6944      	ldr	r4, [r0, #20]
                                    cmd->instructionmode | cmd->instruction | functionalmode;
20000714:	431a      	orrs	r2, r3
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000716:	4b36      	ldr	r3, [pc, #216]	; (200007f0 <qspi_config_fmc_s+0x13c>)
                                    cmd->instructionmode | cmd->instruction | functionalmode;
20000718:	ea42 4284 	orr.w	r2, r2, r4, lsl #18

                if(functionalmode != QSPI_MEMORY_MAPPED){
2000071c:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000720:	601a      	str	r2, [r3, #0]
                if(functionalmode != QSPI_MEMORY_MAPPED){
20000722:	d03d      	beq.n	200007a0 <qspi_config_fmc_s+0xec>
                    /* Configure QSPI_ADDR_FMC_S register with address value */
                    QSPI_ADDR_FMC_S = cmd->address;
20000724:	6842      	ldr	r2, [r0, #4]
20000726:	605a      	str	r2, [r3, #4]
20000728:	e03a      	b.n	200007a0 <qspi_config_fmc_s+0xec>
                                    cmd->instruction | functionalmode;
            }
        }
    }
    else{
        if(cmd->alternatebytemode != QSPI_ALTERNATE_BYTES_NONE){
2000072a:	6a03      	ldr	r3, [r0, #32]
2000072c:	b1bb      	cbz	r3, 2000075e <qspi_config_fmc_s+0xaa>
            /* Configure QSPI_ALTE_FMC_S register with alternate bytes value */
            QSPI_ALTE_FMC_S = cmd->alternatebytes;            
2000072e:	4b2f      	ldr	r3, [pc, #188]	; (200007ec <qspi_config_fmc_s+0x138>)
20000730:	6882      	ldr	r2, [r0, #8]
20000732:	601a      	str	r2, [r3, #0]

            if(cmd->addressmode != QSPI_ADDRESS_NONE){
20000734:	69c3      	ldr	r3, [r0, #28]
20000736:	2b00      	cmp	r3, #0
20000738:	d135      	bne.n	200007a6 <qspi_config_fmc_s+0xf2>
            else{
                /*---- Command with only alternate bytes ----*/
                /* Configure QSPI_TCFG_FMC_S register with all communications parameters */
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
                                    cmd->alternatebytemode | cmd->alternatebytessize | 
                                    cmd->addressmode | cmd->instructionmode | functionalmode;
2000073a:	6a43      	ldr	r3, [r0, #36]	; 0x24
2000073c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
2000073e:	6a02      	ldr	r2, [r0, #32]
20000740:	4323      	orrs	r3, r4
20000742:	430b      	orrs	r3, r1
20000744:	6901      	ldr	r1, [r0, #16]
20000746:	4313      	orrs	r3, r2
20000748:	6982      	ldr	r2, [r0, #24]
2000074a:	430b      	orrs	r3, r1
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000074c:	6941      	ldr	r1, [r0, #20]
                                    cmd->instruction | functionalmode;
2000074e:	4313      	orrs	r3, r2
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000750:	4a27      	ldr	r2, [pc, #156]	; (200007f0 <qspi_config_fmc_s+0x13c>)
                                    cmd->instruction | functionalmode;
20000752:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                        cmd->instructionmode | functionalmode;
                }
            }
        }
    }
}
20000756:	f85d 4b04 	ldr.w	r4, [sp], #4
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000075a:	6013      	str	r3, [r2, #0]
}
2000075c:	4770      	bx	lr
            if(cmd->addressmode != QSPI_ADDRESS_NONE){
2000075e:	69c3      	ldr	r3, [r0, #28]
20000760:	b1a3      	cbz	r3, 2000078c <qspi_config_fmc_s+0xd8>
                                    cmd->addressmode | cmd->instructionmode | functionalmode;
20000762:	6a42      	ldr	r2, [r0, #36]	; 0x24
20000764:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
20000766:	4313      	orrs	r3, r2
20000768:	68c2      	ldr	r2, [r0, #12]
2000076a:	430b      	orrs	r3, r1
2000076c:	4323      	orrs	r3, r4
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000076e:	6944      	ldr	r4, [r0, #20]
                                    cmd->addressmode | cmd->instructionmode | functionalmode;
20000770:	4313      	orrs	r3, r2
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000772:	4a1f      	ldr	r2, [pc, #124]	; (200007f0 <qspi_config_fmc_s+0x13c>)
                                    cmd->addressmode | cmd->instructionmode | functionalmode;
20000774:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
                if(functionalmode != QSPI_MEMORY_MAPPED){
20000778:	f1b1 6f40 	cmp.w	r1, #201326592	; 0xc000000
                QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000077c:	6013      	str	r3, [r2, #0]
                if(functionalmode != QSPI_MEMORY_MAPPED){
2000077e:	d00f      	beq.n	200007a0 <qspi_config_fmc_s+0xec>
                    QSPI_ADDR_FMC_S = cmd->address;
20000780:	6842      	ldr	r2, [r0, #4]
20000782:	4b1c      	ldr	r3, [pc, #112]	; (200007f4 <qspi_config_fmc_s+0x140>)
}
20000784:	f85d 4b04 	ldr.w	r4, [sp], #4
                    QSPI_ADDR_FMC_S = cmd->address;
20000788:	601a      	str	r2, [r3, #0]
}
2000078a:	4770      	bx	lr
                if(cmd->datamode != QSPI_DATA_NONE){
2000078c:	6a43      	ldr	r3, [r0, #36]	; 0x24
2000078e:	b13b      	cbz	r3, 200007a0 <qspi_config_fmc_s+0xec>
                                        cmd->instructionmode | functionalmode;
20000790:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
                    QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000792:	6940      	ldr	r0, [r0, #20]
                                        cmd->instructionmode | functionalmode;
20000794:	4313      	orrs	r3, r2
20000796:	430b      	orrs	r3, r1
                    QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
20000798:	4a15      	ldr	r2, [pc, #84]	; (200007f0 <qspi_config_fmc_s+0x13c>)
                                        cmd->instructionmode | functionalmode;
2000079a:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
                    QSPI_TCFG_FMC_S = cmd->datamode | (cmd->dummycycles << 18) | cmd->sioomode | 
2000079e:	6013      	str	r3, [r2, #0]
}
200007a0:	f85d 4b04 	ldr.w	r4, [sp], #4
200007a4:	4770      	bx	lr
                                    cmd->addressmode | cmd->instructionmode | functionalmode;
200007a6:	6a44      	ldr	r4, [r0, #36]	; 0x24
200007a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
200007aa:	4323      	orrs	r3, r4
200007ac:	430b      	orrs	r3, r1
200007ae:	6a04      	ldr	r4, [r0, #32]
200007b0:	4313      	orrs	r3, r2
200007b2:	6902      	ldr	r2, [r0, #16]
200007b4:	4323      	orrs	r3, r4
200007b6:	4313      	orrs	r3, r2
200007b8:	68c4      	ldr	r4, [r0, #12]
200007ba:	6982      	ldr	r2, [r0, #24]
200007bc:	e7d6      	b.n	2000076c <qspi_config_fmc_s+0xb8>
                                    cmd->instruction | functionalmode;
200007be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
200007c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
200007c2:	6904      	ldr	r4, [r0, #16]
200007c4:	4313      	orrs	r3, r2
200007c6:	430b      	orrs	r3, r1
200007c8:	6a02      	ldr	r2, [r0, #32]
200007ca:	6981      	ldr	r1, [r0, #24]
200007cc:	4323      	orrs	r3, r4
200007ce:	4313      	orrs	r3, r2
200007d0:	430b      	orrs	r3, r1
200007d2:	6802      	ldr	r2, [r0, #0]
200007d4:	e7ba      	b.n	2000074c <qspi_config_fmc_s+0x98>
                                    cmd->instruction | functionalmode;
200007d6:	6a42      	ldr	r2, [r0, #36]	; 0x24
200007d8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
200007da:	431a      	orrs	r2, r3
200007dc:	ea42 0301 	orr.w	r3, r2, r1
200007e0:	4323      	orrs	r3, r4
200007e2:	6802      	ldr	r2, [r0, #0]
200007e4:	e7b2      	b.n	2000074c <qspi_config_fmc_s+0x98>
200007e6:	bf00      	nop
200007e8:	40025910 	.word	0x40025910
200007ec:	4002591c 	.word	0x4002591c
200007f0:	40025914 	.word	0x40025914
200007f4:	40025918 	.word	0x40025918

200007f8 <qspi_init>:
    reg = QSPI_CTL;
200007f8:	4918      	ldr	r1, [pc, #96]	; (2000085c <qspi_init+0x64>)
{
200007fa:	b470      	push	{r4, r5, r6}
    while((QSPI_CTL & QSPI_CTL_BUSY) != 0U){
200007fc:	460a      	mov	r2, r1
    reg = QSPI_CTL;
200007fe:	680b      	ldr	r3, [r1, #0]
    reg |= ((qspi_struct->fifothreshold - 1U) << 8);
20000800:	6844      	ldr	r4, [r0, #4]
    reg &= ~(QSPI_CTL);
20000802:	680d      	ldr	r5, [r1, #0]
    reg |= ((qspi_struct->fifothreshold - 1U) << 8);
20000804:	3c01      	subs	r4, #1
    reg &= ~(QSPI_CTL);
20000806:	ea23 0305 	bic.w	r3, r3, r5
    reg |= ((qspi_struct->fifothreshold - 1U) << 8);
2000080a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    QSPI_CTL = reg;
2000080e:	600b      	str	r3, [r1, #0]
    while((QSPI_CTL & QSPI_CTL_BUSY) != 0U){
20000810:	6813      	ldr	r3, [r2, #0]
20000812:	045b      	lsls	r3, r3, #17
20000814:	d4fc      	bmi.n	20000810 <qspi_init+0x18>
    reg = QSPI_CTL;
20000816:	6813      	ldr	r3, [r2, #0]
    reg |= (qspi_struct->prescaler << 24) | qspi_struct->sampleshift;
20000818:	6884      	ldr	r4, [r0, #8]
    reg &= ~((QSPI_CTL_PSC) | QSPI_SAMPLE_SHIFTING_HALFCYCLE);
2000081a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    reg |= (qspi_struct->prescaler << 24) | qspi_struct->sampleshift;
2000081e:	6801      	ldr	r1, [r0, #0]
    reg &= ~((QSPI_CTL_PSC) | QSPI_SAMPLE_SHIFTING_HALFCYCLE);
20000820:	f023 0310 	bic.w	r3, r3, #16
20000824:	4323      	orrs	r3, r4
    reg |= (qspi_struct->prescaler << 24) | qspi_struct->sampleshift;
20000826:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    reg = QSPI_DCFG;
2000082a:	4c0d      	ldr	r4, [pc, #52]	; (20000860 <qspi_init+0x68>)
    QSPI_CTL = reg;
2000082c:	6013      	str	r3, [r2, #0]
    reg = QSPI_DCFG;
2000082e:	6826      	ldr	r6, [r4, #0]
    reg &= ~((QSPI_DCFG_FMSZ) | QSPI_CS_HIGH_TIME_8_CYCLE | QSPI_DCFG_CKMOD);
20000830:	490c      	ldr	r1, [pc, #48]	; (20000864 <qspi_init+0x6c>)
20000832:	e9d0 3504 	ldrd	r3, r5, [r0, #16]
20000836:	4031      	ands	r1, r6
    reg |= ((qspi_struct->flashsize << 16) | qspi_struct->chipselecthightime | qspi_struct->clockmode);
20000838:	68c0      	ldr	r0, [r0, #12]
2000083a:	432b      	orrs	r3, r5
2000083c:	430b      	orrs	r3, r1
2000083e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    QSPI_DCFG = reg;
20000842:	6023      	str	r3, [r4, #0]
    QSPI_CTL  |= QSPI_CTL_QSPIEN;
20000844:	6813      	ldr	r3, [r2, #0]
    QSPI_STAT |= QSPI_STAT_TERRIE;
20000846:	4908      	ldr	r1, [pc, #32]	; (20000868 <qspi_init+0x70>)
    QSPI_CTL  |= QSPI_CTL_QSPIEN;
20000848:	f043 0301 	orr.w	r3, r3, #1
2000084c:	6013      	str	r3, [r2, #0]
    QSPI_STAT |= QSPI_STAT_TERRIE;
2000084e:	680b      	ldr	r3, [r1, #0]
}
20000850:	bc70      	pop	{r4, r5, r6}
    QSPI_STAT |= QSPI_STAT_TERRIE;
20000852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20000856:	600b      	str	r3, [r1, #0]
}
20000858:	4770      	bx	lr
2000085a:	bf00      	nop
2000085c:	40025800 	.word	0x40025800
20000860:	40025804 	.word	0x40025804
20000864:	ffe0f8fe 	.word	0xffe0f8fe
20000868:	40025808 	.word	0x40025808

2000086c <qspi_command>:
{
2000086c:	b510      	push	{r4, lr}
2000086e:	4604      	mov	r4, r0
    while((QSPI_CTL & QSPI_FLAG_BUSY) != 0U){
20000870:	4b08      	ldr	r3, [pc, #32]	; (20000894 <qspi_command+0x28>)
20000872:	6819      	ldr	r1, [r3, #0]
20000874:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
20000878:	d1fb      	bne.n	20000872 <qspi_command+0x6>
    qspi_config(cmd, QSPI_INDIRECT_WRITE);
2000087a:	4620      	mov	r0, r4
2000087c:	f7ff fe78 	bl	20000570 <qspi_config>
    if(cmd->datamode == QSPI_DATA_NONE){
20000880:	6a63      	ldr	r3, [r4, #36]	; 0x24
20000882:	b933      	cbnz	r3, 20000892 <qspi_command+0x26>
        while((QSPI_STAT & QSPI_FLAG_TC) == 0U){
20000884:	4a04      	ldr	r2, [pc, #16]	; (20000898 <qspi_command+0x2c>)
20000886:	6813      	ldr	r3, [r2, #0]
20000888:	079b      	lsls	r3, r3, #30
2000088a:	d5fc      	bpl.n	20000886 <qspi_command+0x1a>
        QSPI_STATC = QSPI_STATC_TCC;
2000088c:	2202      	movs	r2, #2
2000088e:	4b03      	ldr	r3, [pc, #12]	; (2000089c <qspi_command+0x30>)
20000890:	601a      	str	r2, [r3, #0]
}
20000892:	bd10      	pop	{r4, pc}
20000894:	40025800 	.word	0x40025800
20000898:	40025808 	.word	0x40025808
2000089c:	4002580c 	.word	0x4002580c

200008a0 <qspi_transmit>:
    QSPI_TCFG = (QSPI_TCFG & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_WRITE;
200008a0:	4913      	ldr	r1, [pc, #76]	; (200008f0 <qspi_transmit+0x50>)
    TxCounter = QSPI_DTLEN + 1U;
200008a2:	4b14      	ldr	r3, [pc, #80]	; (200008f4 <qspi_transmit+0x54>)
200008a4:	681b      	ldr	r3, [r3, #0]
    QSPI_TCFG = (QSPI_TCFG & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_WRITE;
200008a6:	680a      	ldr	r2, [r1, #0]
    while(TxCounter > 0U){
200008a8:	3301      	adds	r3, #1
    QSPI_TCFG = (QSPI_TCFG & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_WRITE;
200008aa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
200008ae:	600a      	str	r2, [r1, #0]
    while(TxCounter > 0U){
200008b0:	d015      	beq.n	200008de <qspi_transmit+0x3e>
{
200008b2:	b410      	push	{r4}
        while((QSPI_STAT & QSPI_FLAG_FT) == 0U){
200008b4:	4a10      	ldr	r2, [pc, #64]	; (200008f8 <qspi_transmit+0x58>)
        *(uint8_t *)(QSPI + 0x00000020U) = *tdata++;
200008b6:	4c11      	ldr	r4, [pc, #68]	; (200008fc <qspi_transmit+0x5c>)
200008b8:	18c1      	adds	r1, r0, r3
        while((QSPI_STAT & QSPI_FLAG_FT) == 0U){
200008ba:	6813      	ldr	r3, [r2, #0]
200008bc:	075b      	lsls	r3, r3, #29
200008be:	d5fc      	bpl.n	200008ba <qspi_transmit+0x1a>
        *(uint8_t *)(QSPI + 0x00000020U) = *tdata++;
200008c0:	f810 3b01 	ldrb.w	r3, [r0], #1
    while(TxCounter > 0U){
200008c4:	4281      	cmp	r1, r0
        *(uint8_t *)(QSPI + 0x00000020U) = *tdata++;
200008c6:	7023      	strb	r3, [r4, #0]
    while(TxCounter > 0U){
200008c8:	d1f7      	bne.n	200008ba <qspi_transmit+0x1a>
    while((QSPI_STAT & QSPI_FLAG_TC) == 0U){
200008ca:	4a0b      	ldr	r2, [pc, #44]	; (200008f8 <qspi_transmit+0x58>)
200008cc:	6813      	ldr	r3, [r2, #0]
200008ce:	0799      	lsls	r1, r3, #30
200008d0:	d5fc      	bpl.n	200008cc <qspi_transmit+0x2c>
    QSPI_STATC = QSPI_STATC_TCC;
200008d2:	2202      	movs	r2, #2
200008d4:	4b0a      	ldr	r3, [pc, #40]	; (20000900 <qspi_transmit+0x60>)
}
200008d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    QSPI_STATC = QSPI_STATC_TCC;
200008da:	601a      	str	r2, [r3, #0]
}
200008dc:	4770      	bx	lr
    while((QSPI_STAT & QSPI_FLAG_TC) == 0U){
200008de:	4a06      	ldr	r2, [pc, #24]	; (200008f8 <qspi_transmit+0x58>)
200008e0:	6813      	ldr	r3, [r2, #0]
200008e2:	079b      	lsls	r3, r3, #30
200008e4:	d5fc      	bpl.n	200008e0 <qspi_transmit+0x40>
    QSPI_STATC = QSPI_STATC_TCC;
200008e6:	2202      	movs	r2, #2
200008e8:	4b05      	ldr	r3, [pc, #20]	; (20000900 <qspi_transmit+0x60>)
200008ea:	601a      	str	r2, [r3, #0]
200008ec:	4770      	bx	lr
200008ee:	bf00      	nop
200008f0:	40025814 	.word	0x40025814
200008f4:	40025810 	.word	0x40025810
200008f8:	40025808 	.word	0x40025808
200008fc:	40025820 	.word	0x40025820
20000900:	4002580c 	.word	0x4002580c

20000904 <qspi_receive>:
{
20000904:	b430      	push	{r4, r5}
    addr = QSPI_ADDR;
20000906:	4911      	ldr	r1, [pc, #68]	; (2000094c <qspi_receive+0x48>)
    QSPI_TCFG = (QSPI_TCFG & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_READ;
20000908:	4c11      	ldr	r4, [pc, #68]	; (20000950 <qspi_receive+0x4c>)
    RxCounter = QSPI_DTLEN + 1U;
2000090a:	4b12      	ldr	r3, [pc, #72]	; (20000954 <qspi_receive+0x50>)
2000090c:	681b      	ldr	r3, [r3, #0]
    addr = QSPI_ADDR;
2000090e:	680d      	ldr	r5, [r1, #0]
    QSPI_TCFG = (QSPI_TCFG & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_READ;
20000910:	6822      	ldr	r2, [r4, #0]
    while(RxCounter > 0U){
20000912:	3301      	adds	r3, #1
    QSPI_TCFG = (QSPI_TCFG & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_READ;
20000914:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
20000918:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
2000091c:	6022      	str	r2, [r4, #0]
    QSPI_ADDR = addr;
2000091e:	600d      	str	r5, [r1, #0]
    while(RxCounter > 0U){
20000920:	d00b      	beq.n	2000093a <qspi_receive+0x36>
        while((QSPI_STAT & (QSPI_FLAG_FT | QSPI_FLAG_TC)) == 0U){
20000922:	4a0d      	ldr	r2, [pc, #52]	; (20000958 <qspi_receive+0x54>)
        *rdata++ = *(uint8_t *)(QSPI + 0x00000020U);
20000924:	340c      	adds	r4, #12
20000926:	18c1      	adds	r1, r0, r3
        while((QSPI_STAT & (QSPI_FLAG_FT | QSPI_FLAG_TC)) == 0U){
20000928:	6813      	ldr	r3, [r2, #0]
2000092a:	f013 0f06 	tst.w	r3, #6
2000092e:	d0fb      	beq.n	20000928 <qspi_receive+0x24>
        *rdata++ = *(uint8_t *)(QSPI + 0x00000020U);
20000930:	7823      	ldrb	r3, [r4, #0]
20000932:	f800 3b01 	strb.w	r3, [r0], #1
    while(RxCounter > 0U){
20000936:	4281      	cmp	r1, r0
20000938:	d1f6      	bne.n	20000928 <qspi_receive+0x24>
    while((QSPI_STAT & QSPI_FLAG_TC) == 0U){
2000093a:	4a07      	ldr	r2, [pc, #28]	; (20000958 <qspi_receive+0x54>)
2000093c:	6813      	ldr	r3, [r2, #0]
2000093e:	079b      	lsls	r3, r3, #30
20000940:	d5fc      	bpl.n	2000093c <qspi_receive+0x38>
}
20000942:	bc30      	pop	{r4, r5}
    QSPI_STATC = QSPI_STATC_TCC;
20000944:	2202      	movs	r2, #2
20000946:	4b05      	ldr	r3, [pc, #20]	; (2000095c <qspi_receive+0x58>)
20000948:	601a      	str	r2, [r3, #0]
}
2000094a:	4770      	bx	lr
2000094c:	40025818 	.word	0x40025818
20000950:	40025814 	.word	0x40025814
20000954:	40025810 	.word	0x40025810
20000958:	40025808 	.word	0x40025808
2000095c:	4002580c 	.word	0x4002580c

20000960 <qspi_autopolling>:
{
20000960:	b538      	push	{r3, r4, r5, lr}
    while((QSPI_CTL & QSPI_FLAG_BUSY) != 0U){
20000962:	4a11      	ldr	r2, [pc, #68]	; (200009a8 <qspi_autopolling+0x48>)
20000964:	6813      	ldr	r3, [r2, #0]
20000966:	045c      	lsls	r4, r3, #17
20000968:	d4fc      	bmi.n	20000964 <qspi_autopolling+0x4>
    QSPI_STATMATCH = cfg->match;
2000096a:	680d      	ldr	r5, [r1, #0]
2000096c:	4b0f      	ldr	r3, [pc, #60]	; (200009ac <qspi_autopolling+0x4c>)
    QSPI_STATMK = cfg->mask;
2000096e:	4c10      	ldr	r4, [pc, #64]	; (200009b0 <qspi_autopolling+0x50>)
    QSPI_STATMATCH = cfg->match;
20000970:	601d      	str	r5, [r3, #0]
    QSPI_STATMK = cfg->mask;
20000972:	684d      	ldr	r5, [r1, #4]
20000974:	6025      	str	r5, [r4, #0]
    QSPI_INTERVAL = cfg->interval;
20000976:	688c      	ldr	r4, [r1, #8]
20000978:	605c      	str	r4, [r3, #4]
    QSPI_CTL = (QSPI_CTL & (~(QSPI_CTL_SPS | QSPI_CTL_SPMOD))) | (cfg->matchmode | cfg->automaticstop);
2000097a:	6814      	ldr	r4, [r2, #0]
2000097c:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
20000980:	f424 0440 	bic.w	r4, r4, #12582912	; 0xc00000
20000984:	432b      	orrs	r3, r5
20000986:	4323      	orrs	r3, r4
20000988:	6013      	str	r3, [r2, #0]
    cmd->nbdata = cfg->statusbytessize;
2000098a:	68cb      	ldr	r3, [r1, #12]
    qspi_config(cmd, QSPI_AUTO_POLLING);
2000098c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    cmd->nbdata = cfg->statusbytessize;
20000990:	6283      	str	r3, [r0, #40]	; 0x28
    qspi_config(cmd, QSPI_AUTO_POLLING);
20000992:	f7ff fded 	bl	20000570 <qspi_config>
    while((QSPI_STAT & QSPI_FLAG_SM) == 0U){
20000996:	4a07      	ldr	r2, [pc, #28]	; (200009b4 <qspi_autopolling+0x54>)
20000998:	6813      	ldr	r3, [r2, #0]
2000099a:	071b      	lsls	r3, r3, #28
2000099c:	d5fc      	bpl.n	20000998 <qspi_autopolling+0x38>
    QSPI_STATC = QSPI_STATC_SMC;
2000099e:	2208      	movs	r2, #8
200009a0:	4b05      	ldr	r3, [pc, #20]	; (200009b8 <qspi_autopolling+0x58>)
200009a2:	601a      	str	r2, [r3, #0]
}
200009a4:	bd38      	pop	{r3, r4, r5, pc}
200009a6:	bf00      	nop
200009a8:	40025800 	.word	0x40025800
200009ac:	40025828 	.word	0x40025828
200009b0:	40025824 	.word	0x40025824
200009b4:	40025808 	.word	0x40025808
200009b8:	4002580c 	.word	0x4002580c

200009bc <qspi_memorymapped>:
{
200009bc:	b430      	push	{r4, r5}
    while((QSPI_CTL & QSPI_FLAG_BUSY) != 0U){
200009be:	4c0d      	ldr	r4, [pc, #52]	; (200009f4 <qspi_memorymapped+0x38>)
200009c0:	6823      	ldr	r3, [r4, #0]
200009c2:	045b      	lsls	r3, r3, #17
200009c4:	d4fc      	bmi.n	200009c0 <qspi_memorymapped+0x4>
    QSPI_CTL = (QSPI_CTL & ~QSPI_CTL_TMOUTEN) | toen;
200009c6:	6823      	ldr	r3, [r4, #0]
    if(toen == QSPI_CTL_TMOUTEN){
200009c8:	2a08      	cmp	r2, #8
    QSPI_CTL = (QSPI_CTL & ~QSPI_CTL_TMOUTEN) | toen;
200009ca:	f023 0308 	bic.w	r3, r3, #8
200009ce:	ea43 0302 	orr.w	r3, r3, r2
200009d2:	6023      	str	r3, [r4, #0]
    if(toen == QSPI_CTL_TMOUTEN){
200009d4:	d108      	bne.n	200009e8 <qspi_memorymapped+0x2c>
        QSPI_STATC = QSPI_STATC_TMOUTC;
200009d6:	2210      	movs	r2, #16
200009d8:	4b07      	ldr	r3, [pc, #28]	; (200009f8 <qspi_memorymapped+0x3c>)
        QSPI_TMOUT = timeout;
200009da:	4d08      	ldr	r5, [pc, #32]	; (200009fc <qspi_memorymapped+0x40>)
200009dc:	6029      	str	r1, [r5, #0]
        QSPI_STATC = QSPI_STATC_TMOUTC;
200009de:	601a      	str	r2, [r3, #0]
        QSPI_CTL |= QSPI_FLAG_TMOUTIE;
200009e0:	6823      	ldr	r3, [r4, #0]
200009e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
200009e6:	6023      	str	r3, [r4, #0]
    qspi_config(cmd, QSPI_MEMORY_MAPPED);
200009e8:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
}
200009ec:	bc30      	pop	{r4, r5}
    qspi_config(cmd, QSPI_MEMORY_MAPPED);
200009ee:	f7ff bdbf 	b.w	20000570 <qspi_config>
200009f2:	bf00      	nop
200009f4:	40025800 	.word	0x40025800
200009f8:	4002580c 	.word	0x4002580c
200009fc:	40025830 	.word	0x40025830

20000a00 <qspi_abort>:
    QSPI_CTL |= QSPI_CTL_ABORT;
20000a00:	4a02      	ldr	r2, [pc, #8]	; (20000a0c <qspi_abort+0xc>)
20000a02:	6813      	ldr	r3, [r2, #0]
20000a04:	f043 0302 	orr.w	r3, r3, #2
20000a08:	6013      	str	r3, [r2, #0]
}
20000a0a:	4770      	bx	lr
20000a0c:	40025800 	.word	0x40025800

20000a10 <qspi_command_fmc_s>:
{
20000a10:	b510      	push	{r4, lr}
20000a12:	4604      	mov	r4, r0
    while((QSPI_CTL & QSPI_FLAG_BUSY) != 0U){
20000a14:	4b08      	ldr	r3, [pc, #32]	; (20000a38 <qspi_command_fmc_s+0x28>)
20000a16:	6819      	ldr	r1, [r3, #0]
20000a18:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
20000a1c:	d1fb      	bne.n	20000a16 <qspi_command_fmc_s+0x6>
    qspi_config_fmc_s(cmd, QSPI_INDIRECT_WRITE);
20000a1e:	4620      	mov	r0, r4
20000a20:	f7ff fe48 	bl	200006b4 <qspi_config_fmc_s>
    if(cmd->datamode == QSPI_DATA_NONE){
20000a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
20000a26:	b933      	cbnz	r3, 20000a36 <qspi_command_fmc_s+0x26>
        while((QSPI_STAT_FMC_S & QSPI_FLAG_TC) == 0U){
20000a28:	4a04      	ldr	r2, [pc, #16]	; (20000a3c <qspi_command_fmc_s+0x2c>)
20000a2a:	6813      	ldr	r3, [r2, #0]
20000a2c:	079b      	lsls	r3, r3, #30
20000a2e:	d5fc      	bpl.n	20000a2a <qspi_command_fmc_s+0x1a>
        QSPI_STATC_FMC_S = QSPI_STATC_TCC;
20000a30:	2202      	movs	r2, #2
20000a32:	4b03      	ldr	r3, [pc, #12]	; (20000a40 <qspi_command_fmc_s+0x30>)
20000a34:	601a      	str	r2, [r3, #0]
}
20000a36:	bd10      	pop	{r4, pc}
20000a38:	40025800 	.word	0x40025800
20000a3c:	40025908 	.word	0x40025908
20000a40:	4002590c 	.word	0x4002590c

20000a44 <qspi_transmit_fmc_s>:
{
    uint32_t TxCounter;
    TxCounter = QSPI_DTLEN_FMC_S + 1U;

    /* Configure QSPI: CFG register with functional as indirect write */
    QSPI_TCFG_FMC_S = (QSPI_TCFG_FMC_S & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_WRITE;
20000a44:	4913      	ldr	r1, [pc, #76]	; (20000a94 <qspi_transmit_fmc_s+0x50>)
    TxCounter = QSPI_DTLEN_FMC_S + 1U;
20000a46:	4b14      	ldr	r3, [pc, #80]	; (20000a98 <qspi_transmit_fmc_s+0x54>)
20000a48:	681b      	ldr	r3, [r3, #0]
    QSPI_TCFG_FMC_S = (QSPI_TCFG_FMC_S & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_WRITE;
20000a4a:	680a      	ldr	r2, [r1, #0]

    while(TxCounter > 0U){
20000a4c:	3301      	adds	r3, #1
    QSPI_TCFG_FMC_S = (QSPI_TCFG_FMC_S & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_WRITE;
20000a4e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
20000a52:	600a      	str	r2, [r1, #0]
    while(TxCounter > 0U){
20000a54:	d015      	beq.n	20000a82 <qspi_transmit_fmc_s+0x3e>
{
20000a56:	b410      	push	{r4}
        while((QSPI_STAT_FMC_S & QSPI_FLAG_FT) == 0U){
20000a58:	4a10      	ldr	r2, [pc, #64]	; (20000a9c <qspi_transmit_fmc_s+0x58>)
        }
        *(uint8_t *)(QSPI + 0x00000120U) = *tdata++;
20000a5a:	4c11      	ldr	r4, [pc, #68]	; (20000aa0 <qspi_transmit_fmc_s+0x5c>)
20000a5c:	18c1      	adds	r1, r0, r3
        while((QSPI_STAT_FMC_S & QSPI_FLAG_FT) == 0U){
20000a5e:	6813      	ldr	r3, [r2, #0]
20000a60:	075b      	lsls	r3, r3, #29
20000a62:	d5fc      	bpl.n	20000a5e <qspi_transmit_fmc_s+0x1a>
        *(uint8_t *)(QSPI + 0x00000120U) = *tdata++;
20000a64:	f810 3b01 	ldrb.w	r3, [r0], #1
    while(TxCounter > 0U){
20000a68:	4281      	cmp	r1, r0
        *(uint8_t *)(QSPI + 0x00000120U) = *tdata++;
20000a6a:	7023      	strb	r3, [r4, #0]
    while(TxCounter > 0U){
20000a6c:	d1f7      	bne.n	20000a5e <qspi_transmit_fmc_s+0x1a>
        TxCounter--;
    }

    while((QSPI_STAT_FMC_S & QSPI_FLAG_TC) == 0U){
20000a6e:	4a0b      	ldr	r2, [pc, #44]	; (20000a9c <qspi_transmit_fmc_s+0x58>)
20000a70:	6813      	ldr	r3, [r2, #0]
20000a72:	0799      	lsls	r1, r3, #30
20000a74:	d5fc      	bpl.n	20000a70 <qspi_transmit_fmc_s+0x2c>
    }
    QSPI_STATC_FMC_S = QSPI_STATC_TCC;
20000a76:	2202      	movs	r2, #2
20000a78:	4b0a      	ldr	r3, [pc, #40]	; (20000aa4 <qspi_transmit_fmc_s+0x60>)
}
20000a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
    QSPI_STATC_FMC_S = QSPI_STATC_TCC;
20000a7e:	601a      	str	r2, [r3, #0]
}
20000a80:	4770      	bx	lr
    while((QSPI_STAT_FMC_S & QSPI_FLAG_TC) == 0U){
20000a82:	4a06      	ldr	r2, [pc, #24]	; (20000a9c <qspi_transmit_fmc_s+0x58>)
20000a84:	6813      	ldr	r3, [r2, #0]
20000a86:	079b      	lsls	r3, r3, #30
20000a88:	d5fc      	bpl.n	20000a84 <qspi_transmit_fmc_s+0x40>
    QSPI_STATC_FMC_S = QSPI_STATC_TCC;
20000a8a:	2202      	movs	r2, #2
20000a8c:	4b05      	ldr	r3, [pc, #20]	; (20000aa4 <qspi_transmit_fmc_s+0x60>)
20000a8e:	601a      	str	r2, [r3, #0]
20000a90:	4770      	bx	lr
20000a92:	bf00      	nop
20000a94:	40025914 	.word	0x40025914
20000a98:	40025910 	.word	0x40025910
20000a9c:	40025908 	.word	0x40025908
20000aa0:	40025920 	.word	0x40025920
20000aa4:	4002590c 	.word	0x4002590c

20000aa8 <qspi_receive_fmc_s>:
    \param[in]  rdata: empty array
    \param[out] 8-bit data array
    \retval     none
*/
void qspi_receive_fmc_s(uint8_t *rdata)
{
20000aa8:	b430      	push	{r4, r5}
    uint32_t RxCounter, addr;
    RxCounter = QSPI_DTLEN_FMC_S + 1U;
    addr = QSPI_ADDR_FMC_S;
20000aaa:	4911      	ldr	r1, [pc, #68]	; (20000af0 <qspi_receive_fmc_s+0x48>)

    /* Configure QSPI: CFG register with functional as indirect read */
    QSPI_TCFG_FMC_S = (QSPI_TCFG_FMC_S & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_READ;
20000aac:	4c11      	ldr	r4, [pc, #68]	; (20000af4 <qspi_receive_fmc_s+0x4c>)
    RxCounter = QSPI_DTLEN_FMC_S + 1U;
20000aae:	4b12      	ldr	r3, [pc, #72]	; (20000af8 <qspi_receive_fmc_s+0x50>)
20000ab0:	681b      	ldr	r3, [r3, #0]
    addr = QSPI_ADDR_FMC_S;
20000ab2:	680d      	ldr	r5, [r1, #0]
    QSPI_TCFG_FMC_S = (QSPI_TCFG_FMC_S & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_READ;
20000ab4:	6822      	ldr	r2, [r4, #0]
    /* Start the transfer by re-writing the address in AR register */
    QSPI_ADDR_FMC_S = addr;

    while(RxCounter > 0U){
20000ab6:	3301      	adds	r3, #1
    QSPI_TCFG_FMC_S = (QSPI_TCFG_FMC_S & ~QSPI_MEMORY_MAPPED) | QSPI_INDIRECT_READ;
20000ab8:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
20000abc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
20000ac0:	6022      	str	r2, [r4, #0]
    QSPI_ADDR_FMC_S = addr;
20000ac2:	600d      	str	r5, [r1, #0]
    while(RxCounter > 0U){
20000ac4:	d00b      	beq.n	20000ade <qspi_receive_fmc_s+0x36>
        while((QSPI_STAT_FMC_S & (QSPI_FLAG_FT | QSPI_FLAG_TC)) == 0U){
20000ac6:	4a0d      	ldr	r2, [pc, #52]	; (20000afc <qspi_receive_fmc_s+0x54>)
        }
        *rdata++ = *(uint8_t *)(QSPI + 0x00000120U);
20000ac8:	340c      	adds	r4, #12
20000aca:	18c1      	adds	r1, r0, r3
        while((QSPI_STAT_FMC_S & (QSPI_FLAG_FT | QSPI_FLAG_TC)) == 0U){
20000acc:	6813      	ldr	r3, [r2, #0]
20000ace:	f013 0f06 	tst.w	r3, #6
20000ad2:	d0fb      	beq.n	20000acc <qspi_receive_fmc_s+0x24>
        *rdata++ = *(uint8_t *)(QSPI + 0x00000120U);
20000ad4:	7823      	ldrb	r3, [r4, #0]
20000ad6:	f800 3b01 	strb.w	r3, [r0], #1
    while(RxCounter > 0U){
20000ada:	4281      	cmp	r1, r0
20000adc:	d1f6      	bne.n	20000acc <qspi_receive_fmc_s+0x24>
        RxCounter--;
    }
    while((QSPI_STAT_FMC_S & QSPI_FLAG_TC) == 0U){
20000ade:	4a07      	ldr	r2, [pc, #28]	; (20000afc <qspi_receive_fmc_s+0x54>)
20000ae0:	6813      	ldr	r3, [r2, #0]
20000ae2:	079b      	lsls	r3, r3, #30
20000ae4:	d5fc      	bpl.n	20000ae0 <qspi_receive_fmc_s+0x38>
    }
    QSPI_STATC_FMC_S = QSPI_STATC_TCC;
}
20000ae6:	bc30      	pop	{r4, r5}
    QSPI_STATC_FMC_S = QSPI_STATC_TCC;
20000ae8:	2202      	movs	r2, #2
20000aea:	4b05      	ldr	r3, [pc, #20]	; (20000b00 <qspi_receive_fmc_s+0x58>)
20000aec:	601a      	str	r2, [r3, #0]
}
20000aee:	4770      	bx	lr
20000af0:	40025918 	.word	0x40025918
20000af4:	40025914 	.word	0x40025914
20000af8:	40025910 	.word	0x40025910
20000afc:	40025908 	.word	0x40025908
20000b00:	4002590c 	.word	0x4002590c

20000b04 <qspi_autopolling_fmc_s>:
                  automaticstop: QSPI_AUTOMATIC_STOP_DISABLE, QSPI_AUTOMATIC_STOP_ENABLE
    \param[out] none
    \retval     none
*/
void qspi_autopolling_fmc_s(qspi_command_struct *cmd, qspi_autopolling_struct *cfg)
{
20000b04:	b538      	push	{r3, r4, r5, lr}
    /* Wait till BUSY flag reset */
    while((QSPI_STAT_FMC_S & QSPI_FLAG_BUSY) != 0U){
20000b06:	4a11      	ldr	r2, [pc, #68]	; (20000b4c <qspi_autopolling_fmc_s+0x48>)
20000b08:	6813      	ldr	r3, [r2, #0]
20000b0a:	045c      	lsls	r4, r3, #17
20000b0c:	d4fc      	bmi.n	20000b08 <qspi_autopolling_fmc_s+0x4>
    }

    QSPI_STATMATCH = cfg->match;
20000b0e:	680c      	ldr	r4, [r1, #0]
20000b10:	4b0f      	ldr	r3, [pc, #60]	; (20000b50 <qspi_autopolling_fmc_s+0x4c>)
    QSPI_STATMK = cfg->mask;
20000b12:	4a10      	ldr	r2, [pc, #64]	; (20000b54 <qspi_autopolling_fmc_s+0x50>)
    QSPI_STATMATCH = cfg->match;
20000b14:	601c      	str	r4, [r3, #0]
    QSPI_STATMK = cfg->mask;
20000b16:	684c      	ldr	r4, [r1, #4]
20000b18:	6014      	str	r4, [r2, #0]
    QSPI_INTERVAL = cfg->interval;
20000b1a:	688a      	ldr	r2, [r1, #8]
    QSPI_CTL = (QSPI_CTL & (~(QSPI_CTL_SPS | QSPI_CTL_SPMOD))) | (cfg->matchmode | cfg->automaticstop);
20000b1c:	4c0e      	ldr	r4, [pc, #56]	; (20000b58 <qspi_autopolling_fmc_s+0x54>)
    QSPI_INTERVAL = cfg->interval;
20000b1e:	605a      	str	r2, [r3, #4]
    QSPI_CTL = (QSPI_CTL & (~(QSPI_CTL_SPS | QSPI_CTL_SPMOD))) | (cfg->matchmode | cfg->automaticstop);
20000b20:	6822      	ldr	r2, [r4, #0]
20000b22:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
20000b26:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
20000b2a:	432b      	orrs	r3, r5
20000b2c:	4313      	orrs	r3, r2
20000b2e:	6023      	str	r3, [r4, #0]
    cmd->nbdata = cfg->statusbytessize;
20000b30:	68cb      	ldr	r3, [r1, #12]
    qspi_config_fmc_s(cmd, QSPI_AUTO_POLLING);
20000b32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    cmd->nbdata = cfg->statusbytessize;
20000b36:	6283      	str	r3, [r0, #40]	; 0x28
    qspi_config_fmc_s(cmd, QSPI_AUTO_POLLING);
20000b38:	f7ff fdbc 	bl	200006b4 <qspi_config_fmc_s>

    while((QSPI_STAT_FMC_S & QSPI_FLAG_SM) == 0U){
20000b3c:	4a03      	ldr	r2, [pc, #12]	; (20000b4c <qspi_autopolling_fmc_s+0x48>)
20000b3e:	6813      	ldr	r3, [r2, #0]
20000b40:	071b      	lsls	r3, r3, #28
20000b42:	d5fc      	bpl.n	20000b3e <qspi_autopolling_fmc_s+0x3a>
    }
    QSPI_STATC_FMC_S = QSPI_STATC_SMC;
20000b44:	2208      	movs	r2, #8
20000b46:	4b05      	ldr	r3, [pc, #20]	; (20000b5c <qspi_autopolling_fmc_s+0x58>)
20000b48:	601a      	str	r2, [r3, #0]
}
20000b4a:	bd38      	pop	{r3, r4, r5, pc}
20000b4c:	40025908 	.word	0x40025908
20000b50:	40025828 	.word	0x40025828
20000b54:	40025824 	.word	0x40025824
20000b58:	40025800 	.word	0x40025800
20000b5c:	4002590c 	.word	0x4002590c

20000b60 <qspi_memorymapped_fmc_s>:
    \param[in]  toen: QSPI_TMOUTEN_DISABLE, QSPI_TMOUTEN_ENABLE
    \param[out] none
    \retval     none
*/
void qspi_memorymapped_fmc_s(qspi_command_struct *cmd, uint16_t timeout, uint32_t toen)
{
20000b60:	b430      	push	{r4, r5}
    while((QSPI_STAT_FMC_S & QSPI_FLAG_BUSY) != 0U){
20000b62:	4c0d      	ldr	r4, [pc, #52]	; (20000b98 <qspi_memorymapped_fmc_s+0x38>)
20000b64:	6823      	ldr	r3, [r4, #0]
20000b66:	045b      	lsls	r3, r3, #17
20000b68:	d4fc      	bmi.n	20000b64 <qspi_memorymapped_fmc_s+0x4>
    }

    /* Configure QSPI: CTL register with timeout counter enable */
    QSPI_CTL = (QSPI_CTL & ~QSPI_CTL_TMOUTEN) | toen;
20000b6a:	4c0c      	ldr	r4, [pc, #48]	; (20000b9c <qspi_memorymapped_fmc_s+0x3c>)

    if(toen == QSPI_CTL_TMOUTEN){
20000b6c:	2a08      	cmp	r2, #8
    QSPI_CTL = (QSPI_CTL & ~QSPI_CTL_TMOUTEN) | toen;
20000b6e:	6823      	ldr	r3, [r4, #0]
20000b70:	f023 0308 	bic.w	r3, r3, #8
20000b74:	ea43 0302 	orr.w	r3, r3, r2
20000b78:	6023      	str	r3, [r4, #0]
    if(toen == QSPI_CTL_TMOUTEN){
20000b7a:	d108      	bne.n	20000b8e <qspi_memorymapped_fmc_s+0x2e>
        /* Configure QSPI: TOR register with the low-power timeout value */
        QSPI_TMOUT = timeout;

        /* Clear interrupt */
        QSPI_STATC_FMC_S = QSPI_STATC_TMOUTC;
20000b7c:	2210      	movs	r2, #16
20000b7e:	4b08      	ldr	r3, [pc, #32]	; (20000ba0 <qspi_memorymapped_fmc_s+0x40>)
        QSPI_TMOUT = timeout;
20000b80:	4d08      	ldr	r5, [pc, #32]	; (20000ba4 <qspi_memorymapped_fmc_s+0x44>)
20000b82:	6029      	str	r1, [r5, #0]
        QSPI_STATC_FMC_S = QSPI_STATC_TMOUTC;
20000b84:	601a      	str	r2, [r3, #0]

        /* Enable the QSPI TimeOut Interrupt */
        QSPI_CTL |= QSPI_FLAG_TMOUTIE;
20000b86:	6823      	ldr	r3, [r4, #0]
20000b88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
20000b8c:	6023      	str	r3, [r4, #0]
    }
    qspi_config_fmc_s(cmd, QSPI_MEMORY_MAPPED);
20000b8e:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
}
20000b92:	bc30      	pop	{r4, r5}
    qspi_config_fmc_s(cmd, QSPI_MEMORY_MAPPED);
20000b94:	f7ff bd8e 	b.w	200006b4 <qspi_config_fmc_s>
20000b98:	40025908 	.word	0x40025908
20000b9c:	40025800 	.word	0x40025800
20000ba0:	4002590c 	.word	0x4002590c
20000ba4:	40025830 	.word	0x40025830

20000ba8 <__rcu_periph_clock_enable_veneer>:
20000ba8:	b401      	push	{r0}
20000baa:	4802      	ldr	r0, [pc, #8]	; (20000bb4 <__rcu_periph_clock_enable_veneer+0xc>)
20000bac:	4684      	mov	ip, r0
20000bae:	bc01      	pop	{r0}
20000bb0:	4760      	bx	ip
20000bb2:	bf00      	nop
20000bb4:	08002c6d 	.word	0x08002c6d

20000bb8 <__gpio_mode_set_veneer>:
20000bb8:	b401      	push	{r0}
20000bba:	4802      	ldr	r0, [pc, #8]	; (20000bc4 <__gpio_mode_set_veneer+0xc>)
20000bbc:	4684      	mov	ip, r0
20000bbe:	bc01      	pop	{r0}
20000bc0:	4760      	bx	ip
20000bc2:	bf00      	nop
20000bc4:	08002ae9 	.word	0x08002ae9

20000bc8 <__gpio_output_options_set_veneer>:
20000bc8:	b401      	push	{r0}
20000bca:	4802      	ldr	r0, [pc, #8]	; (20000bd4 <__gpio_output_options_set_veneer+0xc>)
20000bcc:	4684      	mov	ip, r0
20000bce:	bc01      	pop	{r0}
20000bd0:	4760      	bx	ip
20000bd2:	bf00      	nop
20000bd4:	08002b2d 	.word	0x08002b2d

20000bd8 <__gpio_af_set_veneer>:
20000bd8:	b401      	push	{r0}
20000bda:	4802      	ldr	r0, [pc, #8]	; (20000be4 <__gpio_af_set_veneer+0xc>)
20000bdc:	4684      	mov	ip, r0
20000bde:	bc01      	pop	{r0}
20000be0:	4760      	bx	ip
20000be2:	bf00      	nop
20000be4:	08002b69 	.word	0x08002b69

20000be8 <__memset_veneer>:
20000be8:	b401      	push	{r0}
20000bea:	4802      	ldr	r0, [pc, #8]	; (20000bf4 <__memset_veneer+0xc>)
20000bec:	4684      	mov	ip, r0
20000bee:	bc01      	pop	{r0}
20000bf0:	4760      	bx	ip
20000bf2:	bf00      	nop
20000bf4:	0800313b 	.word	0x0800313b

Disassembly of section .text:

08000af8 <strlen>:
 8000af8:	4603      	mov	r3, r0
 8000afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	d1fb      	bne.n	8000afa <strlen+0x2>
 8000b02:	1a18      	subs	r0, r3, r0
 8000b04:	3801      	subs	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_drsub>:
 8000b08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__adddf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dsub>:
 8000b10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000b14 <__adddf3>:
 8000b14:	b530      	push	{r4, r5, lr}
 8000b16:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000b1a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000b1e:	ea94 0f05 	teq	r4, r5
 8000b22:	bf08      	it	eq
 8000b24:	ea90 0f02 	teqeq	r0, r2
 8000b28:	bf1f      	itttt	ne
 8000b2a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000b2e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000b32:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000b36:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000b3a:	f000 80e2 	beq.w	8000d02 <__adddf3+0x1ee>
 8000b3e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000b42:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000b46:	bfb8      	it	lt
 8000b48:	426d      	neglt	r5, r5
 8000b4a:	dd0c      	ble.n	8000b66 <__adddf3+0x52>
 8000b4c:	442c      	add	r4, r5
 8000b4e:	ea80 0202 	eor.w	r2, r0, r2
 8000b52:	ea81 0303 	eor.w	r3, r1, r3
 8000b56:	ea82 0000 	eor.w	r0, r2, r0
 8000b5a:	ea83 0101 	eor.w	r1, r3, r1
 8000b5e:	ea80 0202 	eor.w	r2, r0, r2
 8000b62:	ea81 0303 	eor.w	r3, r1, r3
 8000b66:	2d36      	cmp	r5, #54	; 0x36
 8000b68:	bf88      	it	hi
 8000b6a:	bd30      	pophi	{r4, r5, pc}
 8000b6c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b74:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000b78:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000b7c:	d002      	beq.n	8000b84 <__adddf3+0x70>
 8000b7e:	4240      	negs	r0, r0
 8000b80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b84:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000b88:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b8c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000b90:	d002      	beq.n	8000b98 <__adddf3+0x84>
 8000b92:	4252      	negs	r2, r2
 8000b94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b98:	ea94 0f05 	teq	r4, r5
 8000b9c:	f000 80a7 	beq.w	8000cee <__adddf3+0x1da>
 8000ba0:	f1a4 0401 	sub.w	r4, r4, #1
 8000ba4:	f1d5 0e20 	rsbs	lr, r5, #32
 8000ba8:	db0d      	blt.n	8000bc6 <__adddf3+0xb2>
 8000baa:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000bae:	fa22 f205 	lsr.w	r2, r2, r5
 8000bb2:	1880      	adds	r0, r0, r2
 8000bb4:	f141 0100 	adc.w	r1, r1, #0
 8000bb8:	fa03 f20e 	lsl.w	r2, r3, lr
 8000bbc:	1880      	adds	r0, r0, r2
 8000bbe:	fa43 f305 	asr.w	r3, r3, r5
 8000bc2:	4159      	adcs	r1, r3
 8000bc4:	e00e      	b.n	8000be4 <__adddf3+0xd0>
 8000bc6:	f1a5 0520 	sub.w	r5, r5, #32
 8000bca:	f10e 0e20 	add.w	lr, lr, #32
 8000bce:	2a01      	cmp	r2, #1
 8000bd0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000bd4:	bf28      	it	cs
 8000bd6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000bda:	fa43 f305 	asr.w	r3, r3, r5
 8000bde:	18c0      	adds	r0, r0, r3
 8000be0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000be4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000be8:	d507      	bpl.n	8000bfa <__adddf3+0xe6>
 8000bea:	f04f 0e00 	mov.w	lr, #0
 8000bee:	f1dc 0c00 	rsbs	ip, ip, #0
 8000bf2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000bf6:	eb6e 0101 	sbc.w	r1, lr, r1
 8000bfa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000bfe:	d31b      	bcc.n	8000c38 <__adddf3+0x124>
 8000c00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000c04:	d30c      	bcc.n	8000c20 <__adddf3+0x10c>
 8000c06:	0849      	lsrs	r1, r1, #1
 8000c08:	ea5f 0030 	movs.w	r0, r0, rrx
 8000c0c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000c10:	f104 0401 	add.w	r4, r4, #1
 8000c14:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000c18:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000c1c:	f080 809a 	bcs.w	8000d54 <__adddf3+0x240>
 8000c20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c24:	bf08      	it	eq
 8000c26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c2a:	f150 0000 	adcs.w	r0, r0, #0
 8000c2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c32:	ea41 0105 	orr.w	r1, r1, r5
 8000c36:	bd30      	pop	{r4, r5, pc}
 8000c38:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000c3c:	4140      	adcs	r0, r0
 8000c3e:	eb41 0101 	adc.w	r1, r1, r1
 8000c42:	3c01      	subs	r4, #1
 8000c44:	bf28      	it	cs
 8000c46:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000c4a:	d2e9      	bcs.n	8000c20 <__adddf3+0x10c>
 8000c4c:	f091 0f00 	teq	r1, #0
 8000c50:	bf04      	itt	eq
 8000c52:	4601      	moveq	r1, r0
 8000c54:	2000      	moveq	r0, #0
 8000c56:	fab1 f381 	clz	r3, r1
 8000c5a:	bf08      	it	eq
 8000c5c:	3320      	addeq	r3, #32
 8000c5e:	f1a3 030b 	sub.w	r3, r3, #11
 8000c62:	f1b3 0220 	subs.w	r2, r3, #32
 8000c66:	da0c      	bge.n	8000c82 <__adddf3+0x16e>
 8000c68:	320c      	adds	r2, #12
 8000c6a:	dd08      	ble.n	8000c7e <__adddf3+0x16a>
 8000c6c:	f102 0c14 	add.w	ip, r2, #20
 8000c70:	f1c2 020c 	rsb	r2, r2, #12
 8000c74:	fa01 f00c 	lsl.w	r0, r1, ip
 8000c78:	fa21 f102 	lsr.w	r1, r1, r2
 8000c7c:	e00c      	b.n	8000c98 <__adddf3+0x184>
 8000c7e:	f102 0214 	add.w	r2, r2, #20
 8000c82:	bfd8      	it	le
 8000c84:	f1c2 0c20 	rsble	ip, r2, #32
 8000c88:	fa01 f102 	lsl.w	r1, r1, r2
 8000c8c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c90:	bfdc      	itt	le
 8000c92:	ea41 010c 	orrle.w	r1, r1, ip
 8000c96:	4090      	lslle	r0, r2
 8000c98:	1ae4      	subs	r4, r4, r3
 8000c9a:	bfa2      	ittt	ge
 8000c9c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000ca0:	4329      	orrge	r1, r5
 8000ca2:	bd30      	popge	{r4, r5, pc}
 8000ca4:	ea6f 0404 	mvn.w	r4, r4
 8000ca8:	3c1f      	subs	r4, #31
 8000caa:	da1c      	bge.n	8000ce6 <__adddf3+0x1d2>
 8000cac:	340c      	adds	r4, #12
 8000cae:	dc0e      	bgt.n	8000cce <__adddf3+0x1ba>
 8000cb0:	f104 0414 	add.w	r4, r4, #20
 8000cb4:	f1c4 0220 	rsb	r2, r4, #32
 8000cb8:	fa20 f004 	lsr.w	r0, r0, r4
 8000cbc:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc0:	ea40 0003 	orr.w	r0, r0, r3
 8000cc4:	fa21 f304 	lsr.w	r3, r1, r4
 8000cc8:	ea45 0103 	orr.w	r1, r5, r3
 8000ccc:	bd30      	pop	{r4, r5, pc}
 8000cce:	f1c4 040c 	rsb	r4, r4, #12
 8000cd2:	f1c4 0220 	rsb	r2, r4, #32
 8000cd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000cda:	fa01 f304 	lsl.w	r3, r1, r4
 8000cde:	ea40 0003 	orr.w	r0, r0, r3
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	bd30      	pop	{r4, r5, pc}
 8000ce6:	fa21 f004 	lsr.w	r0, r1, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	bd30      	pop	{r4, r5, pc}
 8000cee:	f094 0f00 	teq	r4, #0
 8000cf2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000cf6:	bf06      	itte	eq
 8000cf8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000cfc:	3401      	addeq	r4, #1
 8000cfe:	3d01      	subne	r5, #1
 8000d00:	e74e      	b.n	8000ba0 <__adddf3+0x8c>
 8000d02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000d06:	bf18      	it	ne
 8000d08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000d0c:	d029      	beq.n	8000d62 <__adddf3+0x24e>
 8000d0e:	ea94 0f05 	teq	r4, r5
 8000d12:	bf08      	it	eq
 8000d14:	ea90 0f02 	teqeq	r0, r2
 8000d18:	d005      	beq.n	8000d26 <__adddf3+0x212>
 8000d1a:	ea54 0c00 	orrs.w	ip, r4, r0
 8000d1e:	bf04      	itt	eq
 8000d20:	4619      	moveq	r1, r3
 8000d22:	4610      	moveq	r0, r2
 8000d24:	bd30      	pop	{r4, r5, pc}
 8000d26:	ea91 0f03 	teq	r1, r3
 8000d2a:	bf1e      	ittt	ne
 8000d2c:	2100      	movne	r1, #0
 8000d2e:	2000      	movne	r0, #0
 8000d30:	bd30      	popne	{r4, r5, pc}
 8000d32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000d36:	d105      	bne.n	8000d44 <__adddf3+0x230>
 8000d38:	0040      	lsls	r0, r0, #1
 8000d3a:	4149      	adcs	r1, r1
 8000d3c:	bf28      	it	cs
 8000d3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000d42:	bd30      	pop	{r4, r5, pc}
 8000d44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000d48:	bf3c      	itt	cc
 8000d4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000d4e:	bd30      	popcc	{r4, r5, pc}
 8000d50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000d54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000d58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d5c:	f04f 0000 	mov.w	r0, #0
 8000d60:	bd30      	pop	{r4, r5, pc}
 8000d62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000d66:	bf1a      	itte	ne
 8000d68:	4619      	movne	r1, r3
 8000d6a:	4610      	movne	r0, r2
 8000d6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000d70:	bf1c      	itt	ne
 8000d72:	460b      	movne	r3, r1
 8000d74:	4602      	movne	r2, r0
 8000d76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000d7a:	bf06      	itte	eq
 8000d7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000d80:	ea91 0f03 	teqeq	r1, r3
 8000d84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000d88:	bd30      	pop	{r4, r5, pc}
 8000d8a:	bf00      	nop

08000d8c <__aeabi_ui2d>:
 8000d8c:	f090 0f00 	teq	r0, #0
 8000d90:	bf04      	itt	eq
 8000d92:	2100      	moveq	r1, #0
 8000d94:	4770      	bxeq	lr
 8000d96:	b530      	push	{r4, r5, lr}
 8000d98:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000da0:	f04f 0500 	mov.w	r5, #0
 8000da4:	f04f 0100 	mov.w	r1, #0
 8000da8:	e750      	b.n	8000c4c <__adddf3+0x138>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2d>:
 8000dac:	f090 0f00 	teq	r0, #0
 8000db0:	bf04      	itt	eq
 8000db2:	2100      	moveq	r1, #0
 8000db4:	4770      	bxeq	lr
 8000db6:	b530      	push	{r4, r5, lr}
 8000db8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000dbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000dc0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000dc4:	bf48      	it	mi
 8000dc6:	4240      	negmi	r0, r0
 8000dc8:	f04f 0100 	mov.w	r1, #0
 8000dcc:	e73e      	b.n	8000c4c <__adddf3+0x138>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_f2d>:
 8000dd0:	0042      	lsls	r2, r0, #1
 8000dd2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000dd6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000dda:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000dde:	bf1f      	itttt	ne
 8000de0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000de4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000de8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000dec:	4770      	bxne	lr
 8000dee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000df2:	bf08      	it	eq
 8000df4:	4770      	bxeq	lr
 8000df6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000dfa:	bf04      	itt	eq
 8000dfc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000e00:	4770      	bxeq	lr
 8000e02:	b530      	push	{r4, r5, lr}
 8000e04:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000e08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000e0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000e10:	e71c      	b.n	8000c4c <__adddf3+0x138>
 8000e12:	bf00      	nop

08000e14 <__aeabi_ul2d>:
 8000e14:	ea50 0201 	orrs.w	r2, r0, r1
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	b530      	push	{r4, r5, lr}
 8000e1e:	f04f 0500 	mov.w	r5, #0
 8000e22:	e00a      	b.n	8000e3a <__aeabi_l2d+0x16>

08000e24 <__aeabi_l2d>:
 8000e24:	ea50 0201 	orrs.w	r2, r0, r1
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	b530      	push	{r4, r5, lr}
 8000e2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000e32:	d502      	bpl.n	8000e3a <__aeabi_l2d+0x16>
 8000e34:	4240      	negs	r0, r0
 8000e36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000e3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000e42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000e46:	f43f aed8 	beq.w	8000bfa <__adddf3+0xe6>
 8000e4a:	f04f 0203 	mov.w	r2, #3
 8000e4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000e52:	bf18      	it	ne
 8000e54:	3203      	addne	r2, #3
 8000e56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000e5a:	bf18      	it	ne
 8000e5c:	3203      	addne	r2, #3
 8000e5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	fa00 fc03 	lsl.w	ip, r0, r3
 8000e6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000e6e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000e72:	ea40 000e 	orr.w	r0, r0, lr
 8000e76:	fa21 f102 	lsr.w	r1, r1, r2
 8000e7a:	4414      	add	r4, r2
 8000e7c:	e6bd      	b.n	8000bfa <__adddf3+0xe6>
 8000e7e:	bf00      	nop

08000e80 <__aeabi_dmul>:
 8000e80:	b570      	push	{r4, r5, r6, lr}
 8000e82:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e86:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000e8a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000e8e:	bf1d      	ittte	ne
 8000e90:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000e94:	ea94 0f0c 	teqne	r4, ip
 8000e98:	ea95 0f0c 	teqne	r5, ip
 8000e9c:	f000 f8de 	bleq	800105c <__aeabi_dmul+0x1dc>
 8000ea0:	442c      	add	r4, r5
 8000ea2:	ea81 0603 	eor.w	r6, r1, r3
 8000ea6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000eaa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000eae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000eb2:	bf18      	it	ne
 8000eb4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000eb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ec0:	d038      	beq.n	8000f34 <__aeabi_dmul+0xb4>
 8000ec2:	fba0 ce02 	umull	ip, lr, r0, r2
 8000ec6:	f04f 0500 	mov.w	r5, #0
 8000eca:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000ece:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000ed2:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000ed6:	f04f 0600 	mov.w	r6, #0
 8000eda:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000ede:	f09c 0f00 	teq	ip, #0
 8000ee2:	bf18      	it	ne
 8000ee4:	f04e 0e01 	orrne.w	lr, lr, #1
 8000ee8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000eec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000ef0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000ef4:	d204      	bcs.n	8000f00 <__aeabi_dmul+0x80>
 8000ef6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000efa:	416d      	adcs	r5, r5
 8000efc:	eb46 0606 	adc.w	r6, r6, r6
 8000f00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000f04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000f08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000f0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000f10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000f14:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000f18:	bf88      	it	hi
 8000f1a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000f1e:	d81e      	bhi.n	8000f5e <__aeabi_dmul+0xde>
 8000f20:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000f24:	bf08      	it	eq
 8000f26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000f2a:	f150 0000 	adcs.w	r0, r0, #0
 8000f2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000f32:	bd70      	pop	{r4, r5, r6, pc}
 8000f34:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000f38:	ea46 0101 	orr.w	r1, r6, r1
 8000f3c:	ea40 0002 	orr.w	r0, r0, r2
 8000f40:	ea81 0103 	eor.w	r1, r1, r3
 8000f44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000f48:	bfc2      	ittt	gt
 8000f4a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000f4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000f52:	bd70      	popgt	{r4, r5, r6, pc}
 8000f54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f58:	f04f 0e00 	mov.w	lr, #0
 8000f5c:	3c01      	subs	r4, #1
 8000f5e:	f300 80ab 	bgt.w	80010b8 <__aeabi_dmul+0x238>
 8000f62:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000f66:	bfde      	ittt	le
 8000f68:	2000      	movle	r0, #0
 8000f6a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000f6e:	bd70      	pople	{r4, r5, r6, pc}
 8000f70:	f1c4 0400 	rsb	r4, r4, #0
 8000f74:	3c20      	subs	r4, #32
 8000f76:	da35      	bge.n	8000fe4 <__aeabi_dmul+0x164>
 8000f78:	340c      	adds	r4, #12
 8000f7a:	dc1b      	bgt.n	8000fb4 <__aeabi_dmul+0x134>
 8000f7c:	f104 0414 	add.w	r4, r4, #20
 8000f80:	f1c4 0520 	rsb	r5, r4, #32
 8000f84:	fa00 f305 	lsl.w	r3, r0, r5
 8000f88:	fa20 f004 	lsr.w	r0, r0, r4
 8000f8c:	fa01 f205 	lsl.w	r2, r1, r5
 8000f90:	ea40 0002 	orr.w	r0, r0, r2
 8000f94:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000f98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000f9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000fa0:	fa21 f604 	lsr.w	r6, r1, r4
 8000fa4:	eb42 0106 	adc.w	r1, r2, r6
 8000fa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000fac:	bf08      	it	eq
 8000fae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	f1c4 040c 	rsb	r4, r4, #12
 8000fb8:	f1c4 0520 	rsb	r5, r4, #32
 8000fbc:	fa00 f304 	lsl.w	r3, r0, r4
 8000fc0:	fa20 f005 	lsr.w	r0, r0, r5
 8000fc4:	fa01 f204 	lsl.w	r2, r1, r4
 8000fc8:	ea40 0002 	orr.w	r0, r0, r2
 8000fcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000fd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000fd4:	f141 0100 	adc.w	r1, r1, #0
 8000fd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000fdc:	bf08      	it	eq
 8000fde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
 8000fe4:	f1c4 0520 	rsb	r5, r4, #32
 8000fe8:	fa00 f205 	lsl.w	r2, r0, r5
 8000fec:	ea4e 0e02 	orr.w	lr, lr, r2
 8000ff0:	fa20 f304 	lsr.w	r3, r0, r4
 8000ff4:	fa01 f205 	lsl.w	r2, r1, r5
 8000ff8:	ea43 0302 	orr.w	r3, r3, r2
 8000ffc:	fa21 f004 	lsr.w	r0, r1, r4
 8001000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001004:	fa21 f204 	lsr.w	r2, r1, r4
 8001008:	ea20 0002 	bic.w	r0, r0, r2
 800100c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8001010:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001014:	bf08      	it	eq
 8001016:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800101a:	bd70      	pop	{r4, r5, r6, pc}
 800101c:	f094 0f00 	teq	r4, #0
 8001020:	d10f      	bne.n	8001042 <__aeabi_dmul+0x1c2>
 8001022:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8001026:	0040      	lsls	r0, r0, #1
 8001028:	eb41 0101 	adc.w	r1, r1, r1
 800102c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001030:	bf08      	it	eq
 8001032:	3c01      	subeq	r4, #1
 8001034:	d0f7      	beq.n	8001026 <__aeabi_dmul+0x1a6>
 8001036:	ea41 0106 	orr.w	r1, r1, r6
 800103a:	f095 0f00 	teq	r5, #0
 800103e:	bf18      	it	ne
 8001040:	4770      	bxne	lr
 8001042:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8001046:	0052      	lsls	r2, r2, #1
 8001048:	eb43 0303 	adc.w	r3, r3, r3
 800104c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001050:	bf08      	it	eq
 8001052:	3d01      	subeq	r5, #1
 8001054:	d0f7      	beq.n	8001046 <__aeabi_dmul+0x1c6>
 8001056:	ea43 0306 	orr.w	r3, r3, r6
 800105a:	4770      	bx	lr
 800105c:	ea94 0f0c 	teq	r4, ip
 8001060:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001064:	bf18      	it	ne
 8001066:	ea95 0f0c 	teqne	r5, ip
 800106a:	d00c      	beq.n	8001086 <__aeabi_dmul+0x206>
 800106c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001070:	bf18      	it	ne
 8001072:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001076:	d1d1      	bne.n	800101c <__aeabi_dmul+0x19c>
 8001078:	ea81 0103 	eor.w	r1, r1, r3
 800107c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001080:	f04f 0000 	mov.w	r0, #0
 8001084:	bd70      	pop	{r4, r5, r6, pc}
 8001086:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800108a:	bf06      	itte	eq
 800108c:	4610      	moveq	r0, r2
 800108e:	4619      	moveq	r1, r3
 8001090:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001094:	d019      	beq.n	80010ca <__aeabi_dmul+0x24a>
 8001096:	ea94 0f0c 	teq	r4, ip
 800109a:	d102      	bne.n	80010a2 <__aeabi_dmul+0x222>
 800109c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80010a0:	d113      	bne.n	80010ca <__aeabi_dmul+0x24a>
 80010a2:	ea95 0f0c 	teq	r5, ip
 80010a6:	d105      	bne.n	80010b4 <__aeabi_dmul+0x234>
 80010a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80010ac:	bf1c      	itt	ne
 80010ae:	4610      	movne	r0, r2
 80010b0:	4619      	movne	r1, r3
 80010b2:	d10a      	bne.n	80010ca <__aeabi_dmul+0x24a>
 80010b4:	ea81 0103 	eor.w	r1, r1, r3
 80010b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80010bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80010c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80010c4:	f04f 0000 	mov.w	r0, #0
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
 80010ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80010ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80010d2:	bd70      	pop	{r4, r5, r6, pc}

080010d4 <__aeabi_ddiv>:
 80010d4:	b570      	push	{r4, r5, r6, lr}
 80010d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80010da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80010de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80010e2:	bf1d      	ittte	ne
 80010e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80010e8:	ea94 0f0c 	teqne	r4, ip
 80010ec:	ea95 0f0c 	teqne	r5, ip
 80010f0:	f000 f8a7 	bleq	8001242 <__aeabi_ddiv+0x16e>
 80010f4:	eba4 0405 	sub.w	r4, r4, r5
 80010f8:	ea81 0e03 	eor.w	lr, r1, r3
 80010fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001100:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001104:	f000 8088 	beq.w	8001218 <__aeabi_ddiv+0x144>
 8001108:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800110c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8001110:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8001114:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8001118:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800111c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8001120:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8001124:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8001128:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800112c:	429d      	cmp	r5, r3
 800112e:	bf08      	it	eq
 8001130:	4296      	cmpeq	r6, r2
 8001132:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8001136:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800113a:	d202      	bcs.n	8001142 <__aeabi_ddiv+0x6e>
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	ea4f 0232 	mov.w	r2, r2, rrx
 8001142:	1ab6      	subs	r6, r6, r2
 8001144:	eb65 0503 	sbc.w	r5, r5, r3
 8001148:	085b      	lsrs	r3, r3, #1
 800114a:	ea4f 0232 	mov.w	r2, r2, rrx
 800114e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001152:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8001156:	ebb6 0e02 	subs.w	lr, r6, r2
 800115a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800115e:	bf22      	ittt	cs
 8001160:	1ab6      	subcs	r6, r6, r2
 8001162:	4675      	movcs	r5, lr
 8001164:	ea40 000c 	orrcs.w	r0, r0, ip
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	ea4f 0232 	mov.w	r2, r2, rrx
 800116e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001172:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001176:	bf22      	ittt	cs
 8001178:	1ab6      	subcs	r6, r6, r2
 800117a:	4675      	movcs	r5, lr
 800117c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001180:	085b      	lsrs	r3, r3, #1
 8001182:	ea4f 0232 	mov.w	r2, r2, rrx
 8001186:	ebb6 0e02 	subs.w	lr, r6, r2
 800118a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800118e:	bf22      	ittt	cs
 8001190:	1ab6      	subcs	r6, r6, r2
 8001192:	4675      	movcs	r5, lr
 8001194:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001198:	085b      	lsrs	r3, r3, #1
 800119a:	ea4f 0232 	mov.w	r2, r2, rrx
 800119e:	ebb6 0e02 	subs.w	lr, r6, r2
 80011a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80011a6:	bf22      	ittt	cs
 80011a8:	1ab6      	subcs	r6, r6, r2
 80011aa:	4675      	movcs	r5, lr
 80011ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80011b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80011b4:	d018      	beq.n	80011e8 <__aeabi_ddiv+0x114>
 80011b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80011ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80011be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80011c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80011c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80011ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80011ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80011d2:	d1c0      	bne.n	8001156 <__aeabi_ddiv+0x82>
 80011d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80011d8:	d10b      	bne.n	80011f2 <__aeabi_ddiv+0x11e>
 80011da:	ea41 0100 	orr.w	r1, r1, r0
 80011de:	f04f 0000 	mov.w	r0, #0
 80011e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80011e6:	e7b6      	b.n	8001156 <__aeabi_ddiv+0x82>
 80011e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80011ec:	bf04      	itt	eq
 80011ee:	4301      	orreq	r1, r0
 80011f0:	2000      	moveq	r0, #0
 80011f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80011f6:	bf88      	it	hi
 80011f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80011fc:	f63f aeaf 	bhi.w	8000f5e <__aeabi_dmul+0xde>
 8001200:	ebb5 0c03 	subs.w	ip, r5, r3
 8001204:	bf04      	itt	eq
 8001206:	ebb6 0c02 	subseq.w	ip, r6, r2
 800120a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800120e:	f150 0000 	adcs.w	r0, r0, #0
 8001212:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001216:	bd70      	pop	{r4, r5, r6, pc}
 8001218:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800121c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8001220:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8001224:	bfc2      	ittt	gt
 8001226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800122a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800122e:	bd70      	popgt	{r4, r5, r6, pc}
 8001230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001234:	f04f 0e00 	mov.w	lr, #0
 8001238:	3c01      	subs	r4, #1
 800123a:	e690      	b.n	8000f5e <__aeabi_dmul+0xde>
 800123c:	ea45 0e06 	orr.w	lr, r5, r6
 8001240:	e68d      	b.n	8000f5e <__aeabi_dmul+0xde>
 8001242:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8001246:	ea94 0f0c 	teq	r4, ip
 800124a:	bf08      	it	eq
 800124c:	ea95 0f0c 	teqeq	r5, ip
 8001250:	f43f af3b 	beq.w	80010ca <__aeabi_dmul+0x24a>
 8001254:	ea94 0f0c 	teq	r4, ip
 8001258:	d10a      	bne.n	8001270 <__aeabi_ddiv+0x19c>
 800125a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800125e:	f47f af34 	bne.w	80010ca <__aeabi_dmul+0x24a>
 8001262:	ea95 0f0c 	teq	r5, ip
 8001266:	f47f af25 	bne.w	80010b4 <__aeabi_dmul+0x234>
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	e72c      	b.n	80010ca <__aeabi_dmul+0x24a>
 8001270:	ea95 0f0c 	teq	r5, ip
 8001274:	d106      	bne.n	8001284 <__aeabi_ddiv+0x1b0>
 8001276:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800127a:	f43f aefd 	beq.w	8001078 <__aeabi_dmul+0x1f8>
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	e722      	b.n	80010ca <__aeabi_dmul+0x24a>
 8001284:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001288:	bf18      	it	ne
 800128a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800128e:	f47f aec5 	bne.w	800101c <__aeabi_dmul+0x19c>
 8001292:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8001296:	f47f af0d 	bne.w	80010b4 <__aeabi_dmul+0x234>
 800129a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800129e:	f47f aeeb 	bne.w	8001078 <__aeabi_dmul+0x1f8>
 80012a2:	e712      	b.n	80010ca <__aeabi_dmul+0x24a>

080012a4 <__gedf2>:
 80012a4:	f04f 3cff 	mov.w	ip, #4294967295
 80012a8:	e006      	b.n	80012b8 <__cmpdf2+0x4>
 80012aa:	bf00      	nop

080012ac <__ledf2>:
 80012ac:	f04f 0c01 	mov.w	ip, #1
 80012b0:	e002      	b.n	80012b8 <__cmpdf2+0x4>
 80012b2:	bf00      	nop

080012b4 <__cmpdf2>:
 80012b4:	f04f 0c01 	mov.w	ip, #1
 80012b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80012bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80012c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80012c8:	bf18      	it	ne
 80012ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80012ce:	d01b      	beq.n	8001308 <__cmpdf2+0x54>
 80012d0:	b001      	add	sp, #4
 80012d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80012d6:	bf0c      	ite	eq
 80012d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80012dc:	ea91 0f03 	teqne	r1, r3
 80012e0:	bf02      	ittt	eq
 80012e2:	ea90 0f02 	teqeq	r0, r2
 80012e6:	2000      	moveq	r0, #0
 80012e8:	4770      	bxeq	lr
 80012ea:	f110 0f00 	cmn.w	r0, #0
 80012ee:	ea91 0f03 	teq	r1, r3
 80012f2:	bf58      	it	pl
 80012f4:	4299      	cmppl	r1, r3
 80012f6:	bf08      	it	eq
 80012f8:	4290      	cmpeq	r0, r2
 80012fa:	bf2c      	ite	cs
 80012fc:	17d8      	asrcs	r0, r3, #31
 80012fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8001302:	f040 0001 	orr.w	r0, r0, #1
 8001306:	4770      	bx	lr
 8001308:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800130c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001310:	d102      	bne.n	8001318 <__cmpdf2+0x64>
 8001312:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001316:	d107      	bne.n	8001328 <__cmpdf2+0x74>
 8001318:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800131c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001320:	d1d6      	bne.n	80012d0 <__cmpdf2+0x1c>
 8001322:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001326:	d0d3      	beq.n	80012d0 <__cmpdf2+0x1c>
 8001328:	f85d 0b04 	ldr.w	r0, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop

08001330 <__aeabi_cdrcmple>:
 8001330:	4684      	mov	ip, r0
 8001332:	4610      	mov	r0, r2
 8001334:	4662      	mov	r2, ip
 8001336:	468c      	mov	ip, r1
 8001338:	4619      	mov	r1, r3
 800133a:	4663      	mov	r3, ip
 800133c:	e000      	b.n	8001340 <__aeabi_cdcmpeq>
 800133e:	bf00      	nop

08001340 <__aeabi_cdcmpeq>:
 8001340:	b501      	push	{r0, lr}
 8001342:	f7ff ffb7 	bl	80012b4 <__cmpdf2>
 8001346:	2800      	cmp	r0, #0
 8001348:	bf48      	it	mi
 800134a:	f110 0f00 	cmnmi.w	r0, #0
 800134e:	bd01      	pop	{r0, pc}

08001350 <__aeabi_dcmpeq>:
 8001350:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001354:	f7ff fff4 	bl	8001340 <__aeabi_cdcmpeq>
 8001358:	bf0c      	ite	eq
 800135a:	2001      	moveq	r0, #1
 800135c:	2000      	movne	r0, #0
 800135e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001362:	bf00      	nop

08001364 <__aeabi_dcmplt>:
 8001364:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001368:	f7ff ffea 	bl	8001340 <__aeabi_cdcmpeq>
 800136c:	bf34      	ite	cc
 800136e:	2001      	movcc	r0, #1
 8001370:	2000      	movcs	r0, #0
 8001372:	f85d fb08 	ldr.w	pc, [sp], #8
 8001376:	bf00      	nop

08001378 <__aeabi_dcmple>:
 8001378:	f84d ed08 	str.w	lr, [sp, #-8]!
 800137c:	f7ff ffe0 	bl	8001340 <__aeabi_cdcmpeq>
 8001380:	bf94      	ite	ls
 8001382:	2001      	movls	r0, #1
 8001384:	2000      	movhi	r0, #0
 8001386:	f85d fb08 	ldr.w	pc, [sp], #8
 800138a:	bf00      	nop

0800138c <__aeabi_dcmpge>:
 800138c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001390:	f7ff ffce 	bl	8001330 <__aeabi_cdrcmple>
 8001394:	bf94      	ite	ls
 8001396:	2001      	movls	r0, #1
 8001398:	2000      	movhi	r0, #0
 800139a:	f85d fb08 	ldr.w	pc, [sp], #8
 800139e:	bf00      	nop

080013a0 <__aeabi_dcmpgt>:
 80013a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80013a4:	f7ff ffc4 	bl	8001330 <__aeabi_cdrcmple>
 80013a8:	bf34      	ite	cc
 80013aa:	2001      	movcc	r0, #1
 80013ac:	2000      	movcs	r0, #0
 80013ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80013b2:	bf00      	nop

080013b4 <__aeabi_dcmpun>:
 80013b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80013b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80013bc:	d102      	bne.n	80013c4 <__aeabi_dcmpun+0x10>
 80013be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80013c2:	d10a      	bne.n	80013da <__aeabi_dcmpun+0x26>
 80013c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80013c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80013cc:	d102      	bne.n	80013d4 <__aeabi_dcmpun+0x20>
 80013ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80013d2:	d102      	bne.n	80013da <__aeabi_dcmpun+0x26>
 80013d4:	f04f 0000 	mov.w	r0, #0
 80013d8:	4770      	bx	lr
 80013da:	f04f 0001 	mov.w	r0, #1
 80013de:	4770      	bx	lr

080013e0 <__aeabi_d2iz>:
 80013e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80013e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80013e8:	d215      	bcs.n	8001416 <__aeabi_d2iz+0x36>
 80013ea:	d511      	bpl.n	8001410 <__aeabi_d2iz+0x30>
 80013ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80013f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80013f4:	d912      	bls.n	800141c <__aeabi_d2iz+0x3c>
 80013f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80013fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001402:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001406:	fa23 f002 	lsr.w	r0, r3, r2
 800140a:	bf18      	it	ne
 800140c:	4240      	negne	r0, r0
 800140e:	4770      	bx	lr
 8001410:	f04f 0000 	mov.w	r0, #0
 8001414:	4770      	bx	lr
 8001416:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800141a:	d105      	bne.n	8001428 <__aeabi_d2iz+0x48>
 800141c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8001420:	bf08      	it	eq
 8001422:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001426:	4770      	bx	lr
 8001428:	f04f 0000 	mov.w	r0, #0
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop

08001430 <__do_global_dtors_aux>:
 8001430:	b510      	push	{r4, lr}
 8001432:	4c05      	ldr	r4, [pc, #20]	; (8001448 <__do_global_dtors_aux+0x18>)
 8001434:	7823      	ldrb	r3, [r4, #0]
 8001436:	b933      	cbnz	r3, 8001446 <__do_global_dtors_aux+0x16>
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__do_global_dtors_aux+0x1c>)
 800143a:	b113      	cbz	r3, 8001442 <__do_global_dtors_aux+0x12>
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <__do_global_dtors_aux+0x20>)
 800143e:	e000      	b.n	8001442 <__do_global_dtors_aux+0x12>
 8001440:	bf00      	nop
 8001442:	2301      	movs	r3, #1
 8001444:	7023      	strb	r3, [r4, #0]
 8001446:	bd10      	pop	{r4, pc}
 8001448:	20000dd0 	.word	0x20000dd0
 800144c:	00000000 	.word	0x00000000
 8001450:	080060e0 	.word	0x080060e0

08001454 <frame_dummy>:
 8001454:	b508      	push	{r3, lr}
 8001456:	4b03      	ldr	r3, [pc, #12]	; (8001464 <frame_dummy+0x10>)
 8001458:	b11b      	cbz	r3, 8001462 <frame_dummy+0xe>
 800145a:	4903      	ldr	r1, [pc, #12]	; (8001468 <frame_dummy+0x14>)
 800145c:	4803      	ldr	r0, [pc, #12]	; (800146c <frame_dummy+0x18>)
 800145e:	e000      	b.n	8001462 <frame_dummy+0xe>
 8001460:	bf00      	nop
 8001462:	bd08      	pop	{r3, pc}
 8001464:	00000000 	.word	0x00000000
 8001468:	20000dd4 	.word	0x20000dd4
 800146c:	080060e0 	.word	0x080060e0

08001470 <is_valid_flash_addr>:
    \retval     result of state(1: addr is valid, or 0: addr is not valid)
*/
int is_valid_flash_addr(uint32_t addr)
{
    int bvalid = 0;
    if ((addr >= FLASH_BASE) && (addr < (FLASH_BASE + flash_total_size()))) {
 8001470:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001474:	d30d      	bcc.n	8001492 <is_valid_flash_addr+0x22>
    return (OBSTAT_NQSPI() == SET);
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <is_valid_flash_addr+0x28>)
 8001478:	681b      	ldr	r3, [r3, #0]
    \param[out] none
    \retval     flash total size
*/
uint32_t flash_total_size(void)
{
    return FLASH_TOTAL_SIZE;
 800147a:	f013 0f10 	tst.w	r3, #16
 800147e:	bf14      	ite	ne
 8001480:	f04f 6302 	movne.w	r3, #136314880	; 0x8200000
 8001484:	f04f 6320 	moveq.w	r3, #167772160	; 0xa000000
    if ((addr >= FLASH_BASE) && (addr < (FLASH_BASE + flash_total_size()))) {
 8001488:	4298      	cmp	r0, r3
 800148a:	bf2c      	ite	cs
 800148c:	2000      	movcs	r0, #0
 800148e:	2001      	movcc	r0, #1
 8001490:	4770      	bx	lr
    int bvalid = 0;
 8001492:	2000      	movs	r0, #0
}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	4002201c 	.word	0x4002201c

0800149c <flash_nodec_config>:
    return (OBSTAT_NQSPI() == SET);
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <flash_nodec_config+0x38>)
 800149e:	681b      	ldr	r3, [r3, #0]
    \param[out] none
    \retval     none
*/
void flash_nodec_config(uint32_t nd_idx, uint32_t start_page, uint32_t end_page)
{
    if (is_sip_flash()) {
 80014a0:	06db      	lsls	r3, r3, #27
 80014a2:	d400      	bmi.n	80014a6 <flash_nodec_config+0xa>
 80014a4:	4770      	bx	lr
{
 80014a6:	b570      	push	{r4, r5, r6, lr}
 80014a8:	460c      	mov	r4, r1
 80014aa:	4615      	mov	r5, r2
        /* unlock the flash program erase controller */
        fmc_unlock();
 80014ac:	4606      	mov	r6, r0
 80014ae:	f001 f9f1 	bl	8002894 <fmc_unlock>
        /* unlock the option byte operation (include SECWM/HDP/WRP/NODEC/OFRG/OFVR) */
        ob_unlock();
 80014b2:	f001 fabd 	bl	8002a30 <ob_unlock>
        /* clear pending flags */
        fmc_flag_clear(FMC_FLAG_END | FMC_FLAG_WPERR);
 80014b6:	2030      	movs	r0, #48	; 0x30
 80014b8:	f001 fb10 	bl	8002adc <fmc_flag_clear>

        /* set no OTFDEC region for sip flash */
        fmc_no_rtdec_config(start_page, end_page, nd_idx);
 80014bc:	4632      	mov	r2, r6
 80014be:	4629      	mov	r1, r5
 80014c0:	4620      	mov	r0, r4
 80014c2:	f001 facf 	bl	8002a64 <fmc_no_rtdec_config>

        /* lock the option byte operation */
        ob_lock();
 80014c6:	f001 fac5 	bl	8002a54 <ob_lock>
        /* lock the flash program erase controller */
        fmc_lock();
    }
}
 80014ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        fmc_lock();
 80014ce:	f001 b9f3 	b.w	80028b8 <fmc_lock>
 80014d2:	bf00      	nop
 80014d4:	4002201c 	.word	0x4002201c

080014d8 <flash_offset_mapping>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void flash_offset_mapping(void)
{
 80014d8:	b508      	push	{r3, lr}
    fmc_unlock();
 80014da:	f001 f9db 	bl	8002894 <fmc_unlock>
    ob_unlock();
 80014de:	f001 faa7 	bl	8002a30 <ob_unlock>
    fmc_offset_region_config(RE_IMG_0_PROT_OFFSET >> 12, (RE_IMG_1_PROT_OFFSET >> 12) - 1);
 80014e2:	21ff      	movs	r1, #255	; 0xff
 80014e4:	200a      	movs	r0, #10
 80014e6:	f001 fadf 	bl	8002aa8 <fmc_offset_region_config>
    fmc_offset_value_config((RE_IMG_1_PROT_OFFSET - RE_IMG_0_PROT_OFFSET) >> 12);
 80014ea:	20f6      	movs	r0, #246	; 0xf6
 80014ec:	f001 faec 	bl	8002ac8 <fmc_offset_value_config>
    ob_lock();
 80014f0:	f001 fab0 	bl	8002a54 <ob_lock>
    fmc_lock();
}
 80014f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    fmc_lock();
 80014f8:	f001 b9de 	b.w	80028b8 <fmc_lock>

080014fc <flash_init>:
    \param[in]  none
    \param[out] none
    \retval     0
*/
int flash_init(void)
{
 80014fc:	b508      	push	{r3, lr}
    return (OBSTAT_NQSPI() == SET);
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <flash_init+0x18>)
 8001500:	681b      	ldr	r3, [r3, #0]
    if (!is_sip_flash()) {
 8001502:	06db      	lsls	r3, r3, #27
 8001504:	d501      	bpl.n	800150a <flash_init+0xe>
        qspi_flash_config(3);
    }
    return 0;
}
 8001506:	2000      	movs	r0, #0
 8001508:	bd08      	pop	{r3, pc}
        qspi_flash_config(3);
 800150a:	2003      	movs	r0, #3
 800150c:	f004 faac 	bl	8005a68 <__qspi_flash_config_veneer>
}
 8001510:	2000      	movs	r0, #0
 8001512:	bd08      	pop	{r3, pc}
 8001514:	4002201c 	.word	0x4002201c

08001518 <flash_read>:
    \param[out] data: pointer to the buffer store flash read data
    \param[in]  len: length of data read from flash
    \retval     result of read flash(0: read ok, or -1: read error)
*/
int flash_read(uint32_t offset, void *data, int len)
{
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return (OBSTAT_NQSPI() == SET);
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <flash_read+0xa0>)
 800151c:	681c      	ldr	r4, [r3, #0]
    return FLASH_TOTAL_SIZE;
 800151e:	f014 0f10 	tst.w	r4, #16
 8001522:	bf14      	ite	ne
 8001524:	f44f 1500 	movne.w	r5, #2097152	; 0x200000
 8001528:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
    if (offset < flash_total_size()) {
 800152c:	42a8      	cmp	r0, r5
 800152e:	d302      	bcc.n	8001536 <flash_read+0x1e>
    uint32_t dst = (uint32_t)data;
    uint32_t left;

    if (!is_valid_flash_offset(offset) || data == NULL
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
        return -1;
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
        }
        if (left > 0)
            memcpy((uint8_t *)(dst + len), (uint8_t *)(FLASH_BASE + offset + len), left);
    }
    return 0;
}
 8001534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 1;
 8001536:	460c      	mov	r4, r1
    if (!is_valid_flash_offset(offset) || data == NULL
 8001538:	2900      	cmp	r1, #0
 800153a:	d0f9      	beq.n	8001530 <flash_read+0x18>
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 800153c:	2a00      	cmp	r2, #0
 800153e:	ddf7      	ble.n	8001530 <flash_read+0x18>
    return (OBSTAT_NQSPI() == SET);
 8001540:	6819      	ldr	r1, [r3, #0]
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 8001542:	1813      	adds	r3, r2, r0
    return FLASH_TOTAL_SIZE;
 8001544:	f011 0f10 	tst.w	r1, #16
 8001548:	bf14      	ite	ne
 800154a:	f44f 1100 	movne.w	r1, #2097152	; 0x200000
 800154e:	f04f 7100 	moveq.w	r1, #33554432	; 0x2000000
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 8001552:	3b01      	subs	r3, #1
    if (offset < flash_total_size()) {
 8001554:	428b      	cmp	r3, r1
 8001556:	d2eb      	bcs.n	8001530 <flash_read+0x18>
    if ((offset & 3) || (dst & 3)) {
 8001558:	ea44 0300 	orr.w	r3, r4, r0
 800155c:	079b      	lsls	r3, r3, #30
 800155e:	d00d      	beq.n	800157c <flash_read+0x64>
 8001560:	f100 6000 	add.w	r0, r0, #134217728	; 0x8000000
 8001564:	3001      	adds	r0, #1
 8001566:	3a01      	subs	r2, #1
            ((uint8_t *)data)[i] = *(uint8_t *)(FLASH_BASE + offset + i);
 8001568:	1b00      	subs	r0, r0, r4
 800156a:	4422      	add	r2, r4
 800156c:	1e61      	subs	r1, r4, #1
 800156e:	5c43      	ldrb	r3, [r0, r1]
 8001570:	f801 3f01 	strb.w	r3, [r1, #1]!
        for (i = 0; i < len; i++) {
 8001574:	428a      	cmp	r2, r1
 8001576:	d1fa      	bne.n	800156e <flash_read+0x56>
    return 0;
 8001578:	2000      	movs	r0, #0
}
 800157a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0; i < len; i += 4) {
 800157c:	f032 0303 	bics.w	r3, r2, #3
        left = (len & 3);
 8001580:	f002 0c03 	and.w	ip, r2, #3
        for (i = 0; i < len; i += 4) {
 8001584:	d00c      	beq.n	80015a0 <flash_read+0x88>
 8001586:	f100 6600 	add.w	r6, r0, #134217728	; 0x8000000
 800158a:	3604      	adds	r6, #4
            *(uint32_t *)(dst + i) = *(uint32_t *)(FLASH_BASE + offset + i);
 800158c:	1b36      	subs	r6, r6, r4
 800158e:	1f21      	subs	r1, r4, #4
 8001590:	f1c4 0704 	rsb	r7, r4, #4
 8001594:	5875      	ldr	r5, [r6, r1]
 8001596:	f841 5f04 	str.w	r5, [r1, #4]!
        for (i = 0; i < len; i += 4) {
 800159a:	187d      	adds	r5, r7, r1
 800159c:	42ab      	cmp	r3, r5
 800159e:	d8f9      	bhi.n	8001594 <flash_read+0x7c>
        if (left > 0)
 80015a0:	f1bc 0f00 	cmp.w	ip, #0
 80015a4:	d0e8      	beq.n	8001578 <flash_read+0x60>
            memcpy((uint8_t *)(dst + len), (uint8_t *)(FLASH_BASE + offset + len), left);
 80015a6:	f100 6100 	add.w	r1, r0, #134217728	; 0x8000000
 80015aa:	4662      	mov	r2, ip
 80015ac:	4419      	add	r1, r3
 80015ae:	18e0      	adds	r0, r4, r3
 80015b0:	f001 fdb6 	bl	8003120 <memcpy>
 80015b4:	e7e0      	b.n	8001578 <flash_read+0x60>
 80015b6:	bf00      	nop
 80015b8:	4002201c 	.word	0x4002201c

080015bc <flash_indirect_read>:
    \param[out] data: pointer to the buffer store flash read data
    \param[in]  len: length of data read from flash
    \retval     result of read flash(0: read ok, or -1: read error)
*/
int flash_indirect_read(uint32_t offset, void *data, int len)
{
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (ICACHE_CTL & ICACHE_CTL_EN)
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <flash_indirect_read+0x8c>)
{
 80015c0:	4605      	mov	r5, r0
    if (ICACHE_CTL & ICACHE_CTL_EN)
 80015c2:	681c      	ldr	r4, [r3, #0]
{
 80015c4:	460f      	mov	r7, r1
    if (ICACHE_CTL & ICACHE_CTL_EN)
 80015c6:	f014 0401 	ands.w	r4, r4, #1
{
 80015ca:	4616      	mov	r6, r2
 80015cc:	b083      	sub	sp, #12
    if (ICACHE_CTL & ICACHE_CTL_EN)
 80015ce:	d002      	beq.n	80015d6 <flash_indirect_read+0x1a>
    icache_disable();
 80015d0:	f001 fb1a 	bl	8002c08 <icache_disable>
    int cache_enabled = 0;
    int ret;

    if (is_flash_cache_enabled()) {
        flash_cache_disable();
        cache_enabled = 1;
 80015d4:	2401      	movs	r4, #1
    return (OBSTAT_NQSPI() == SET);
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <flash_indirect_read+0x90>)
 80015d8:	6818      	ldr	r0, [r3, #0]
    }

    if (is_sip_flash()) {
 80015da:	06c2      	lsls	r2, r0, #27
 80015dc:	d42d      	bmi.n	800163a <flash_indirect_read+0x7e>
    return (OBSTAT_NQSPI() == SET);
 80015de:	681a      	ldr	r2, [r3, #0]
    return FLASH_TOTAL_SIZE;
 80015e0:	f012 0f10 	tst.w	r2, #16
 80015e4:	bf14      	ite	ne
 80015e6:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 80015ea:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
    if (offset < flash_total_size()) {
 80015ee:	4295      	cmp	r5, r2
 80015f0:	d304      	bcc.n	80015fc <flash_indirect_read+0x40>
        ret = flash_read(offset, data, len);

    } else {
        if (!is_valid_flash_offset(offset) || data == NULL
            || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
            ret = -1;
 80015f2:	f04f 30ff 	mov.w	r0, #4294967295
        ret = qspi_flash_read(FLASH_START_QSPI + offset, data, len);
        __enable_irq();
    }

Exit:
    if (cache_enabled)
 80015f6:	b9d4      	cbnz	r4, 800162e <flash_indirect_read+0x72>
        flash_cache_enable();
    return ret;
}
 80015f8:	b003      	add	sp, #12
 80015fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!is_valid_flash_offset(offset) || data == NULL
 80015fc:	2f00      	cmp	r7, #0
 80015fe:	d0f8      	beq.n	80015f2 <flash_indirect_read+0x36>
            || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 8001600:	2e00      	cmp	r6, #0
 8001602:	ddf6      	ble.n	80015f2 <flash_indirect_read+0x36>
    return (OBSTAT_NQSPI() == SET);
 8001604:	681a      	ldr	r2, [r3, #0]
            || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 8001606:	1e73      	subs	r3, r6, #1
    return FLASH_TOTAL_SIZE;
 8001608:	f012 0f10 	tst.w	r2, #16
 800160c:	bf14      	ite	ne
 800160e:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8001612:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
            || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 8001616:	442b      	add	r3, r5
    if (offset < flash_total_size()) {
 8001618:	4293      	cmp	r3, r2
 800161a:	d2ea      	bcs.n	80015f2 <flash_indirect_read+0x36>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
        ret = qspi_flash_read(FLASH_START_QSPI + offset, data, len);
 800161e:	4632      	mov	r2, r6
 8001620:	4639      	mov	r1, r7
 8001622:	4628      	mov	r0, r5
 8001624:	f004 f9f8 	bl	8005a18 <__qspi_flash_read_veneer>
  __ASM volatile ("cpsie i" : : : "memory");
 8001628:	b662      	cpsie	i
    if (cache_enabled)
 800162a:	2c00      	cmp	r4, #0
 800162c:	d0e4      	beq.n	80015f8 <flash_indirect_read+0x3c>
 800162e:	9001      	str	r0, [sp, #4]
    icache_enable();
 8001630:	f001 fade 	bl	8002bf0 <icache_enable>
 8001634:	9801      	ldr	r0, [sp, #4]
}
 8001636:	b003      	add	sp, #12
 8001638:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = flash_read(offset, data, len);
 800163a:	4632      	mov	r2, r6
 800163c:	4639      	mov	r1, r7
 800163e:	4628      	mov	r0, r5
 8001640:	f7ff ff6a 	bl	8001518 <flash_read>
 8001644:	e7d7      	b.n	80015f6 <flash_indirect_read+0x3a>
 8001646:	bf00      	nop
 8001648:	40080000 	.word	0x40080000
 800164c:	4002201c 	.word	0x4002201c

08001650 <flash_write>:
    \param[in]  len: length of data write to flash
    \param[out] none
    \retval     result of write flash(0: write ok, or -1: write error)
*/
int flash_write(uint32_t offset, const void *data, int len)
{
 8001650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return (OBSTAT_NQSPI() == SET);
 8001654:	4f59      	ldr	r7, [pc, #356]	; (80017bc <flash_write+0x16c>)
{
 8001656:	b083      	sub	sp, #12
    return (OBSTAT_NQSPI() == SET);
 8001658:	683b      	ldr	r3, [r7, #0]
    return FLASH_TOTAL_SIZE;
 800165a:	f013 0f10 	tst.w	r3, #16
 800165e:	bf14      	ite	ne
 8001660:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 8001664:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
    if (offset < flash_total_size()) {
 8001668:	4298      	cmp	r0, r3
 800166a:	d304      	bcc.n	8001676 <flash_write+0x26>
    uint8_t *data_u8 = (uint8_t *)data;
    uint32_t base_addr;

    if (!is_valid_flash_offset(offset) || data == NULL
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
        return -1;
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
            data_u8 += size_to_program;
            len -= size_to_program;
        }
    }
    return 0;
}
 8001670:	b003      	add	sp, #12
 8001672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return 1;
 8001676:	460e      	mov	r6, r1
    if (!is_valid_flash_offset(offset) || data == NULL
 8001678:	2900      	cmp	r1, #0
 800167a:	d0f7      	beq.n	800166c <flash_write+0x1c>
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 800167c:	2a00      	cmp	r2, #0
 800167e:	4614      	mov	r4, r2
 8001680:	ddf4      	ble.n	800166c <flash_write+0x1c>
    return (OBSTAT_NQSPI() == SET);
 8001682:	683a      	ldr	r2, [r7, #0]
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 8001684:	1823      	adds	r3, r4, r0
    return FLASH_TOTAL_SIZE;
 8001686:	f012 0f10 	tst.w	r2, #16
 800168a:	bf14      	ite	ne
 800168c:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 8001690:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 8001694:	3b01      	subs	r3, #1
    if (offset < flash_total_size()) {
 8001696:	4293      	cmp	r3, r2
 8001698:	4605      	mov	r5, r0
 800169a:	d2e7      	bcs.n	800166c <flash_write+0x1c>
    return (OBSTAT_NQSPI() == SET);
 800169c:	683b      	ldr	r3, [r7, #0]
    if (is_sip_flash()) {
 800169e:	06db      	lsls	r3, r3, #27
 80016a0:	d416      	bmi.n	80016d0 <flash_write+0x80>
        if (page_offset != 0) {
 80016a2:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
 80016a6:	d175      	bne.n	8001794 <flash_write+0x144>
            size_to_program = (len > FLASH_QSPI_PAGE_SIZE) ? FLASH_QSPI_PAGE_SIZE : len;
 80016a8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 80016ac:	4627      	mov	r7, r4
 80016ae:	bfa8      	it	ge
 80016b0:	f44f 7780 	movge.w	r7, #256	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
 80016b4:	b672      	cpsid	i
            qspi_flash_page_program((base_addr + offset), data_u8, size_to_program);
 80016b6:	463a      	mov	r2, r7
 80016b8:	4631      	mov	r1, r6
 80016ba:	4628      	mov	r0, r5
 80016bc:	f004 f9e4 	bl	8005a88 <__qspi_flash_page_program_veneer>
  __ASM volatile ("cpsie i" : : : "memory");
 80016c0:	b662      	cpsie	i
            len -= size_to_program;
 80016c2:	1be4      	subs	r4, r4, r7
        while (len > 0) {
 80016c4:	2c00      	cmp	r4, #0
            offset += size_to_program;
 80016c6:	443d      	add	r5, r7
            data_u8 += size_to_program;
 80016c8:	443e      	add	r6, r7
        while (len > 0) {
 80016ca:	dced      	bgt.n	80016a8 <flash_write+0x58>
    return 0;
 80016cc:	2000      	movs	r0, #0
 80016ce:	e7cf      	b.n	8001670 <flash_write+0x20>
        uint8_t val[4] = {0xFF, 0xFF, 0xFF, 0xFF};
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
 80016d4:	9301      	str	r3, [sp, #4]
        fmc_unlock();
 80016d6:	f001 f8dd 	bl	8002894 <fmc_unlock>
        fmc_flag_clear(FMC_FLAG_END | FMC_FLAG_WPERR);
 80016da:	2030      	movs	r0, #48	; 0x30
 80016dc:	f001 f9fe 	bl	8002adc <fmc_flag_clear>
        offset_align = (offset & ~0x3);
 80016e0:	f025 0703 	bic.w	r7, r5, #3
        if (vb > 0) {
 80016e4:	f015 0503 	ands.w	r5, r5, #3
 80016e8:	d064      	beq.n	80017b4 <flash_write+0x164>
            act_len = ((4 - vb) > len) ? len : (4 - vb);
 80016ea:	f1c5 0204 	rsb	r2, r5, #4
 80016ee:	42a2      	cmp	r2, r4
 80016f0:	bfa8      	it	ge
 80016f2:	4622      	movge	r2, r4
            for (i = 0; i < act_len; i++) {
 80016f4:	ab01      	add	r3, sp, #4
 80016f6:	18b1      	adds	r1, r6, r2
 80016f8:	441d      	add	r5, r3
                val[vb + i] = *(data_u8 + i);
 80016fa:	f816 3b01 	ldrb.w	r3, [r6], #1
            for (i = 0; i < act_len; i++) {
 80016fe:	428e      	cmp	r6, r1
                val[vb + i] = *(data_u8 + i);
 8001700:	f805 3b01 	strb.w	r3, [r5], #1
            for (i = 0; i < act_len; i++) {
 8001704:	d1f9      	bne.n	80016fa <flash_write+0xaa>
            len -= act_len;
 8001706:	1aa4      	subs	r4, r4, r2
            fmc_word_program((base_addr + offset_align), *(uint32_t *)val);
 8001708:	f107 6000 	add.w	r0, r7, #134217728	; 0x8000000
 800170c:	9901      	ldr	r1, [sp, #4]
 800170e:	f001 f91d 	bl	800294c <fmc_word_program>
        while (len >= 4) {
 8001712:	2c03      	cmp	r4, #3
            offset_align += 4;
 8001714:	f107 0704 	add.w	r7, r7, #4
        while (len >= 4) {
 8001718:	dd25      	ble.n	8001766 <flash_write+0x116>
    return FLASH_TOTAL_SIZE;
 800171a:	4635      	mov	r5, r6
 800171c:	f107 6800 	add.w	r8, r7, #134217728	; 0x8000000
            fmc_word_program((base_addr + offset_align), *(uint32_t *)data_u8);
 8001720:	eba8 0806 	sub.w	r8, r8, r6
 8001724:	eb06 0904 	add.w	r9, r6, r4
 8001728:	6829      	ldr	r1, [r5, #0]
 800172a:	eb05 0008 	add.w	r0, r5, r8
            data_u8 += 4;
 800172e:	3504      	adds	r5, #4
            fmc_word_program((base_addr + offset_align), *(uint32_t *)data_u8);
 8001730:	f001 f90c 	bl	800294c <fmc_word_program>
        while (len >= 4) {
 8001734:	eba9 0305 	sub.w	r3, r9, r5
 8001738:	2b03      	cmp	r3, #3
 800173a:	dcf5      	bgt.n	8001728 <flash_write+0xd8>
 800173c:	1f21      	subs	r1, r4, #4
 800173e:	088b      	lsrs	r3, r1, #2
 8001740:	2c03      	cmp	r4, #3
 8001742:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8001746:	f103 0301 	add.w	r3, r3, #1
 800174a:	f021 0003 	bic.w	r0, r1, #3
 800174e:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8001752:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001756:	bfde      	ittt	le
 8001758:	2000      	movle	r0, #0
 800175a:	2400      	movle	r4, #0
 800175c:	2304      	movle	r3, #4
 800175e:	3704      	adds	r7, #4
 8001760:	4407      	add	r7, r0
 8001762:	440c      	add	r4, r1
 8001764:	441e      	add	r6, r3
        if (len > 0) {
 8001766:	2c00      	cmp	r4, #0
 8001768:	dd10      	ble.n	800178c <flash_write+0x13c>
        val32 = 0xFFFFFFFF;
 800176a:	f04f 31ff 	mov.w	r1, #4294967295
            while (len-- > 0) {
 800176e:	440c      	add	r4, r1
 8001770:	4434      	add	r4, r6
 8001772:	f1c6 0601 	rsb	r6, r6, #1
                val32 |= *(data_u8 + len);
 8001776:	f814 2901 	ldrb.w	r2, [r4], #-1
            while (len-- > 0) {
 800177a:	1933      	adds	r3, r6, r4
 800177c:	2b00      	cmp	r3, #0
                val32 |= *(data_u8 + len);
 800177e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
            while (len-- > 0) {
 8001782:	dcf8      	bgt.n	8001776 <flash_write+0x126>
            fmc_word_program((base_addr + offset_align), val32);
 8001784:	f107 6000 	add.w	r0, r7, #134217728	; 0x8000000
 8001788:	f001 f8e0 	bl	800294c <fmc_word_program>
        fmc_lock();
 800178c:	f001 f894 	bl	80028b8 <fmc_lock>
    return 0;
 8001790:	2000      	movs	r0, #0
 8001792:	e76d      	b.n	8001670 <flash_write+0x20>
            size_to_program = (len > FLASH_QSPI_PAGE_SIZE - page_offset) ? (FLASH_QSPI_PAGE_SIZE - page_offset) : len;
 8001794:	f5c7 7780 	rsb	r7, r7, #256	; 0x100
 8001798:	42a7      	cmp	r7, r4
 800179a:	bf28      	it	cs
 800179c:	4627      	movcs	r7, r4
  __ASM volatile ("cpsid i" : : : "memory");
 800179e:	b672      	cpsid	i
            qspi_flash_page_program((base_addr + offset), data_u8, size_to_program);
 80017a0:	463a      	mov	r2, r7
 80017a2:	f004 f971 	bl	8005a88 <__qspi_flash_page_program_veneer>
  __ASM volatile ("cpsie i" : : : "memory");
 80017a6:	b662      	cpsie	i
            len -= size_to_program;
 80017a8:	1be4      	subs	r4, r4, r7
        while (len > 0) {
 80017aa:	2c00      	cmp	r4, #0
 80017ac:	dd8e      	ble.n	80016cc <flash_write+0x7c>
            offset += size_to_program;
 80017ae:	443d      	add	r5, r7
            data_u8 += size_to_program;
 80017b0:	443e      	add	r6, r7
 80017b2:	e779      	b.n	80016a8 <flash_write+0x58>
        while (len >= 4) {
 80017b4:	2c03      	cmp	r4, #3
 80017b6:	dcb0      	bgt.n	800171a <flash_write+0xca>
 80017b8:	e7d7      	b.n	800176a <flash_write+0x11a>
 80017ba:	bf00      	nop
 80017bc:	4002201c 	.word	0x4002201c

080017c0 <flash_fast_write>:
    return (OBSTAT_NQSPI() == SET);
 80017c0:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <flash_fast_write+0x124>)
    \param[in]  len: length of data write to flash
    \param[out] none
    \retval     result of write flash(0: write ok, or -1: write error)
*/
int flash_fast_write(uint32_t offset, const void *data, int len)
{
 80017c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (OBSTAT_NQSPI() == SET);
 80017c6:	681c      	ldr	r4, [r3, #0]
{
 80017c8:	b082      	sub	sp, #8
    return FLASH_TOTAL_SIZE;
 80017ca:	f014 0f10 	tst.w	r4, #16
 80017ce:	bf14      	ite	ne
 80017d0:	f44f 1700 	movne.w	r7, #2097152	; 0x200000
 80017d4:	f04f 7700 	moveq.w	r7, #33554432	; 0x2000000
    if (offset < flash_total_size()) {
 80017d8:	42b8      	cmp	r0, r7
 80017da:	d304      	bcc.n	80017e6 <flash_fast_write+0x26>
    uint32_t base_addr;
    int ret = 0;

    if (!is_valid_flash_offset(offset) || data == NULL
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
        return -1;
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
            data_u8 += size_to_program;
            len -= size_to_program;
        }
    }
    return ret;
}
 80017e0:	b002      	add	sp, #8
 80017e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 1;
 80017e6:	460e      	mov	r6, r1
    if (!is_valid_flash_offset(offset) || data == NULL
 80017e8:	2900      	cmp	r1, #0
 80017ea:	d0f7      	beq.n	80017dc <flash_fast_write+0x1c>
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 80017ec:	2a00      	cmp	r2, #0
 80017ee:	4614      	mov	r4, r2
 80017f0:	ddf4      	ble.n	80017dc <flash_fast_write+0x1c>
    return (OBSTAT_NQSPI() == SET);
 80017f2:	f8d3 c000 	ldr.w	ip, [r3]
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 80017f6:	1817      	adds	r7, r2, r0
    return FLASH_TOTAL_SIZE;
 80017f8:	f01c 0f10 	tst.w	ip, #16
 80017fc:	bf14      	ite	ne
 80017fe:	f44f 1c00 	movne.w	ip, #2097152	; 0x200000
 8001802:	f04f 7c00 	moveq.w	ip, #33554432	; 0x2000000
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 8001806:	f107 3eff 	add.w	lr, r7, #4294967295
    if (offset < flash_total_size()) {
 800180a:	45e6      	cmp	lr, ip
 800180c:	4605      	mov	r5, r0
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 800180e:	4690      	mov	r8, r2
    if (offset < flash_total_size()) {
 8001810:	d2e4      	bcs.n	80017dc <flash_fast_write+0x1c>
    return (OBSTAT_NQSPI() == SET);
 8001812:	681b      	ldr	r3, [r3, #0]
    if (is_sip_flash()) {
 8001814:	06db      	lsls	r3, r3, #27
 8001816:	d52f      	bpl.n	8001878 <flash_fast_write+0xb8>
        if (len <= 4)
 8001818:	2a04      	cmp	r2, #4
 800181a:	dd5a      	ble.n	80018d2 <flash_fast_write+0x112>
        r = 4 - (offset & 0x3);
 800181c:	f000 0a03 	and.w	sl, r0, #3
 8001820:	f1ca 0a04 	rsb	sl, sl, #4
 8001824:	fa5f fa8a 	uxtb.w	sl, sl
        rr = (offset + len) & 0x3;
 8001828:	fa52 f980 	uxtab	r9, r2, r0
        r = r == 4 ? 0 : r;
 800182c:	f1ba 0f04 	cmp.w	sl, #4
        rr = (offset + len) & 0x3;
 8001830:	f009 0903 	and.w	r9, r9, #3
        r = r == 4 ? 0 : r;
 8001834:	d052      	beq.n	80018dc <flash_fast_write+0x11c>
            ret = flash_write(offset, data, r);
 8001836:	4652      	mov	r2, sl
 8001838:	f7ff ff0a 	bl	8001650 <flash_write>
            if (ret)
 800183c:	2800      	cmp	r0, #0
 800183e:	d1cf      	bne.n	80017e0 <flash_fast_write+0x20>
 8001840:	eba4 040a 	sub.w	r4, r4, sl
 8001844:	eb06 010a 	add.w	r1, r6, sl
        fmc_unlock();
 8001848:	9101      	str	r1, [sp, #4]
 800184a:	f001 f823 	bl	8002894 <fmc_unlock>
        fmc_flag_clear(FMC_FLAG_END | FMC_FLAG_WPERR);
 800184e:	2030      	movs	r0, #48	; 0x30
 8001850:	f001 f944 	bl	8002adc <fmc_flag_clear>
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
        ret = fmc_continuous_program(FLASH_BASE + offset + r, (uint32_t *)((uint8_t *)data + r), len - r - rr);
 8001856:	f105 6000 	add.w	r0, r5, #134217728	; 0x8000000
 800185a:	eba4 0209 	sub.w	r2, r4, r9
 800185e:	9901      	ldr	r1, [sp, #4]
 8001860:	4450      	add	r0, sl
 8001862:	f001 f8af 	bl	80029c4 <fmc_continuous_program>
 8001866:	4604      	mov	r4, r0
  __ASM volatile ("cpsie i" : : : "memory");
 8001868:	b662      	cpsie	i
        fmc_lock();
 800186a:	f001 f825 	bl	80028b8 <fmc_lock>
        if (rr) {
 800186e:	f1b9 0f00 	cmp.w	r9, #0
 8001872:	d128      	bne.n	80018c6 <flash_fast_write+0x106>
        ret = fmc_continuous_program(FLASH_BASE + offset + r, (uint32_t *)((uint8_t *)data + r), len - r - rr);
 8001874:	4620      	mov	r0, r4
 8001876:	e7b3      	b.n	80017e0 <flash_fast_write+0x20>
        if (page_offset != 0) {
 8001878:	f010 07ff 	ands.w	r7, r0, #255	; 0xff
 800187c:	d113      	bne.n	80018a6 <flash_fast_write+0xe6>
            size_to_program = (len > FLASH_QSPI_PAGE_SIZE) ? FLASH_QSPI_PAGE_SIZE : len;
 800187e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8001882:	4627      	mov	r7, r4
 8001884:	bfa8      	it	ge
 8001886:	f44f 7780 	movge.w	r7, #256	; 0x100
  __ASM volatile ("cpsid i" : : : "memory");
 800188a:	b672      	cpsid	i
            qspi_flash_page_program((base_addr + offset), data_u8, size_to_program);
 800188c:	463a      	mov	r2, r7
 800188e:	4631      	mov	r1, r6
 8001890:	4628      	mov	r0, r5
 8001892:	f004 f8f9 	bl	8005a88 <__qspi_flash_page_program_veneer>
  __ASM volatile ("cpsie i" : : : "memory");
 8001896:	b662      	cpsie	i
            len -= size_to_program;
 8001898:	1be4      	subs	r4, r4, r7
        while (len > 0) {
 800189a:	2c00      	cmp	r4, #0
            offset += size_to_program;
 800189c:	443d      	add	r5, r7
            data_u8 += size_to_program;
 800189e:	443e      	add	r6, r7
        while (len > 0) {
 80018a0:	dced      	bgt.n	800187e <flash_fast_write+0xbe>
    int ret = 0;
 80018a2:	2000      	movs	r0, #0
 80018a4:	e79c      	b.n	80017e0 <flash_fast_write+0x20>
            size_to_program = (len > FLASH_QSPI_PAGE_SIZE - page_offset) ? (FLASH_QSPI_PAGE_SIZE - page_offset) : len;
 80018a6:	f5c7 7780 	rsb	r7, r7, #256	; 0x100
 80018aa:	4297      	cmp	r7, r2
 80018ac:	bf28      	it	cs
 80018ae:	4617      	movcs	r7, r2
  __ASM volatile ("cpsid i" : : : "memory");
 80018b0:	b672      	cpsid	i
            qspi_flash_page_program((base_addr + offset), data_u8, size_to_program);
 80018b2:	463a      	mov	r2, r7
 80018b4:	f004 f8e8 	bl	8005a88 <__qspi_flash_page_program_veneer>
  __ASM volatile ("cpsie i" : : : "memory");
 80018b8:	b662      	cpsie	i
            len -= size_to_program;
 80018ba:	1be4      	subs	r4, r4, r7
        while (len > 0) {
 80018bc:	2c00      	cmp	r4, #0
 80018be:	ddf0      	ble.n	80018a2 <flash_fast_write+0xe2>
            offset += size_to_program;
 80018c0:	443d      	add	r5, r7
            data_u8 += size_to_program;
 80018c2:	443e      	add	r6, r7
 80018c4:	e7db      	b.n	800187e <flash_fast_write+0xbe>
            ret = flash_write(offset + len - rr, ((uint8_t *)data + len - rr), rr);
 80018c6:	464a      	mov	r2, r9
 80018c8:	eba8 0109 	sub.w	r1, r8, r9
 80018cc:	4431      	add	r1, r6
 80018ce:	eba7 0009 	sub.w	r0, r7, r9
}
 80018d2:	b002      	add	sp, #8
 80018d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            ret = flash_write(offset + len - rr, ((uint8_t *)data + len - rr), rr);
 80018d8:	f7ff beba 	b.w	8001650 <flash_write>
 80018dc:	f04f 0a00 	mov.w	sl, #0
 80018e0:	e7b2      	b.n	8001848 <flash_fast_write+0x88>
 80018e2:	bf00      	nop
 80018e4:	4002201c 	.word	0x4002201c

080018e8 <flash_erase>:
    return (OBSTAT_NQSPI() == SET);
 80018e8:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <flash_erase+0xc8>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
    return FLASH_TOTAL_SIZE;
 80018ee:	f012 0f10 	tst.w	r2, #16
 80018f2:	bf14      	ite	ne
 80018f4:	f44f 1200 	movne.w	r2, #2097152	; 0x200000
 80018f8:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
    if (offset < flash_total_size()) {
 80018fc:	4290      	cmp	r0, r2
 80018fe:	d302      	bcc.n	8001906 <flash_erase+0x1e>
    uint32_t erase_sz = flash_erase_size();
    uint32_t page_start, sector_start;

    if (!is_valid_flash_offset(offset)
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
        return -1;
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
            sector_start += erase_sz;
            len -= erase_sz;
        }
    }
    return 0;
}
 8001904:	4770      	bx	lr
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 8001906:	2900      	cmp	r1, #0
 8001908:	ddfa      	ble.n	8001900 <flash_erase+0x18>
{
 800190a:	b530      	push	{r4, r5, lr}
    return (OBSTAT_NQSPI() == SET);
 800190c:	681c      	ldr	r4, [r3, #0]
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 800190e:	180a      	adds	r2, r1, r0
    return FLASH_TOTAL_SIZE;
 8001910:	f014 0f10 	tst.w	r4, #16
 8001914:	bf14      	ite	ne
 8001916:	f44f 1400 	movne.w	r4, #2097152	; 0x200000
 800191a:	f04f 7400 	moveq.w	r4, #33554432	; 0x2000000
        || len <= 0 || !is_valid_flash_offset(offset + len - 1)) {
 800191e:	3a01      	subs	r2, #1
    if (offset < flash_total_size()) {
 8001920:	42a2      	cmp	r2, r4
{
 8001922:	b083      	sub	sp, #12
    if (offset < flash_total_size()) {
 8001924:	d303      	bcc.n	800192e <flash_erase+0x46>
        return -1;
 8001926:	f04f 30ff 	mov.w	r0, #4294967295
}
 800192a:	b003      	add	sp, #12
 800192c:	bd30      	pop	{r4, r5, pc}
    return (OBSTAT_NQSPI() == SET);
 800192e:	681b      	ldr	r3, [r3, #0]
    if (is_sip_flash()) {
 8001930:	06db      	lsls	r3, r3, #27
 8001932:	d417      	bmi.n	8001964 <flash_erase+0x7c>
        sector_start = FLASH_START_QSPI + (offset & (~(erase_sz - 1)));
 8001934:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
 8001938:	1e4c      	subs	r4, r1, #1
 800193a:	f020 000f 	bic.w	r0, r0, #15
        while (len > 0) {
 800193e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8001942:	f024 040f 	bic.w	r4, r4, #15
 8001946:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 800194a:	442c      	add	r4, r5
 800194c:	e001      	b.n	8001952 <flash_erase+0x6a>
 800194e:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  __ASM volatile ("cpsid i" : : : "memory");
 8001952:	b672      	cpsid	i
            qspi_flash_sector_erase(sector_start);
 8001954:	f004 f858 	bl	8005a08 <__qspi_flash_sector_erase_veneer>
  __ASM volatile ("cpsie i" : : : "memory");
 8001958:	b662      	cpsie	i
        while (len > 0) {
 800195a:	42a5      	cmp	r5, r4
            sector_start += erase_sz;
 800195c:	4628      	mov	r0, r5
        while (len > 0) {
 800195e:	d1f6      	bne.n	800194e <flash_erase+0x66>
    return 0;
 8001960:	2000      	movs	r0, #0
 8001962:	e7e2      	b.n	800192a <flash_erase+0x42>
        page_start = FLASH_BASE + (offset & (~(erase_sz - 1)));
 8001964:	f420 607f 	bic.w	r0, r0, #4080	; 0xff0
 8001968:	f020 000f 	bic.w	r0, r0, #15
 800196c:	9101      	str	r1, [sp, #4]
 800196e:	f100 6400 	add.w	r4, r0, #134217728	; 0x8000000
        fmc_unlock();
 8001972:	f000 ff8f 	bl	8002894 <fmc_unlock>
        fmc_flag_clear(FMC_FLAG_END | FMC_FLAG_OBERR | FMC_FLAG_WPERR);
 8001976:	2038      	movs	r0, #56	; 0x38
 8001978:	f001 f8b0 	bl	8002adc <fmc_flag_clear>
        while (len > 0) {
 800197c:	9901      	ldr	r1, [sp, #4]
 800197e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8001982:	3901      	subs	r1, #1
 8001984:	f421 657f 	bic.w	r5, r1, #4080	; 0xff0
 8001988:	f025 050f 	bic.w	r5, r5, #15
 800198c:	441d      	add	r5, r3
            ret = fmc_page_erase(page_start);
 800198e:	4620      	mov	r0, r4
 8001990:	f000 ff9a 	bl	80028c8 <fmc_page_erase>
            page_start += erase_sz;
 8001994:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
            if (ret != FMC_READY)
 8001998:	b930      	cbnz	r0, 80019a8 <flash_erase+0xc0>
        while (len > 0) {
 800199a:	42ac      	cmp	r4, r5
 800199c:	d1f7      	bne.n	800198e <flash_erase+0xa6>
 800199e:	9001      	str	r0, [sp, #4]
        fmc_lock();
 80019a0:	f000 ff8a 	bl	80028b8 <fmc_lock>
    return 0;
 80019a4:	9801      	ldr	r0, [sp, #4]
 80019a6:	e7c0      	b.n	800192a <flash_erase+0x42>
                return -2;
 80019a8:	f06f 0001 	mvn.w	r0, #1
 80019ac:	e7bd      	b.n	800192a <flash_erase+0x42>
 80019ae:	bf00      	nop
 80019b0:	4002201c 	.word	0x4002201c

080019b4 <checksum_cal>:
    \param[in]  sz: array size to calculate checksum
    \param[out] none
    \retval     checksum value
*/
uint32_t checksum_cal(uint8_t *ptr, uint32_t sz)
{
 80019b4:	4603      	mov	r3, r0
    int i;

    /* should be 4 bytes align */
    sz = ((sz >> 2) << 2);

    for (i = 0; i < sz; i += 4) {
 80019b6:	f031 0003 	bics.w	r0, r1, #3
 80019ba:	d009      	beq.n	80019d0 <checksum_cal+0x1c>
 80019bc:	1f01      	subs	r1, r0, #4
    uint32_t chksum = 0;
 80019be:	2000      	movs	r0, #0
 80019c0:	4419      	add	r1, r3
 80019c2:	3b04      	subs	r3, #4
        chksum ^= *(uint32_t *)(ptr + i);
 80019c4:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (i = 0; i < sz; i += 4) {
 80019c8:	428b      	cmp	r3, r1
        chksum ^= *(uint32_t *)(ptr + i);
 80019ca:	ea80 0002 	eor.w	r0, r0, r2
    for (i = 0; i < sz; i += 4) {
 80019ce:	d1f9      	bne.n	80019c4 <checksum_cal+0x10>
    }

    return chksum;
}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <boot_image_find>:
      \arg        -3: find image1 fail
      \arg        -4: image1 has downloaded but image0 has not downloaded
      \arg        -5: other fail
*/
int boot_image_find(OUT uint32_t *idx, OUT uint32_t *image_offset)
{
 80019d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t img0_stat = 0, img1_stat = 0;
 80019d6:	2400      	movs	r4, #0
{
 80019d8:	b083      	sub	sp, #12
    uint8_t img0_stat = 0, img1_stat = 0;
 80019da:	f88d 4006 	strb.w	r4, [sp, #6]
 80019de:	f88d 4007 	strb.w	r4, [sp, #7]
    uint8_t img0_found = 0, img1_found = 0;
    int boot_idx = -1;
    int ret, result = 0;

    if (NULL == image_offset) {
 80019e2:	2900      	cmp	r1, #0
 80019e4:	d061      	beq.n	8001aaa <boot_image_find+0xd6>
        result = -1;
        goto Failed;
    }

    ret = sys_status_get(SYS_IMAGE0_STATUS, LEN_SYS_IMAGE_STATUS, &img0_stat);
 80019e6:	f10d 0206 	add.w	r2, sp, #6
 80019ea:	4607      	mov	r7, r0
 80019ec:	460e      	mov	r6, r1
 80019ee:	2003      	movs	r0, #3
 80019f0:	2101      	movs	r1, #1
 80019f2:	f000 fb8b 	bl	800210c <sys_status_get>
    if (ret <= SYS_STATUS_FOUND_ERR) {
 80019f6:	1c42      	adds	r2, r0, #1
    ret = sys_status_get(SYS_IMAGE0_STATUS, LEN_SYS_IMAGE_STATUS, &img0_stat);
 80019f8:	4605      	mov	r5, r0
    if (ret <= SYS_STATUS_FOUND_ERR) {
 80019fa:	db5b      	blt.n	8001ab4 <boot_image_find+0xe0>
    } else if (ret == SYS_STATUS_FOUND_OK) {
        img0_found = 1;
    } else {  // SYS_STATUS_NOT_FOUND
        img0_found = 0;
    }
    ret = sys_status_get(SYS_IMAGE1_STATUS, LEN_SYS_IMAGE_STATUS, &img1_stat);
 80019fc:	2101      	movs	r1, #1
 80019fe:	2004      	movs	r0, #4
 8001a00:	f10d 0207 	add.w	r2, sp, #7
 8001a04:	f000 fb82 	bl	800210c <sys_status_get>
    if (ret <= SYS_STATUS_FOUND_ERR) {
 8001a08:	1c43      	adds	r3, r0, #1
 8001a0a:	db56      	blt.n	8001aba <boot_image_find+0xe6>
        result = -3;
        goto Failed;
    } else if (ret == SYS_STATUS_FOUND_OK) {
 8001a0c:	b160      	cbz	r0, 8001a28 <boot_image_find+0x54>
    } else {  // SYS_STATUS_NOT_FOUND
        img1_found = 0;
    }

    /* Image0 never downloaded, Image1 should not be downloaded too. */
    if (!img0_found && img1_found) {
 8001a0e:	b3bd      	cbz	r5, 8001a80 <boot_image_find+0xac>
        goto Failed;
    }

    if (!img0_found && !img1_found) {
        /* ISP newly downloaded */
        sys_img_flag_set(IMAGE_0, IMG_FLAG_NEWER_MASK, IMG_FLAG_NEWER);
 8001a10:	2201      	movs	r2, #1
 8001a12:	4620      	mov	r0, r4
 8001a14:	4611      	mov	r1, r2
 8001a16:	f000 fc23 	bl	8002260 <sys_img_flag_set>
        goto Failed;
    }

ImgSelected:
    *idx = boot_idx;
    *image_offset = RE_IMG_0_NSPE_OFFSET + RE_VTOR_ALIGNMENT - IMAGE_HEADER_SIZE;
 8001a1a:	f44f 4320 	mov.w	r3, #40960	; 0xa000

    return 0;
 8001a1e:	2000      	movs	r0, #0
    *idx = boot_idx;
 8001a20:	603c      	str	r4, [r7, #0]
    *image_offset = RE_IMG_0_NSPE_OFFSET + RE_VTOR_ALIGNMENT - IMAGE_HEADER_SIZE;
 8001a22:	6033      	str	r3, [r6, #0]

Failed:
    return result;
}
 8001a24:	b003      	add	sp, #12
 8001a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!img0_found && img1_found) {
 8001a28:	b11d      	cbz	r5, 8001a32 <boot_image_find+0x5e>
        result = -4;
 8001a2a:	f06f 0003 	mvn.w	r0, #3
}
 8001a2e:	b003      	add	sp, #12
 8001a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (img0_found && ((img0_stat & IMG_FLAG_NEWER_MASK) == IMG_FLAG_NEWER)) {
 8001a32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8001a36:	07d4      	lsls	r4, r2, #31
 8001a38:	d415      	bmi.n	8001a66 <boot_image_find+0x92>
    if (img1_found && ((img1_stat & IMG_FLAG_NEWER_MASK) == IMG_FLAG_NEWER)) {
 8001a3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a3e:	07d8      	lsls	r0, r3, #31
 8001a40:	d507      	bpl.n	8001a52 <boot_image_find+0x7e>
        if (((img1_stat & IMG_FLAG_VERIFY_MASK) != IMG_FLAG_VERIFY_FAIL)
 8001a42:	f003 0106 	and.w	r1, r3, #6
 8001a46:	2904      	cmp	r1, #4
 8001a48:	d003      	beq.n	8001a52 <boot_image_find+0x7e>
            && ((img1_stat & IMG_FLAG_IA_MASK) != IMG_FLAG_IA_FAIL)) {
 8001a4a:	f003 0118 	and.w	r1, r3, #24
 8001a4e:	2910      	cmp	r1, #16
 8001a50:	d107      	bne.n	8001a62 <boot_image_find+0x8e>
        && ((img0_stat & IMG_FLAG_IA_MASK) == IMG_FLAG_IA_OK)) {
 8001a52:	f002 021e 	and.w	r2, r2, #30
 8001a56:	2a0a      	cmp	r2, #10
 8001a58:	d01e      	beq.n	8001a98 <boot_image_find+0xc4>
        && ((img1_stat & IMG_FLAG_IA_MASK) == IMG_FLAG_IA_OK)) {
 8001a5a:	f003 031e 	and.w	r3, r3, #30
 8001a5e:	2b0a      	cmp	r3, #10
 8001a60:	d120      	bne.n	8001aa4 <boot_image_find+0xd0>
 8001a62:	2401      	movs	r4, #1
 8001a64:	e7d9      	b.n	8001a1a <boot_image_find+0x46>
        if (((img0_stat & IMG_FLAG_VERIFY_MASK) != IMG_FLAG_VERIFY_FAIL)
 8001a66:	f002 0306 	and.w	r3, r2, #6
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d0e5      	beq.n	8001a3a <boot_image_find+0x66>
            && ((img0_stat & IMG_FLAG_IA_MASK) != IMG_FLAG_IA_FAIL)) {
 8001a6e:	f002 0318 	and.w	r3, r2, #24
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d11c      	bne.n	8001ab0 <boot_image_find+0xdc>
    if (img1_found && ((img1_stat & IMG_FLAG_NEWER_MASK) == IMG_FLAG_NEWER)) {
 8001a76:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a7a:	07d9      	lsls	r1, r3, #31
 8001a7c:	d5e9      	bpl.n	8001a52 <boot_image_find+0x7e>
 8001a7e:	e7e0      	b.n	8001a42 <boot_image_find+0x6e>
    if (img0_found && ((img0_stat & IMG_FLAG_NEWER_MASK) == IMG_FLAG_NEWER)) {
 8001a80:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001a84:	07dd      	lsls	r5, r3, #31
 8001a86:	d509      	bpl.n	8001a9c <boot_image_find+0xc8>
        if (((img0_stat & IMG_FLAG_VERIFY_MASK) != IMG_FLAG_VERIFY_FAIL)
 8001a88:	f003 0206 	and.w	r2, r3, #6
 8001a8c:	2a04      	cmp	r2, #4
 8001a8e:	d005      	beq.n	8001a9c <boot_image_find+0xc8>
            && ((img0_stat & IMG_FLAG_IA_MASK) != IMG_FLAG_IA_FAIL)) {
 8001a90:	f003 0218 	and.w	r2, r3, #24
 8001a94:	2a10      	cmp	r2, #16
 8001a96:	d001      	beq.n	8001a9c <boot_image_find+0xc8>
        && ((img0_stat & IMG_FLAG_IA_MASK) == IMG_FLAG_IA_OK)) {
 8001a98:	2400      	movs	r4, #0
 8001a9a:	e7be      	b.n	8001a1a <boot_image_find+0x46>
 8001a9c:	f003 031e 	and.w	r3, r3, #30
 8001aa0:	2b0a      	cmp	r3, #10
 8001aa2:	d0f9      	beq.n	8001a98 <boot_image_find+0xc4>
        result = -5;
 8001aa4:	f06f 0004 	mvn.w	r0, #4
 8001aa8:	e7bc      	b.n	8001a24 <boot_image_find+0x50>
        result = -1;
 8001aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8001aae:	e7b9      	b.n	8001a24 <boot_image_find+0x50>
            && ((img0_stat & IMG_FLAG_IA_MASK) != IMG_FLAG_IA_FAIL)) {
 8001ab0:	462c      	mov	r4, r5
 8001ab2:	e7b2      	b.n	8001a1a <boot_image_find+0x46>
        result = -2;
 8001ab4:	f06f 0001 	mvn.w	r0, #1
 8001ab8:	e7b4      	b.n	8001a24 <boot_image_find+0x50>
        result = -3;
 8001aba:	f06f 0002 	mvn.w	r0, #2
 8001abe:	e7b1      	b.n	8001a24 <boot_image_find+0x50>

08001ac0 <main>:
    \retval     none
*/
int main(void)
{
    struct image_header hdr;
    uint32_t boot_idx = 0, image_offset = 0, version;
 8001ac0:	2100      	movs	r1, #0
{
 8001ac2:	b510      	push	{r4, lr}
 8001ac4:	b084      	sub	sp, #16
    uint32_t boot_idx = 0, image_offset = 0, version;
 8001ac6:	e9cd 1100 	strd	r1, r1, [sp]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 8001aca:	4b33      	ldr	r3, [pc, #204]	; (8001b98 <main+0xd8>)
 8001acc:	f383 880a 	msr	MSPLIM, r3
    #endif
    __set_MSPLIM(msp_stack_bottom);
#endif

    /* Clear SRAM used by rom variables */
    memset((uint32_t *)SRAM_BASE_NS, 0, RE_MBL_DATA_START);
 8001ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad4:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001ad8:	f001 fb2f 	bl	800313a <memset>

    /* Initialize UART for trace print */
    log_uart_init();
 8001adc:	f000 fec8 	bl	8002870 <log_uart_init>
    printf("GIGA DEVICE\r\n");
 8001ae0:	482e      	ldr	r0, [pc, #184]	; (8001b9c <main+0xdc>)
 8001ae2:	f001 ff9f 	bl	8003a24 <iprintf>

    /* Initialize flash for reading system info */
    flash_init();
 8001ae6:	f7ff fd09 	bl	80014fc <flash_init>

    /* Initialize system status if empty or validate system status */
    ret = sys_status_check();
 8001aea:	f000 fd9d 	bl	8002628 <sys_status_check>
    if (ret < 0) {
 8001aee:	1e01      	subs	r1, r0, #0
 8001af0:	db27      	blt.n	8001b42 <main+0x82>
        mbl_trace(MBL_ERR, "Check sys status failed (ret = %d).\r\n", ret);
        goto BootFailed;
    }

    /* Find the correct image to boot, Image 0 or Image 1 */
    ret = boot_image_find(&boot_idx, &image_offset);
 8001af2:	a901      	add	r1, sp, #4
 8001af4:	4668      	mov	r0, sp
 8001af6:	f7ff ff6d 	bl	80019d4 <boot_image_find>
    if (ret < 0) {
 8001afa:	1e01      	subs	r1, r0, #0
 8001afc:	db3b      	blt.n	8001b76 <main+0xb6>
        mbl_trace(MBL_ERR, "No image to boot (ret = %d).\r\n", ret);
        goto BootFailed;
    } else {
        mbl_trace(MBL_ALWAYS, "MBL: Boot from Image %d.\r\n", boot_idx);
 8001afe:	4c28      	ldr	r4, [pc, #160]	; (8001ba0 <main+0xe0>)
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	dd03      	ble.n	8001b0e <main+0x4e>
 8001b06:	9900      	ldr	r1, [sp, #0]
 8001b08:	4826      	ldr	r0, [pc, #152]	; (8001ba4 <main+0xe4>)
 8001b0a:	f001 ff8b 	bl	8003a24 <iprintf>
    }

    /* If boot from Image 1, config offset mapping */
    if (boot_idx == IMAGE_1) {
 8001b0e:	9800      	ldr	r0, [sp, #0]
 8001b10:	2801      	cmp	r0, #1
 8001b12:	d03d      	beq.n	8001b90 <main+0xd0>
        sys_img_flag_set(boot_idx, IMG_FLAG_VERIFY_MASK, IMG_FLAG_VERIFY_FAIL);
        goto BootFailed;
    }
#endif
    /* Update Image status and Running Image flag */
    ret = sys_img_flag_set(boot_idx, IMG_FLAG_VERIFY_MASK, IMG_FLAG_VERIFY_OK);
 8001b14:	2202      	movs	r2, #2
 8001b16:	2106      	movs	r1, #6
 8001b18:	b2c0      	uxtb	r0, r0
 8001b1a:	f000 fba1 	bl	8002260 <sys_img_flag_set>
    ret |= sys_running_img_set(boot_idx);
 8001b1e:	f89d 0000 	ldrb.w	r0, [sp]
 8001b22:	f000 fbe1 	bl	80022e8 <sys_running_img_set>
        mbl_trace(MBL_ALWAYS, "Current image version is %d.%d.%d.\r\n",
                            hdr.ver_major, hdr.ver_minor, hdr.ver_rev);
    }
#endif
    /* Read the MSP and Reset_Handler of the main image */
    flash_read((image_offset + IMAGE_HEADER_SIZE), arm_vector, 8);
 8001b26:	2208      	movs	r2, #8
 8001b28:	9801      	ldr	r0, [sp, #4]
 8001b2a:	eb0d 0102 	add.w	r1, sp, r2
 8001b2e:	f7ff fcf3 	bl	8001518 <flash_read>
    if (!is_valid_flash_addr(arm_vector[1])) {
 8001b32:	9803      	ldr	r0, [sp, #12]
 8001b34:	f7ff fc9c 	bl	8001470 <is_valid_flash_addr>
 8001b38:	b958      	cbnz	r0, 8001b52 <main+0x92>
        mbl_trace(MBL_ERR, "Image vector reset is invalid (%08x).\r\n", arm_vector[1]);
 8001b3a:	6823      	ldr	r3, [r4, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	dc22      	bgt.n	8001b86 <main+0xc6>

    /* Jump to main image */
    jump_to_main_image(arm_vector[0], arm_vector[1]);

BootFailed:
    while(1);
 8001b40:	e7fe      	b.n	8001b40 <main+0x80>
        mbl_trace(MBL_ERR, "Check sys status failed (ret = %d).\r\n", ret);
 8001b42:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <main+0xe0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	ddfa      	ble.n	8001b40 <main+0x80>
 8001b4a:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <main+0xe8>)
 8001b4c:	f001 ff6a 	bl	8003a24 <iprintf>
 8001b50:	e7f6      	b.n	8001b40 <main+0x80>
    log_uart_idle_wait();
 8001b52:	f000 fe93 	bl	800287c <log_uart_idle_wait>
    jump_to_main_image(arm_vector[0], arm_vector[1]);
 8001b56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    img_reset = (img_fptr_t)reset;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <main+0xec>)
 8001b5c:	6019      	str	r1, [r3, #0]
 8001b5e:	2100      	movs	r1, #0
 8001b60:	f381 880a 	msr	MSPLIM, r1
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001b64:	f382 8808 	msr	MSP, r2
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b6c:	f3bf 8f6f 	isb	sy
    img_reset();
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4798      	blx	r3
}
 8001b74:	e7e4      	b.n	8001b40 <main+0x80>
        mbl_trace(MBL_ERR, "No image to boot (ret = %d).\r\n", ret);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <main+0xe0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	dde0      	ble.n	8001b40 <main+0x80>
 8001b7e:	480c      	ldr	r0, [pc, #48]	; (8001bb0 <main+0xf0>)
 8001b80:	f001 ff50 	bl	8003a24 <iprintf>
 8001b84:	e7dc      	b.n	8001b40 <main+0x80>
        mbl_trace(MBL_ERR, "Image vector reset is invalid (%08x).\r\n", arm_vector[1]);
 8001b86:	9903      	ldr	r1, [sp, #12]
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <main+0xf4>)
 8001b8a:	f001 ff4b 	bl	8003a24 <iprintf>
 8001b8e:	e7d7      	b.n	8001b40 <main+0x80>
        flash_offset_mapping();
 8001b90:	f7ff fca2 	bl	80014d8 <flash_offset_mapping>
 8001b94:	9800      	ldr	r0, [sp, #0]
 8001b96:	e7bd      	b.n	8001b14 <main+0x54>
 8001b98:	2000d200 	.word	0x2000d200
 8001b9c:	08005ac0 	.word	0x08005ac0
 8001ba0:	20000bfc 	.word	0x20000bfc
 8001ba4:	08005b20 	.word	0x08005b20
 8001ba8:	08005ad0 	.word	0x08005ad0
 8001bac:	20000dec 	.word	0x20000dec
 8001bb0:	08005afc 	.word	0x08005afc
 8001bb4:	08005b3c 	.word	0x08005b3c

08001bb8 <sys_status_crypt>:
*/
static int sys_status_crypt(IN uint8_t mode,
                            IN uint8_t *input,
                            IN size_t length,
                            OUT uint8_t *output)
{
 8001bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bbc:	460f      	mov	r7, r1
    mbedtls_aes_context ctx;
    uint8_t key[AES_KEY_SZ], iv[AES_KEY_SZ];
    int keybits = AES_KEY_SZ * 8;
    int ret = 0;

    if ((length % AES_BLOCK_SZ != 0) || length == 0)
 8001bbe:	f012 010f 	ands.w	r1, r2, #15
{
 8001bc2:	b094      	sub	sp, #80	; 0x50
    if ((length % AES_BLOCK_SZ != 0) || length == 0)
 8001bc4:	d14b      	bne.n	8001c5e <sys_status_crypt+0xa6>
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	2a00      	cmp	r2, #0
 8001bca:	d048      	beq.n	8001c5e <sys_status_crypt+0xa6>
        return -1;

    memset(key, 0, sizeof(key));
 8001bcc:	2210      	movs	r2, #16
 8001bce:	4606      	mov	r6, r0
 8001bd0:	a803      	add	r0, sp, #12
 8001bd2:	4698      	mov	r8, r3
 8001bd4:	f001 fab1 	bl	800313a <memset>
    memcpy(key, SYS_STATUS_SALT, strlen(SYS_STATUS_SALT));
 8001bd8:	4822      	ldr	r0, [pc, #136]	; (8001c64 <sys_status_crypt+0xac>)
 8001bda:	f7fe ff8d 	bl	8000af8 <strlen>
 8001bde:	4921      	ldr	r1, [pc, #132]	; (8001c64 <sys_status_crypt+0xac>)
 8001be0:	4602      	mov	r2, r0
 8001be2:	a803      	add	r0, sp, #12
 8001be4:	f001 fa9c 	bl	8003120 <memcpy>
    mbedtls_md5_ret(key, AES_KEY_SZ, key);
 8001be8:	aa03      	add	r2, sp, #12
 8001bea:	4610      	mov	r0, r2
 8001bec:	2110      	movs	r1, #16
 8001bee:	f003 ff53 	bl	8005a98 <__mbedtls_md5_ret_veneer>

    mbedtls_aes_init(&ctx);
 8001bf2:	a80b      	add	r0, sp, #44	; 0x2c
 8001bf4:	f003 ff20 	bl	8005a38 <__mbedtls_aes_init_veneer>

    if (mode == MBEDTLS_AES_ENCRYPT) {
 8001bf8:	2e01      	cmp	r6, #1
        mbedtls_aes_setkey_enc(&ctx, key, keybits);
 8001bfa:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001bfe:	a903      	add	r1, sp, #12
 8001c00:	a80b      	add	r0, sp, #44	; 0x2c
    if (mode == MBEDTLS_AES_ENCRYPT) {
 8001c02:	d029      	beq.n	8001c58 <sys_status_crypt+0xa0>
    } else {
        mbedtls_aes_setkey_dec(&ctx, key, keybits);
 8001c04:	f003 ff10 	bl	8005a28 <__mbedtls_aes_setkey_dec_veneer>
    }

    ret = mbedtls_aes_crypt_ecb(&ctx, mode, input, output);
 8001c08:	4643      	mov	r3, r8
 8001c0a:	463a      	mov	r2, r7
 8001c0c:	4631      	mov	r1, r6
 8001c0e:	a80b      	add	r0, sp, #44	; 0x2c
 8001c10:	f003 ff32 	bl	8005a78 <__mbedtls_aes_crypt_ecb_veneer>
    if (ret != 0) goto exit;
 8001c14:	4605      	mov	r5, r0
 8001c16:	b908      	cbnz	r0, 8001c1c <sys_status_crypt+0x64>
    input += AES_BLOCK_SZ;
    length -= AES_BLOCK_SZ;

    if (length > 0) {
 8001c18:	3c10      	subs	r4, #16
 8001c1a:	d10b      	bne.n	8001c34 <sys_status_crypt+0x7c>
        output += AES_BLOCK_SZ;
        ret = mbedtls_aes_crypt_cbc(&ctx, mode, length, iv, input, output);
    }

exit:
    memset(key, 0, sizeof(key));
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	2100      	movs	r1, #0
 8001c20:	a803      	add	r0, sp, #12
 8001c22:	f001 fa8a 	bl	800313a <memset>
    mbedtls_aes_free(&ctx);
 8001c26:	a80b      	add	r0, sp, #44	; 0x2c
 8001c28:	f003 fede 	bl	80059e8 <__mbedtls_aes_free_veneer>
    return ret;
}
 8001c2c:	4628      	mov	r0, r5
 8001c2e:	b014      	add	sp, #80	; 0x50
 8001c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memset(iv , 0x5A, AES_KEY_SZ);
 8001c34:	2210      	movs	r2, #16
 8001c36:	215a      	movs	r1, #90	; 0x5a
 8001c38:	a807      	add	r0, sp, #28
 8001c3a:	f001 fa7e 	bl	800313a <memset>
    input += AES_BLOCK_SZ;
 8001c3e:	3710      	adds	r7, #16
        output += AES_BLOCK_SZ;
 8001c40:	f108 0210 	add.w	r2, r8, #16
        ret = mbedtls_aes_crypt_cbc(&ctx, mode, length, iv, input, output);
 8001c44:	e9cd 7200 	strd	r7, r2, [sp]
 8001c48:	4631      	mov	r1, r6
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	ab07      	add	r3, sp, #28
 8001c4e:	a80b      	add	r0, sp, #44	; 0x2c
 8001c50:	f003 fed2 	bl	80059f8 <__mbedtls_aes_crypt_cbc_veneer>
 8001c54:	4605      	mov	r5, r0
 8001c56:	e7e1      	b.n	8001c1c <sys_status_crypt+0x64>
        mbedtls_aes_setkey_enc(&ctx, key, keybits);
 8001c58:	f003 febe 	bl	80059d8 <__mbedtls_aes_setkey_enc_veneer>
 8001c5c:	e7d4      	b.n	8001c08 <sys_status_crypt+0x50>
        return -1;
 8001c5e:	f04f 35ff 	mov.w	r5, #4294967295
 8001c62:	e7e3      	b.n	8001c2c <sys_status_crypt+0x74>
 8001c64:	08005b6c 	.word	0x08005b6c

08001c68 <active_header_get>:
      \arg        SYS_STATUS_ERR_CRYPT: crypt error
      \arg        SYS_STATUS_ERR_MAGIC: magic error
*/
static int active_header_get(OUT struct sys_status_header_t *sys_hdr,
                             OUT uint32_t *flash_offset)
{
 8001c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6c:	b088      	sub	sp, #32
 8001c6e:	4606      	mov	r6, r0
 8001c70:	460d      	mov	r5, r1
    uint32_t cnt_ping, cnt_pong;
    int ping_valid = 1, pong_valid = 1;
    int is_ping, ret, status;

    /* Read PING header */
    ret = flash_indirect_read(FLASH_OFFSET_SYS_STATUS_PING, blk_ping, AES_BLOCK_SZ);
 8001c72:	2210      	movs	r2, #16
 8001c74:	4669      	mov	r1, sp
 8001c76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c7a:	f7ff fc9f 	bl	80015bc <flash_indirect_read>
    if (ret != 0) {
 8001c7e:	b120      	cbz	r0, 8001c8a <active_header_get+0x22>
        status = SYS_STATUS_ERR_FLASH;
 8001c80:	2401      	movs	r4, #1
    }

    status = SYS_STATUS_OK;
exit:
    return status;
}
 8001c82:	4620      	mov	r0, r4
 8001c84:	b008      	add	sp, #32
 8001c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sys_status_crypt(MBEDTLS_AES_DECRYPT, blk_ping, AES_BLOCK_SZ, blk_ping);
 8001c8a:	466b      	mov	r3, sp
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	4669      	mov	r1, sp
 8001c90:	f7ff ff92 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) {
 8001c94:	bb58      	cbnz	r0, 8001cee <active_header_get+0x86>
    if (hdr->magic != SYS_STATUS_MAGIC_CODE) {
 8001c96:	e9dd 7801 	ldrd	r7, r8, [sp, #4]
    ret = flash_indirect_read(FLASH_OFFSET_SYS_STATUS_PONG, blk_pong, AES_BLOCK_SZ);
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	f44f 4010 	mov.w	r0, #36864	; 0x9000
 8001ca0:	a904      	add	r1, sp, #16
 8001ca2:	f7ff fc8b 	bl	80015bc <flash_indirect_read>
    if (ret != 0) {
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d1ea      	bne.n	8001c80 <active_header_get+0x18>
    ret = sys_status_crypt(MBEDTLS_AES_DECRYPT, blk_pong, AES_BLOCK_SZ, blk_pong);
 8001caa:	ab04      	add	r3, sp, #16
 8001cac:	2210      	movs	r2, #16
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7ff ff82 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) {
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	b9d0      	cbnz	r0, 8001cee <active_header_get+0x86>
    if (hdr->magic != SYS_STATUS_MAGIC_CODE) {
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <active_header_get+0xb8>)
 8001cba:	9a06      	ldr	r2, [sp, #24]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d01b      	beq.n	8001cf8 <active_header_get+0x90>
    if ((ping_valid == 0) && ((pong_valid == 0))) {
 8001cc0:	4598      	cmp	r8, r3
 8001cc2:	d00b      	beq.n	8001cdc <active_header_get+0x74>
        status = SYS_STATUS_ERR_MAGIC;
 8001cc4:	2408      	movs	r4, #8
    return status;
 8001cc6:	e7dc      	b.n	8001c82 <active_header_get+0x1a>
        if (cnt_ping == 0xFFFFFFFF)  /* First use, valid count is from 0 to 0xFFFFFFFE */
 8001cc8:	1c79      	adds	r1, r7, #1
 8001cca:	d021      	beq.n	8001d10 <active_header_get+0xa8>
        if (cnt_pong == 0xFFFFFFFF)  /* First use, valid count is from 0 to 0xFFFFFFFE */
 8001ccc:	1c58      	adds	r0, r3, #1
 8001cce:	d023      	beq.n	8001d18 <active_header_get+0xb0>
 8001cd0:	1c5a      	adds	r2, r3, #1
        if ((cnt_ping == (cnt_pong + 1)) || (cnt_ping == (cnt_pong + 2))) {
 8001cd2:	4297      	cmp	r7, r2
 8001cd4:	d002      	beq.n	8001cdc <active_header_get+0x74>
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	429f      	cmp	r7, r3
 8001cda:	d110      	bne.n	8001cfe <active_header_get+0x96>
        memcpy((void*)sys_hdr, blk_ping, SYS_STATUS_HEADER_SZ);
 8001cdc:	4669      	mov	r1, sp
 8001cde:	4630      	mov	r0, r6
 8001ce0:	2210      	movs	r2, #16
 8001ce2:	f001 fa1d 	bl	8003120 <memcpy>
        *flash_offset = FLASH_OFFSET_SYS_STATUS_PING;
 8001ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cea:	602b      	str	r3, [r5, #0]
 8001cec:	e7c9      	b.n	8001c82 <active_header_get+0x1a>
        status = SYS_STATUS_ERR_CRYPT;
 8001cee:	2440      	movs	r4, #64	; 0x40
}
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	b008      	add	sp, #32
 8001cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if ((ping_valid == 0) && ((pong_valid == 1))) {
 8001cf8:	4590      	cmp	r8, r2
    cnt_pong = hdr->act_cntr;
 8001cfa:	9b05      	ldr	r3, [sp, #20]
    } else if ((ping_valid == 0) && ((pong_valid == 1))) {
 8001cfc:	d0e4      	beq.n	8001cc8 <active_header_get+0x60>
        memcpy((void*)sys_hdr, blk_pong, SYS_STATUS_HEADER_SZ);
 8001cfe:	4630      	mov	r0, r6
 8001d00:	2210      	movs	r2, #16
 8001d02:	a904      	add	r1, sp, #16
 8001d04:	f001 fa0c 	bl	8003120 <memcpy>
        *flash_offset = FLASH_OFFSET_SYS_STATUS_PONG;
 8001d08:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8001d0c:	602b      	str	r3, [r5, #0]
 8001d0e:	e7b8      	b.n	8001c82 <active_header_get+0x1a>
        if (cnt_pong == 0xFFFFFFFF)  /* First use, valid count is from 0 to 0xFFFFFFFE */
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	d0f4      	beq.n	8001cfe <active_header_get+0x96>
            cnt_ping = 0;
 8001d14:	4607      	mov	r7, r0
 8001d16:	e7db      	b.n	8001cd0 <active_header_get+0x68>
 8001d18:	2201      	movs	r2, #1
            cnt_pong = 0;
 8001d1a:	4623      	mov	r3, r4
 8001d1c:	e7d9      	b.n	8001cd2 <active_header_get+0x6a>
 8001d1e:	bf00      	nop
 8001d20:	19342750 	.word	0x19342750

08001d24 <sys_status_internal_set>:
      \arg        SYS_STATUS_ERR_CRYPT: crypt error
      \arg        SYS_STATUS_ERR_CHECKSUM: checksum error
      \arg        SYS_STATUS_ERR_TLV: tlv error
*/
static int sys_status_internal_set(uint8_t type, uint8_t len, uint8_t* pval)
{
 8001d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    struct sys_status_header_t sys_hdr, *hdr;
    uint32_t start, newstart, tlen, nlen, olen;
    uint8_t *buf = NULL, *p;
    int loc, ret, status;

    if ((len > MAX_TLV_VALUE_SIZE) || (len == 0)) {
 8001d28:	1e4b      	subs	r3, r1, #1
 8001d2a:	2b0f      	cmp	r3, #15
{
 8001d2c:	b089      	sub	sp, #36	; 0x24
    if ((len > MAX_TLV_VALUE_SIZE) || (len == 0)) {
 8001d2e:	d855      	bhi.n	8001ddc <sys_status_internal_set+0xb8>
        status = SYS_STATUS_ERR_INPUT;
        goto exit1;
    }
    mbl_trace(MBL_DBG, "Set sys status type %d.\r\n", type);
 8001d30:	4f87      	ldr	r7, [pc, #540]	; (8001f50 <sys_status_internal_set+0x22c>)
 8001d32:	460c      	mov	r4, r1
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4605      	mov	r5, r0
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	4616      	mov	r6, r2
 8001d3c:	dc42      	bgt.n	8001dc4 <sys_status_internal_set+0xa0>

    /* Found the active system status */
    status = active_header_get(&sys_hdr, &start);
 8001d3e:	a903      	add	r1, sp, #12
 8001d40:	a804      	add	r0, sp, #16
 8001d42:	f7ff ff91 	bl	8001c68 <active_header_get>
    if (status != SYS_STATUS_OK) {
 8001d46:	4680      	mov	r8, r0
 8001d48:	bb60      	cbnz	r0, 8001da4 <sys_status_internal_set+0x80>
        goto exit;
    }

    /* Check header */
    if (sys_hdr.tot_len > SYS_STATUS_AREA_SZ) {
 8001d4a:	9b04      	ldr	r3, [sp, #16]
 8001d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d50:	d854      	bhi.n	8001dfc <sys_status_internal_set+0xd8>
        status = SYS_STATUS_ERR_TOTAL_LEN;
        goto exit;
    }
    if (sys_hdr.magic != SYS_STATUS_MAGIC_CODE) {
 8001d52:	4a80      	ldr	r2, [pc, #512]	; (8001f54 <sys_status_internal_set+0x230>)
 8001d54:	9906      	ldr	r1, [sp, #24]
 8001d56:	4291      	cmp	r1, r2
 8001d58:	d147      	bne.n	8001dea <sys_status_internal_set+0xc6>
        status = SYS_STATUS_ERR_MAGIC;
        goto exit;
    }

    /* Get active system status */
    if (sys_hdr.tot_len % AES_BLOCK_SZ) {
 8001d5a:	0719      	lsls	r1, r3, #28
        tlen = ((sys_hdr.tot_len >> 4) << 4) + AES_BLOCK_SZ;
    } else {
        tlen = sys_hdr.tot_len;
    }
    nlen = sys_hdr.tot_len + SYS_STATUS_TLV_HEADER_SZ + len;
 8001d5c:	f103 0802 	add.w	r8, r3, #2
 8001d60:	44a0      	add	r8, r4
        tlen = ((sys_hdr.tot_len >> 4) << 4) + AES_BLOCK_SZ;
 8001d62:	bf16      	itet	ne
 8001d64:	f023 0b0f 	bicne.w	fp, r3, #15
 8001d68:	469b      	moveq	fp, r3
 8001d6a:	f10b 0b10 	addne.w	fp, fp, #16
    if (nlen % AES_BLOCK_SZ) {
 8001d6e:	f018 0f0f 	tst.w	r8, #15
        nlen = ((nlen >> 4) << 4) + AES_BLOCK_SZ;
 8001d72:	bf1c      	itt	ne
 8001d74:	f028 080f 	bicne.w	r8, r8, #15
 8001d78:	f108 0810 	addne.w	r8, r8, #16
    }
    buf = mbedtls_calloc(nlen, 1);  // consider new tlv entry
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4640      	mov	r0, r8
 8001d80:	f003 fe62 	bl	8005a48 <__mbedtls_calloc_veneer>
    if (NULL == buf) {
 8001d84:	4681      	mov	r9, r0
 8001d86:	2800      	cmp	r0, #0
 8001d88:	d067      	beq.n	8001e5a <sys_status_internal_set+0x136>
        status = SYS_STATUS_ERR_MEM;
        goto exit;
    }
    ret = flash_indirect_read(start, buf, tlen);
 8001d8a:	4601      	mov	r1, r0
 8001d8c:	465a      	mov	r2, fp
 8001d8e:	9803      	ldr	r0, [sp, #12]
 8001d90:	f7ff fc14 	bl	80015bc <flash_indirect_read>
    if (ret != 0) {
 8001d94:	4682      	mov	sl, r0
 8001d96:	2800      	cmp	r0, #0
 8001d98:	d036      	beq.n	8001e08 <sys_status_internal_set+0xe4>

    status = SYS_STATUS_OK;

exit:
    if (buf)
        mbedtls_free(buf);
 8001d9a:	4648      	mov	r0, r9
 8001d9c:	f003 fe5c 	bl	8005a58 <__mbedtls_free_veneer>
        status = SYS_STATUS_ERR_FLASH;
 8001da0:	f04f 0801 	mov.w	r8, #1
exit1:
    if (status != SYS_STATUS_OK)
        mbl_trace(MBL_WARN, "Status set failed(0x%x,%d).\r\n", status, ret);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	dc03      	bgt.n	8001db2 <sys_status_internal_set+0x8e>
    return status;
}
 8001daa:	4640      	mov	r0, r8
 8001dac:	b009      	add	sp, #36	; 0x24
 8001dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbl_trace(MBL_WARN, "Status set failed(0x%x,%d).\r\n", status, ret);
 8001db2:	4652      	mov	r2, sl
 8001db4:	4641      	mov	r1, r8
 8001db6:	4868      	ldr	r0, [pc, #416]	; (8001f58 <sys_status_internal_set+0x234>)
 8001db8:	f001 fe34 	bl	8003a24 <iprintf>
}
 8001dbc:	4640      	mov	r0, r8
 8001dbe:	b009      	add	sp, #36	; 0x24
 8001dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mbl_trace(MBL_DBG, "Set sys status type %d.\r\n", type);
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	4865      	ldr	r0, [pc, #404]	; (8001f5c <sys_status_internal_set+0x238>)
 8001dc8:	f001 fe2c 	bl	8003a24 <iprintf>
    status = active_header_get(&sys_hdr, &start);
 8001dcc:	a903      	add	r1, sp, #12
 8001dce:	a804      	add	r0, sp, #16
 8001dd0:	f7ff ff4a 	bl	8001c68 <active_header_get>
    if (status != SYS_STATUS_OK) {
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	2800      	cmp	r0, #0
 8001dd8:	d0b7      	beq.n	8001d4a <sys_status_internal_set+0x26>
 8001dda:	e7e3      	b.n	8001da4 <sys_status_internal_set+0x80>
 8001ddc:	4f5c      	ldr	r7, [pc, #368]	; (8001f50 <sys_status_internal_set+0x22c>)
        status = SYS_STATUS_ERR_INPUT;
 8001dde:	f44f 7880 	mov.w	r8, #256	; 0x100
        mbl_trace(MBL_WARN, "Status set failed(0x%x,%d).\r\n", status, ret);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	dde0      	ble.n	8001daa <sys_status_internal_set+0x86>
 8001de8:	e7e3      	b.n	8001db2 <sys_status_internal_set+0x8e>
 8001dea:	683b      	ldr	r3, [r7, #0]
        status = SYS_STATUS_ERR_MAGIC;
 8001dec:	f04f 0808 	mov.w	r8, #8
        mbl_trace(MBL_WARN, "Status set failed(0x%x,%d).\r\n", status, ret);
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	ddda      	ble.n	8001daa <sys_status_internal_set+0x86>
 8001df4:	e7dd      	b.n	8001db2 <sys_status_internal_set+0x8e>
        mbedtls_free(buf);
 8001df6:	4648      	mov	r0, r9
 8001df8:	f003 fe2e 	bl	8005a58 <__mbedtls_free_veneer>
        mbl_trace(MBL_WARN, "Status set failed(0x%x,%d).\r\n", status, ret);
 8001dfc:	683b      	ldr	r3, [r7, #0]
            status = SYS_STATUS_ERR_TOTAL_LEN;
 8001dfe:	f04f 0804 	mov.w	r8, #4
        mbl_trace(MBL_WARN, "Status set failed(0x%x,%d).\r\n", status, ret);
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	ddd1      	ble.n	8001daa <sys_status_internal_set+0x86>
 8001e06:	e7d4      	b.n	8001db2 <sys_status_internal_set+0x8e>
    ret = sys_status_crypt(MBEDTLS_AES_DECRYPT, buf, tlen, buf);
 8001e08:	464b      	mov	r3, r9
 8001e0a:	465a      	mov	r2, fp
 8001e0c:	4649      	mov	r1, r9
 8001e0e:	f7ff fed3 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) {
 8001e12:	4682      	mov	sl, r0
 8001e14:	bb20      	cbnz	r0, 8001e60 <sys_status_internal_set+0x13c>
    loc = tlv_find_by_type((buf + SYS_STATUS_HEADER_SZ), (sys_hdr.tot_len - SYS_STATUS_HEADER_SZ), type); /* Check if found */
 8001e16:	f8dd e010 	ldr.w	lr, [sp, #16]
 8001e1a:	f109 0310 	add.w	r3, r9, #16
    while (offset < len) {
 8001e1e:	f1be 0c10 	subs.w	ip, lr, #16
    loc = tlv_find_by_type((buf + SYS_STATUS_HEADER_SZ), (sys_hdr.tot_len - SYS_STATUS_HEADER_SZ), type); /* Check if found */
 8001e22:	9301      	str	r3, [sp, #4]
    while (offset < len) {
 8001e24:	d022      	beq.n	8001e6c <sys_status_internal_set+0x148>
    p = buf;
 8001e26:	461a      	mov	r2, r3
    uint32_t offset = 0;
 8001e28:	4601      	mov	r1, r0
 8001e2a:	e002      	b.n	8001e32 <sys_status_internal_set+0x10e>
        offset += SYS_STATUS_TLV_HEADER_SZ + l;
 8001e2c:	4419      	add	r1, r3
    while (offset < len) {
 8001e2e:	458c      	cmp	ip, r1
 8001e30:	d91c      	bls.n	8001e6c <sys_status_internal_set+0x148>
        if (t == type) {
 8001e32:	7810      	ldrb	r0, [r2, #0]
        t = *p;  l = *(p + 1);
 8001e34:	7853      	ldrb	r3, [r2, #1]
        if (t == type) {
 8001e36:	42a8      	cmp	r0, r5
        p += SYS_STATUS_TLV_HEADER_SZ + l;
 8001e38:	f103 0302 	add.w	r3, r3, #2
 8001e3c:	441a      	add	r2, r3
        if (t == type) {
 8001e3e:	d1f5      	bne.n	8001e2c <sys_status_internal_set+0x108>
    if (loc >= 0) {  // already existed, need to update
 8001e40:	2900      	cmp	r1, #0
 8001e42:	db13      	blt.n	8001e6c <sys_status_internal_set+0x148>
        olen = *(buf + AES_BLOCK_SZ + loc + 1);
 8001e44:	eb09 0301 	add.w	r3, r9, r1
        if (olen == len) {
 8001e48:	7c5b      	ldrb	r3, [r3, #17]
 8001e4a:	42a3      	cmp	r3, r4
 8001e4c:	d075      	beq.n	8001f3a <sys_status_internal_set+0x216>
        mbedtls_free(buf);
 8001e4e:	4648      	mov	r0, r9
 8001e50:	f003 fe02 	bl	8005a58 <__mbedtls_free_veneer>
            status = SYS_STATUS_ERR_TLV;
 8001e54:	f04f 0820 	mov.w	r8, #32
 8001e58:	e7a4      	b.n	8001da4 <sys_status_internal_set+0x80>
        status = SYS_STATUS_ERR_MEM;
 8001e5a:	f04f 0880 	mov.w	r8, #128	; 0x80
 8001e5e:	e7a1      	b.n	8001da4 <sys_status_internal_set+0x80>
        mbedtls_free(buf);
 8001e60:	4648      	mov	r0, r9
 8001e62:	f003 fdf9 	bl	8005a58 <__mbedtls_free_veneer>
        status = SYS_STATUS_ERR_CRYPT;
 8001e66:	f04f 0840 	mov.w	r8, #64	; 0x40
 8001e6a:	e79b      	b.n	8001da4 <sys_status_internal_set+0x80>
        if (sys_hdr.tot_len + SYS_STATUS_TLV_HEADER_SZ + len > SYS_STATUS_AREA_SZ) {
 8001e6c:	f10e 0302 	add.w	r3, lr, #2
 8001e70:	4423      	add	r3, r4
 8001e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e76:	d8be      	bhi.n	8001df6 <sys_status_internal_set+0xd2>
        p = buf + sys_hdr.tot_len;
 8001e78:	eb09 030e 	add.w	r3, r9, lr
        *p++ = len;
 8001e7c:	f103 0a02 	add.w	sl, r3, #2
        *p++ = type;
 8001e80:	f809 500e 	strb.w	r5, [r9, lr]
        memcpy(p, pval, len);
 8001e84:	4631      	mov	r1, r6
        *p++ = len;
 8001e86:	705c      	strb	r4, [r3, #1]
        memcpy(p, pval, len);
 8001e88:	4622      	mov	r2, r4
 8001e8a:	4650      	mov	r0, sl
 8001e8c:	f001 f948 	bl	8003120 <memcpy>
        p += len;
 8001e90:	eb0a 0004 	add.w	r0, sl, r4
        memset(p, 0xFF, (nlen - ((uint32_t)p - (uint32_t)buf)));
 8001e94:	eb09 0208 	add.w	r2, r9, r8
 8001e98:	21ff      	movs	r1, #255	; 0xff
 8001e9a:	1a12      	subs	r2, r2, r0
 8001e9c:	f001 f94d 	bl	800313a <memset>
        sys_hdr.tot_len += SYS_STATUS_TLV_HEADER_SZ + len;
 8001ea0:	9b04      	ldr	r3, [sp, #16]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	1919      	adds	r1, r3, r4
 8001ea6:	9104      	str	r1, [sp, #16]
    if (sys_hdr.act_cntr == 0xFFFFFFFE)
 8001ea8:	9b05      	ldr	r3, [sp, #20]
    hdr->checksum = checksum_cal(buf, hdr->tot_len);
 8001eaa:	4648      	mov	r0, r9
    if (sys_hdr.act_cntr == 0xFFFFFFFE)
 8001eac:	1c9a      	adds	r2, r3, #2
        hdr->act_cntr = 0;
 8001eae:	bf08      	it	eq
 8001eb0:	2300      	moveq	r3, #0
    hdr->checksum = 0;
 8001eb2:	f04f 0200 	mov.w	r2, #0
        hdr->act_cntr = sys_hdr.act_cntr + 1;
 8001eb6:	bf18      	it	ne
 8001eb8:	3301      	addne	r3, #1
    hdr->tot_len = sys_hdr.tot_len;
 8001eba:	f8c9 1000 	str.w	r1, [r9]
        hdr->act_cntr = sys_hdr.act_cntr + 1;
 8001ebe:	f8c9 3004 	str.w	r3, [r9, #4]
    hdr->checksum = 0;
 8001ec2:	f8c9 200c 	str.w	r2, [r9, #12]
    hdr->checksum = checksum_cal(buf, hdr->tot_len);
 8001ec6:	f7ff fd75 	bl	80019b4 <checksum_cal>
    ret = sys_status_crypt(MBEDTLS_AES_ENCRYPT, buf, tlen, buf);
 8001eca:	464b      	mov	r3, r9
    hdr->checksum = checksum_cal(buf, hdr->tot_len);
 8001ecc:	f8c9 000c 	str.w	r0, [r9, #12]
    ret = sys_status_crypt(MBEDTLS_AES_ENCRYPT, buf, tlen, buf);
 8001ed0:	4642      	mov	r2, r8
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7ff fe6f 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) {
 8001eda:	4682      	mov	sl, r0
 8001edc:	2800      	cmp	r0, #0
 8001ede:	d1bf      	bne.n	8001e60 <sys_status_internal_set+0x13c>
    if (start == FLASH_OFFSET_SYS_STATUS_PING)
 8001ee0:	9b03      	ldr	r3, [sp, #12]
    ret = flash_erase(newstart, SYS_STATUS_AREA_SZ);
 8001ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
        newstart = FLASH_OFFSET_SYS_STATUS_PING;
 8001ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eea:	bf0c      	ite	eq
 8001eec:	f44f 4410 	moveq.w	r4, #36864	; 0x9000
 8001ef0:	f44f 4400 	movne.w	r4, #32768	; 0x8000
    ret = flash_erase(newstart, SYS_STATUS_AREA_SZ);
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff fcf7 	bl	80018e8 <flash_erase>
    if (ret != 0) {
 8001efa:	4682      	mov	sl, r0
 8001efc:	2800      	cmp	r0, #0
 8001efe:	f47f af4c 	bne.w	8001d9a <sys_status_internal_set+0x76>
    ret = flash_write((newstart + AES_BLOCK_SZ), (buf + AES_BLOCK_SZ), (tlen - AES_BLOCK_SZ));
 8001f02:	9901      	ldr	r1, [sp, #4]
 8001f04:	f1a8 0210 	sub.w	r2, r8, #16
 8001f08:	f104 0010 	add.w	r0, r4, #16
 8001f0c:	f7ff fba0 	bl	8001650 <flash_write>
    if (ret != 0) {
 8001f10:	4682      	mov	sl, r0
 8001f12:	2800      	cmp	r0, #0
 8001f14:	f47f af41 	bne.w	8001d9a <sys_status_internal_set+0x76>
    ret = flash_write(newstart, buf, AES_BLOCK_SZ);
 8001f18:	4620      	mov	r0, r4
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	f7ff fb97 	bl	8001650 <flash_write>
 8001f22:	4680      	mov	r8, r0
        mbedtls_free(buf);
 8001f24:	4648      	mov	r0, r9
 8001f26:	f003 fd97 	bl	8005a58 <__mbedtls_free_veneer>
    if (status != SYS_STATUS_OK)
 8001f2a:	f1b8 0f00 	cmp.w	r8, #0
 8001f2e:	f43f af3c 	beq.w	8001daa <sys_status_internal_set+0x86>
 8001f32:	46c2      	mov	sl, r8
        status = SYS_STATUS_ERR_FLASH;
 8001f34:	f04f 0801 	mov.w	r8, #1
 8001f38:	e734      	b.n	8001da4 <sys_status_internal_set+0x80>
            p = buf + AES_BLOCK_SZ + loc + SYS_STATUS_TLV_HEADER_SZ;
 8001f3a:	3112      	adds	r1, #18
            memcpy(p, pval, olen);
 8001f3c:	eb09 0001 	add.w	r0, r9, r1
 8001f40:	4622      	mov	r2, r4
 8001f42:	4631      	mov	r1, r6
 8001f44:	f001 f8ec 	bl	8003120 <memcpy>
 8001f48:	46d8      	mov	r8, fp
 8001f4a:	9904      	ldr	r1, [sp, #16]
 8001f4c:	e7ac      	b.n	8001ea8 <sys_status_internal_set+0x184>
 8001f4e:	bf00      	nop
 8001f50:	20000bfc 	.word	0x20000bfc
 8001f54:	19342750 	.word	0x19342750
 8001f58:	08005b9c 	.word	0x08005b9c
 8001f5c:	08005b7c 	.word	0x08005b7c

08001f60 <mbedtls_init>:
{
 8001f60:	b508      	push	{r3, lr}
    mbedtls_memory_buffer_alloc_init(alloc_buf, sizeof(alloc_buf));
 8001f62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f66:	4808      	ldr	r0, [pc, #32]	; (8001f88 <mbedtls_init+0x28>)
 8001f68:	f003 fd2e 	bl	80059c8 <__mbedtls_memory_buffer_alloc_init_veneer>
    rcu_periph_clock_enable(RCU_HAU);
 8001f6c:	f640 5005 	movw	r0, #3333	; 0xd05
 8001f70:	f000 fe7c 	bl	8002c6c <rcu_periph_clock_enable>
    rcu_periph_clock_enable(RCU_CAU);
 8001f74:	f640 5004 	movw	r0, #3332	; 0xd04
 8001f78:	f000 fe78 	bl	8002c6c <rcu_periph_clock_enable>
}
 8001f7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    rcu_periph_clock_enable(RCU_PKCAU);
 8001f80:	f640 5003 	movw	r0, #3331	; 0xd03
 8001f84:	f000 be72 	b.w	8002c6c <rcu_periph_clock_enable>
 8001f88:	20000df0 	.word	0x20000df0

08001f8c <sys_status_init>:
{
 8001f8c:	b530      	push	{r4, r5, lr}
    sys_hdr.act_cntr = 0;
 8001f8e:	2100      	movs	r1, #0
    sys_hdr.tot_len = AES_BLOCK_SZ;
 8001f90:	2410      	movs	r4, #16
    sys_hdr.magic = SYS_STATUS_MAGIC_CODE;
 8001f92:	4817      	ldr	r0, [pc, #92]	; (8001ff0 <sys_status_init+0x64>)
{
 8001f94:	b085      	sub	sp, #20
    sys_hdr.checksum = (sys_hdr.tot_len ^ sys_hdr.magic);
 8001f96:	4d17      	ldr	r5, [pc, #92]	; (8001ff4 <sys_status_init+0x68>)
    sys_hdr.act_cntr = 0;
 8001f98:	e9cd 4100 	strd	r4, r1, [sp]
    sys_hdr.magic = SYS_STATUS_MAGIC_CODE;
 8001f9c:	9002      	str	r0, [sp, #8]
    ret = sys_status_crypt(MBEDTLS_AES_ENCRYPT, (uint8_t*)&sys_hdr, AES_BLOCK_SZ, (uint8_t*)&sys_hdr);
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	466b      	mov	r3, sp
 8001fa2:	4669      	mov	r1, sp
 8001fa4:	2001      	movs	r0, #1
    sys_hdr.checksum = (sys_hdr.tot_len ^ sys_hdr.magic);
 8001fa6:	9503      	str	r5, [sp, #12]
    ret = sys_status_crypt(MBEDTLS_AES_ENCRYPT, (uint8_t*)&sys_hdr, AES_BLOCK_SZ, (uint8_t*)&sys_hdr);
 8001fa8:	f7ff fe06 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) {
 8001fac:	b9e0      	cbnz	r0, 8001fe8 <sys_status_init+0x5c>
    ret = flash_erase(FLASH_OFFSET_SYS_STATUS_PING, SYS_STATUS_AREA_SZ * 2);
 8001fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fb6:	f7ff fc97 	bl	80018e8 <flash_erase>
    if (ret != 0) {
 8001fba:	b110      	cbz	r0, 8001fc2 <sys_status_init+0x36>
        status = SYS_STATUS_ERR_FLASH;
 8001fbc:	2001      	movs	r0, #1
}
 8001fbe:	b005      	add	sp, #20
 8001fc0:	bd30      	pop	{r4, r5, pc}
    ret = flash_write(FLASH_OFFSET_SYS_STATUS_PING, (void*)&sys_hdr, AES_BLOCK_SZ);
 8001fc2:	4622      	mov	r2, r4
 8001fc4:	4669      	mov	r1, sp
 8001fc6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fca:	f7ff fb41 	bl	8001650 <flash_write>
    if (ret != 0) {
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	d1f4      	bne.n	8001fbc <sys_status_init+0x30>
    ret = flash_write(FLASH_OFFSET_SYS_STATUS_PONG, (void*)&sys_hdr, AES_BLOCK_SZ);
 8001fd2:	4622      	mov	r2, r4
 8001fd4:	4669      	mov	r1, sp
 8001fd6:	f44f 4010 	mov.w	r0, #36864	; 0x9000
 8001fda:	f7ff fb39 	bl	8001650 <flash_write>
    if (ret != 0) {
 8001fde:	3800      	subs	r0, #0
 8001fe0:	bf18      	it	ne
 8001fe2:	2001      	movne	r0, #1
}
 8001fe4:	b005      	add	sp, #20
 8001fe6:	bd30      	pop	{r4, r5, pc}
        status = SYS_STATUS_ERR_CRYPT;
 8001fe8:	2040      	movs	r0, #64	; 0x40
}
 8001fea:	b005      	add	sp, #20
 8001fec:	bd30      	pop	{r4, r5, pc}
 8001fee:	bf00      	nop
 8001ff0:	19342750 	.word	0x19342750
 8001ff4:	19342740 	.word	0x19342740

08001ff8 <sys_statu_integritys_check>:
{
 8001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffa:	b087      	sub	sp, #28
    status = active_header_get(&sys_hdr, &flash_offset);
 8001ffc:	a901      	add	r1, sp, #4
 8001ffe:	a802      	add	r0, sp, #8
 8002000:	f7ff fe32 	bl	8001c68 <active_header_get>
    if (status != SYS_STATUS_OK) {
 8002004:	4604      	mov	r4, r0
 8002006:	b9f0      	cbnz	r0, 8002046 <sys_statu_integritys_check+0x4e>
    if ((sys_hdr.tot_len > SYS_STATUS_AREA_SZ) || (sys_hdr.tot_len < SYS_STATUS_HEADER_SZ)) {
 8002008:	9c02      	ldr	r4, [sp, #8]
 800200a:	f1a4 0310 	sub.w	r3, r4, #16
 800200e:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8002012:	d842      	bhi.n	800209a <sys_statu_integritys_check+0xa2>
    if (sys_hdr.magic != SYS_STATUS_MAGIC_CODE) {
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <sys_statu_integritys_check+0xbc>)
 8002016:	9a04      	ldr	r2, [sp, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d117      	bne.n	800204c <sys_statu_integritys_check+0x54>
    if (sys_hdr.tot_len % AES_BLOCK_SZ) {
 800201c:	0723      	lsls	r3, r4, #28
        alen = ((sys_hdr.tot_len >> 4) << 4) + AES_BLOCK_SZ;
 800201e:	bf1c      	itt	ne
 8002020:	f024 040f 	bicne.w	r4, r4, #15
 8002024:	3410      	addne	r4, #16
    buf = mbedtls_calloc(alen, 1);
 8002026:	2101      	movs	r1, #1
 8002028:	4620      	mov	r0, r4
 800202a:	f003 fd0d 	bl	8005a48 <__mbedtls_calloc_veneer>
    if (NULL == buf) {
 800202e:	4605      	mov	r5, r0
 8002030:	b3b8      	cbz	r0, 80020a2 <sys_statu_integritys_check+0xaa>
    ret = flash_indirect_read(flash_offset, buf, alen);
 8002032:	4601      	mov	r1, r0
 8002034:	4622      	mov	r2, r4
 8002036:	9801      	ldr	r0, [sp, #4]
 8002038:	f7ff fac0 	bl	80015bc <flash_indirect_read>
    if (ret != 0) {
 800203c:	b150      	cbz	r0, 8002054 <sys_statu_integritys_check+0x5c>
        status = SYS_STATUS_ERR_FLASH;
 800203e:	2401      	movs	r4, #1
        mbedtls_free(buf);
 8002040:	4628      	mov	r0, r5
 8002042:	f003 fd09 	bl	8005a58 <__mbedtls_free_veneer>
}
 8002046:	4620      	mov	r0, r4
 8002048:	b007      	add	sp, #28
 800204a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = SYS_STATUS_ERR_MAGIC;
 800204c:	2408      	movs	r4, #8
}
 800204e:	4620      	mov	r0, r4
 8002050:	b007      	add	sp, #28
 8002052:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = sys_status_crypt(MBEDTLS_AES_DECRYPT, buf, alen, buf);
 8002054:	4622      	mov	r2, r4
 8002056:	462b      	mov	r3, r5
 8002058:	4629      	mov	r1, r5
 800205a:	f7ff fdad 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) {
 800205e:	4604      	mov	r4, r0
 8002060:	bb18      	cbnz	r0, 80020aa <sys_statu_integritys_check+0xb2>
    if (checksum_cal(buf, sys_hdr.tot_len) != 0) {
 8002062:	4628      	mov	r0, r5
 8002064:	9902      	ldr	r1, [sp, #8]
 8002066:	f7ff fca5 	bl	80019b4 <checksum_cal>
 800206a:	bb00      	cbnz	r0, 80020ae <sys_statu_integritys_check+0xb6>
    sz = sys_hdr.tot_len - SYS_STATUS_HEADER_SZ;
 800206c:	9902      	ldr	r1, [sp, #8]
    p = buf + SYS_STATUS_HEADER_SZ;
 800206e:	f105 0310 	add.w	r3, r5, #16
    while (sz > 0) {
 8002072:	3910      	subs	r1, #16
 8002074:	d0e4      	beq.n	8002040 <sys_statu_integritys_check+0x48>
        sz -= SYS_STATUS_TLV_HEADER_SZ + l;
 8002076:	f06f 0701 	mvn.w	r7, #1
 800207a:	e003      	b.n	8002084 <sys_statu_integritys_check+0x8c>
        if ((t == SYS_UNKNOWN_TYPE) || (l > MAX_TLV_VALUE_SIZE)) {
 800207c:	2a10      	cmp	r2, #16
 800207e:	d80a      	bhi.n	8002096 <sys_statu_integritys_check+0x9e>
    while (sz > 0) {
 8002080:	1809      	adds	r1, r1, r0
 8002082:	d0dd      	beq.n	8002040 <sys_statu_integritys_check+0x48>
        if ((t == SYS_UNKNOWN_TYPE) || (l > MAX_TLV_VALUE_SIZE)) {
 8002084:	7818      	ldrb	r0, [r3, #0]
        t = *p; l = *(p + 1);
 8002086:	785a      	ldrb	r2, [r3, #1]
        if ((t == SYS_UNKNOWN_TYPE) || (l > MAX_TLV_VALUE_SIZE)) {
 8002088:	28ff      	cmp	r0, #255	; 0xff
        p += SYS_STATUS_TLV_HEADER_SZ + l;
 800208a:	f102 0602 	add.w	r6, r2, #2
        sz -= SYS_STATUS_TLV_HEADER_SZ + l;
 800208e:	eba7 0002 	sub.w	r0, r7, r2
        p += SYS_STATUS_TLV_HEADER_SZ + l;
 8002092:	4433      	add	r3, r6
        if ((t == SYS_UNKNOWN_TYPE) || (l > MAX_TLV_VALUE_SIZE)) {
 8002094:	d1f2      	bne.n	800207c <sys_statu_integritys_check+0x84>
            status = SYS_STATUS_ERR_TLV;
 8002096:	2420      	movs	r4, #32
 8002098:	e7d2      	b.n	8002040 <sys_statu_integritys_check+0x48>
        status = SYS_STATUS_ERR_TOTAL_LEN;
 800209a:	2404      	movs	r4, #4
}
 800209c:	4620      	mov	r0, r4
 800209e:	b007      	add	sp, #28
 80020a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = SYS_STATUS_ERR_MEM;
 80020a2:	2480      	movs	r4, #128	; 0x80
}
 80020a4:	4620      	mov	r0, r4
 80020a6:	b007      	add	sp, #28
 80020a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        status = SYS_STATUS_ERR_CRYPT;
 80020aa:	2440      	movs	r4, #64	; 0x40
 80020ac:	e7c8      	b.n	8002040 <sys_statu_integritys_check+0x48>
        status = SYS_STATUS_ERR_CHECKSUM;
 80020ae:	2410      	movs	r4, #16
 80020b0:	e7c6      	b.n	8002040 <sys_statu_integritys_check+0x48>
 80020b2:	bf00      	nop
 80020b4:	19342750 	.word	0x19342750

080020b8 <sys_status_set>:
      \arg        SYS_STATUS_ERR_CHECKSUM: checksum error
      \arg        SYS_STATUS_ERR_TLV: tlv error
*/
int sys_status_set(uint8_t type, uint8_t len, uint8_t* pval)
{
    if (type == SYS_IMG_VER_COUNTER) {
 80020b8:	2807      	cmp	r0, #7
{
 80020ba:	b508      	push	{r3, lr}
    if (type == SYS_IMG_VER_COUNTER) {
 80020bc:	d00d      	beq.n	80020da <sys_status_set+0x22>
        mbl_trace(MBL_WARN, "Please call sys_update_fw_version to set version.\r\n");
        return -1;
    }
    if ((type == SYS_IMAGE0_STATUS) || (type == SYS_IMAGE1_STATUS)) {
 80020be:	1ec3      	subs	r3, r0, #3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d903      	bls.n	80020cc <sys_status_set+0x14>
        mbl_trace(MBL_WARN, "Please call sys_img_flag_set to set image status.\r\n");
        return -2;
    }

    return sys_status_internal_set(type, len, pval);
}
 80020c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return sys_status_internal_set(type, len, pval);
 80020c8:	f7ff be2c 	b.w	8001d24 <sys_status_internal_set>
        mbl_trace(MBL_WARN, "Please call sys_img_flag_set to set image status.\r\n");
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <sys_status_set+0x48>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	dc09      	bgt.n	80020e8 <sys_status_set+0x30>
        return -2;
 80020d4:	f06f 0001 	mvn.w	r0, #1
}
 80020d8:	bd08      	pop	{r3, pc}
        mbl_trace(MBL_WARN, "Please call sys_update_fw_version to set version.\r\n");
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <sys_status_set+0x48>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	dc08      	bgt.n	80020f4 <sys_status_set+0x3c>
        return -1;
 80020e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80020e6:	bd08      	pop	{r3, pc}
        mbl_trace(MBL_WARN, "Please call sys_img_flag_set to set image status.\r\n");
 80020e8:	4806      	ldr	r0, [pc, #24]	; (8002104 <sys_status_set+0x4c>)
 80020ea:	f001 fc9b 	bl	8003a24 <iprintf>
        return -2;
 80020ee:	f06f 0001 	mvn.w	r0, #1
}
 80020f2:	bd08      	pop	{r3, pc}
        mbl_trace(MBL_WARN, "Please call sys_update_fw_version to set version.\r\n");
 80020f4:	4804      	ldr	r0, [pc, #16]	; (8002108 <sys_status_set+0x50>)
 80020f6:	f001 fc95 	bl	8003a24 <iprintf>
        return -1;
 80020fa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80020fe:	bd08      	pop	{r3, pc}
 8002100:	20000bfc 	.word	0x20000bfc
 8002104:	08005bfc 	.word	0x08005bfc
 8002108:	08005bc0 	.word	0x08005bc0

0800210c <sys_status_get>:
      \arg        SYS_STATUS_FOUND_OK: system status found ok
      \arg        SYS_STATUS_NOT_FOUND: system status not found
      \arg        SYS_STATUS_FOUND_ERR: system status found error
*/
int sys_status_get(uint8_t type, uint8_t len, uint8_t* pval)
{
 800210c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002110:	b087      	sub	sp, #28
 8002112:	4607      	mov	r7, r0
 8002114:	460d      	mov	r5, r1
    uint32_t start, tlen;
    uint8_t *buf = NULL, *p;
    int loc, ret, status;

    /* Found the active system status */
    ret = active_header_get(&sys_hdr, &start);
 8002116:	a802      	add	r0, sp, #8
 8002118:	a901      	add	r1, sp, #4
{
 800211a:	4616      	mov	r6, r2
    ret = active_header_get(&sys_hdr, &start);
 800211c:	f7ff fda4 	bl	8001c68 <active_header_get>
    if (ret != SYS_STATUS_OK) goto exit;
 8002120:	4604      	mov	r4, r0
 8002122:	2800      	cmp	r0, #0
 8002124:	d149      	bne.n	80021ba <sys_status_get+0xae>

    /* Check header */
    if (sys_hdr.tot_len > SYS_STATUS_AREA_SZ) {
 8002126:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800212a:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
 800212e:	d853      	bhi.n	80021d8 <sys_status_get+0xcc>
        ret = SYS_STATUS_ERR_TOTAL_LEN;
        goto exit;
    }
    if (sys_hdr.magic != SYS_STATUS_MAGIC_CODE) {
 8002130:	4b36      	ldr	r3, [pc, #216]	; (800220c <sys_status_get+0x100>)
 8002132:	9a04      	ldr	r2, [sp, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d13f      	bne.n	80021b8 <sys_status_get+0xac>
        ret = SYS_STATUS_ERR_MAGIC;
        goto exit;
    }

    /* Get active system status */
    if (sys_hdr.tot_len % AES_BLOCK_SZ) {
 8002138:	f018 0f0f 	tst.w	r8, #15
        tlen = ((sys_hdr.tot_len >> 4) << 4) + AES_BLOCK_SZ;
 800213c:	bf1c      	itt	ne
 800213e:	f028 080f 	bicne.w	r8, r8, #15
 8002142:	f108 0810 	addne.w	r8, r8, #16
    } else {
        tlen = sys_hdr.tot_len;
    }
    buf = mbedtls_calloc(tlen, 1);
 8002146:	2101      	movs	r1, #1
 8002148:	4640      	mov	r0, r8
 800214a:	f003 fc7d 	bl	8005a48 <__mbedtls_calloc_veneer>
    if (NULL == buf) goto exit;
 800214e:	4681      	mov	r9, r0
 8002150:	b398      	cbz	r0, 80021ba <sys_status_get+0xae>

    ret = flash_indirect_read(start, buf, tlen);
 8002152:	4601      	mov	r1, r0
 8002154:	4642      	mov	r2, r8
 8002156:	9801      	ldr	r0, [sp, #4]
 8002158:	f7ff fa30 	bl	80015bc <flash_indirect_read>
    if (ret != 0) goto exit;
 800215c:	4604      	mov	r4, r0
 800215e:	2800      	cmp	r0, #0
 8002160:	d148      	bne.n	80021f4 <sys_status_get+0xe8>

    ret = sys_status_crypt(MBEDTLS_AES_DECRYPT, buf, tlen, buf);
 8002162:	4642      	mov	r2, r8
 8002164:	464b      	mov	r3, r9
 8002166:	4649      	mov	r1, r9
 8002168:	f7ff fd26 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) goto exit;
 800216c:	4604      	mov	r4, r0
 800216e:	2800      	cmp	r0, #0
 8002170:	d140      	bne.n	80021f4 <sys_status_get+0xe8>

    /* Find item with the type */
    loc = tlv_find_by_type((buf + SYS_STATUS_HEADER_SZ), (sys_hdr.tot_len - SYS_STATUS_HEADER_SZ), type); /* Check if found */
 8002172:	9b02      	ldr	r3, [sp, #8]
 8002174:	f109 0110 	add.w	r1, r9, #16
    while (offset < len) {
 8002178:	f1b3 0c10 	subs.w	ip, r3, #16
 800217c:	d03e      	beq.n	80021fc <sys_status_get+0xf0>
    uint32_t offset = 0;
 800217e:	4603      	mov	r3, r0
 8002180:	e002      	b.n	8002188 <sys_status_get+0x7c>
        offset += SYS_STATUS_TLV_HEADER_SZ + l;
 8002182:	4413      	add	r3, r2
    while (offset < len) {
 8002184:	459c      	cmp	ip, r3
 8002186:	d939      	bls.n	80021fc <sys_status_get+0xf0>
        if (t == type) {
 8002188:	7808      	ldrb	r0, [r1, #0]
        t = *p;  l = *(p + 1);
 800218a:	784a      	ldrb	r2, [r1, #1]
        if (t == type) {
 800218c:	42b8      	cmp	r0, r7
        p += SYS_STATUS_TLV_HEADER_SZ + l;
 800218e:	f102 0202 	add.w	r2, r2, #2
 8002192:	4411      	add	r1, r2
        if (t == type) {
 8002194:	d1f5      	bne.n	8002182 <sys_status_get+0x76>
    if (loc >= 0) {
 8002196:	2b00      	cmp	r3, #0
 8002198:	db30      	blt.n	80021fc <sys_status_get+0xf0>
        /* Found */
        p = buf + SYS_STATUS_HEADER_SZ + loc;
 800219a:	3310      	adds	r3, #16
 800219c:	eb09 0103 	add.w	r1, r9, r3
        if (*(p + 1) > len)
 80021a0:	784a      	ldrb	r2, [r1, #1]
            memcpy(pval, (p + SYS_STATUS_TLV_HEADER_SZ), len);
        else
            memcpy(pval, (p + SYS_STATUS_TLV_HEADER_SZ), *(p + 1));
 80021a2:	4630      	mov	r0, r6
        if (*(p + 1) > len)
 80021a4:	42aa      	cmp	r2, r5
            memcpy(pval, (p + SYS_STATUS_TLV_HEADER_SZ), len);
 80021a6:	bf88      	it	hi
 80021a8:	462a      	movhi	r2, r5
            memcpy(pval, (p + SYS_STATUS_TLV_HEADER_SZ), *(p + 1));
 80021aa:	3102      	adds	r1, #2
 80021ac:	f000 ffb8 	bl	8003120 <memcpy>
        /* Not found */
        status = SYS_STATUS_NOT_FOUND;
        memset(pval, 0xFF, len);
    }

    mbedtls_free(buf);
 80021b0:	4648      	mov	r0, r9
 80021b2:	f003 fc51 	bl	8005a58 <__mbedtls_free_veneer>
    return status;
 80021b6:	e00b      	b.n	80021d0 <sys_status_get+0xc4>
        ret = SYS_STATUS_ERR_MAGIC;
 80021b8:	2408      	movs	r4, #8

exit:
    if (buf)
        mbedtls_free(buf);
    memset(pval, 0xFF, len);
 80021ba:	462a      	mov	r2, r5
 80021bc:	4630      	mov	r0, r6
 80021be:	21ff      	movs	r1, #255	; 0xff
 80021c0:	f000 ffbb 	bl	800313a <memset>
    status = SYS_STATUS_FOUND_ERR;
    mbl_trace(MBL_WARN, "Status get failed(0x%x,%d).\r\n", status, ret);
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <sys_status_get+0x104>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	dc07      	bgt.n	80021dc <sys_status_get+0xd0>
    return status;
 80021cc:	f06f 0401 	mvn.w	r4, #1
}
 80021d0:	4620      	mov	r0, r4
 80021d2:	b007      	add	sp, #28
 80021d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ret = SYS_STATUS_ERR_TOTAL_LEN;
 80021d8:	2404      	movs	r4, #4
 80021da:	e7ee      	b.n	80021ba <sys_status_get+0xae>
    mbl_trace(MBL_WARN, "Status get failed(0x%x,%d).\r\n", status, ret);
 80021dc:	4622      	mov	r2, r4
    return status;
 80021de:	f06f 0401 	mvn.w	r4, #1
    mbl_trace(MBL_WARN, "Status get failed(0x%x,%d).\r\n", status, ret);
 80021e2:	f06f 0101 	mvn.w	r1, #1
 80021e6:	480b      	ldr	r0, [pc, #44]	; (8002214 <sys_status_get+0x108>)
 80021e8:	f001 fc1c 	bl	8003a24 <iprintf>
}
 80021ec:	4620      	mov	r0, r4
 80021ee:	b007      	add	sp, #28
 80021f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        mbedtls_free(buf);
 80021f4:	4648      	mov	r0, r9
 80021f6:	f003 fc2f 	bl	8005a58 <__mbedtls_free_veneer>
 80021fa:	e7de      	b.n	80021ba <sys_status_get+0xae>
        memset(pval, 0xFF, len);
 80021fc:	462a      	mov	r2, r5
 80021fe:	4630      	mov	r0, r6
 8002200:	21ff      	movs	r1, #255	; 0xff
 8002202:	f000 ff9a 	bl	800313a <memset>
        status = SYS_STATUS_NOT_FOUND;
 8002206:	f04f 34ff 	mov.w	r4, #4294967295
 800220a:	e7d1      	b.n	80021b0 <sys_status_get+0xa4>
 800220c:	19342750 	.word	0x19342750
 8002210:	20000bfc 	.word	0x20000bfc
 8002214:	08005c38 	.word	0x08005c38

08002218 <sys_err_process_set>:
      \arg        SYS_STATUS_ERR_CRYPT: crypt error
      \arg        SYS_STATUS_ERR_CHECKSUM: checksum error
      \arg        SYS_STATUS_ERR_TLV: tlv error
*/
int sys_err_process_set(uint8_t method)
{
 8002218:	b500      	push	{lr}
    if (method > 1) {
 800221a:	2801      	cmp	r0, #1
{
 800221c:	b083      	sub	sp, #12
 800221e:	f88d 0007 	strb.w	r0, [sp, #7]
    if (method > 1) {
 8002222:	d808      	bhi.n	8002236 <sys_err_process_set+0x1e>
        return -1;
    }
    return sys_status_internal_set(SYS_ERROR_PROCESS, LEN_SYS_ERROR_PROCESS, &method);
 8002224:	2101      	movs	r1, #1
 8002226:	f10d 0207 	add.w	r2, sp, #7
 800222a:	4608      	mov	r0, r1
 800222c:	f7ff fd7a 	bl	8001d24 <sys_status_internal_set>
}
 8002230:	b003      	add	sp, #12
 8002232:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
 8002236:	f04f 30ff 	mov.w	r0, #4294967295
 800223a:	e7f9      	b.n	8002230 <sys_err_process_set+0x18>

0800223c <sys_trace_level_set>:
      \arg        SYS_STATUS_ERR_CRYPT: crypt error
      \arg        SYS_STATUS_ERR_CHECKSUM: checksum error
      \arg        SYS_STATUS_ERR_TLV: tlv error
*/
int sys_trace_level_set(uint8_t trace_level)
{
 800223c:	b500      	push	{lr}
    if (trace_level > MBL_DBG) {
 800223e:	2805      	cmp	r0, #5
{
 8002240:	b083      	sub	sp, #12
 8002242:	f88d 0007 	strb.w	r0, [sp, #7]
    if (trace_level > MBL_DBG) {
 8002246:	d808      	bhi.n	800225a <sys_trace_level_set+0x1e>
        return -1;
    }
    return sys_status_internal_set(SYS_TRACE_LEVEL, LEN_SYS_TRACE_LEVEL, &trace_level);
 8002248:	2101      	movs	r1, #1
 800224a:	2002      	movs	r0, #2
 800224c:	f10d 0207 	add.w	r2, sp, #7
 8002250:	f7ff fd68 	bl	8001d24 <sys_status_internal_set>
}
 8002254:	b003      	add	sp, #12
 8002256:	f85d fb04 	ldr.w	pc, [sp], #4
        return -1;
 800225a:	f04f 30ff 	mov.w	r0, #4294967295
 800225e:	e7f9      	b.n	8002254 <sys_trace_level_set+0x18>

08002260 <sys_img_flag_set>:
      \arg        SYS_STATUS_ERR_TLV: tlv error
      \arg        -3: image index error
      \arg        -4: image status error
*/
int sys_img_flag_set(uint8_t idx, uint8_t mask, uint8_t flag)
{
 8002260:	b570      	push	{r4, r5, r6, lr}
    uint8_t type, img_status = 0;
 8002262:	2500      	movs	r5, #0
{
 8002264:	b082      	sub	sp, #8
 8002266:	460e      	mov	r6, r1
 8002268:	4614      	mov	r4, r2
    uint8_t type, img_status = 0;
 800226a:	f88d 5007 	strb.w	r5, [sp, #7]
    int ret;

    if (idx == IMAGE_0)
 800226e:	b398      	cbz	r0, 80022d8 <sys_img_flag_set+0x78>
        type = SYS_IMAGE0_STATUS;
    else if (idx == IMAGE_1)
 8002270:	2801      	cmp	r0, #1
 8002272:	d133      	bne.n	80022dc <sys_img_flag_set+0x7c>
        type = SYS_IMAGE1_STATUS;
 8002274:	2504      	movs	r5, #4
    else {
        ret = -3;
        goto exit;
    }

    ret = sys_status_get(type, LEN_SYS_IMAGE_STATUS, &img_status);
 8002276:	2101      	movs	r1, #1
 8002278:	4628      	mov	r0, r5
 800227a:	f10d 0207 	add.w	r2, sp, #7
 800227e:	f7ff ff45 	bl	800210c <sys_status_get>
    if ((ret != SYS_STATUS_NOT_FOUND) && (ret != SYS_STATUS_FOUND_OK)) {
 8002282:	1c43      	adds	r3, r0, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d81d      	bhi.n	80022c4 <sys_img_flag_set+0x64>
        goto exit;
    }
    if (ret == SYS_STATUS_NOT_FOUND)
 8002288:	3001      	adds	r0, #1
 800228a:	bf0b      	itete	eq
 800228c:	2200      	moveq	r2, #0
 800228e:	f89d 3007 	ldrbne.w	r3, [sp, #7]
 8002292:	4613      	moveq	r3, r2
        img_status = 0;

    /* the flag bits have been set in img_status */
    if ((img_status & mask) == flag) {
 8002294:	ea06 0203 	andne.w	r2, r6, r3
 8002298:	4294      	cmp	r4, r2
        ret = SYS_STATUS_OK;
 800229a:	f04f 0000 	mov.w	r0, #0
    if ((img_status & mask) == flag) {
 800229e:	d011      	beq.n	80022c4 <sys_img_flag_set+0x64>
        goto exit;
    }

    img_status = ((img_status & ~mask) | flag);
 80022a0:	ea23 0106 	bic.w	r1, r3, r6
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <sys_img_flag_set+0x84>)
 80022a6:	ea41 0204 	orr.w	r2, r1, r4
 80022aa:	f88d 2007 	strb.w	r2, [sp, #7]
    for (i = 0; i < sz; i++) {
 80022ae:	f103 0108 	add.w	r1, r3, #8
 80022b2:	e001      	b.n	80022b8 <sys_img_flag_set+0x58>
 80022b4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
        if (status == valid_image_status[i]) {
 80022b8:	4282      	cmp	r2, r0
 80022ba:	d005      	beq.n	80022c8 <sys_img_flag_set+0x68>
    for (i = 0; i < sz; i++) {
 80022bc:	428b      	cmp	r3, r1
 80022be:	d1f9      	bne.n	80022b4 <sys_img_flag_set+0x54>

    if (!image_valid_status_get(img_status)) {
        ret = -4;
 80022c0:	f06f 0003 	mvn.w	r0, #3

    ret = sys_status_internal_set(type, LEN_SYS_IMAGE_STATUS, &img_status);

exit:
    return ret;
}
 80022c4:	b002      	add	sp, #8
 80022c6:	bd70      	pop	{r4, r5, r6, pc}
    ret = sys_status_internal_set(type, LEN_SYS_IMAGE_STATUS, &img_status);
 80022c8:	4628      	mov	r0, r5
 80022ca:	2101      	movs	r1, #1
 80022cc:	f10d 0207 	add.w	r2, sp, #7
 80022d0:	f7ff fd28 	bl	8001d24 <sys_status_internal_set>
}
 80022d4:	b002      	add	sp, #8
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
        type = SYS_IMAGE0_STATUS;
 80022d8:	2503      	movs	r5, #3
 80022da:	e7cc      	b.n	8002276 <sys_img_flag_set+0x16>
        ret = -3;
 80022dc:	f06f 0002 	mvn.w	r0, #2
 80022e0:	e7f0      	b.n	80022c4 <sys_img_flag_set+0x64>
 80022e2:	bf00      	nop
 80022e4:	08005e14 	.word	0x08005e14

080022e8 <sys_running_img_set>:
      \arg        SYS_STATUS_ERR_CHECKSUM: checksum error
      \arg        SYS_STATUS_ERR_TLV: tlv error
      \arg        -3: image index error
*/
int sys_running_img_set(uint8_t idx)
{
 80022e8:	b510      	push	{r4, lr}
    uint8_t img_idx = 0xff;
 80022ea:	23ff      	movs	r3, #255	; 0xff
{
 80022ec:	4604      	mov	r4, r0
 80022ee:	b084      	sub	sp, #16
    int ret;

    ret = sys_status_get(SYS_RUNNING_IMG, LEN_SYS_RUNNING_IMG, &img_idx);
 80022f0:	2101      	movs	r1, #1
 80022f2:	2005      	movs	r0, #5
 80022f4:	f10d 020f 	add.w	r2, sp, #15
    uint8_t img_idx = 0xff;
 80022f8:	f88d 300f 	strb.w	r3, [sp, #15]
{
 80022fc:	f88d 4007 	strb.w	r4, [sp, #7]
    ret = sys_status_get(SYS_RUNNING_IMG, LEN_SYS_RUNNING_IMG, &img_idx);
 8002300:	f7ff ff04 	bl	800210c <sys_status_get>
    if ((ret != SYS_STATUS_NOT_FOUND) && (ret != SYS_STATUS_FOUND_OK)) {
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d80d      	bhi.n	8002326 <sys_running_img_set+0x3e>
        goto exit;
    }

    /* the index to set is same as current running index */
    if (img_idx == idx) {
 800230a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800230e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8002312:	429a      	cmp	r2, r3
 8002314:	d009      	beq.n	800232a <sys_running_img_set+0x42>
        ret = SYS_STATUS_OK;
        goto exit;
    }

    if ((idx == IMAGE_0) || (idx == IMAGE_1))
 8002316:	2b01      	cmp	r3, #1
 8002318:	d80a      	bhi.n	8002330 <sys_running_img_set+0x48>
        ret = sys_status_internal_set(SYS_RUNNING_IMG, LEN_SYS_RUNNING_IMG, &idx);
 800231a:	2101      	movs	r1, #1
 800231c:	2005      	movs	r0, #5
 800231e:	f10d 0207 	add.w	r2, sp, #7
 8002322:	f7ff fcff 	bl	8001d24 <sys_status_internal_set>
    else {
        ret = -3;
    }
exit:
    return ret;
}
 8002326:	b004      	add	sp, #16
 8002328:	bd10      	pop	{r4, pc}
        ret = SYS_STATUS_OK;
 800232a:	2000      	movs	r0, #0
}
 800232c:	b004      	add	sp, #16
 800232e:	bd10      	pop	{r4, pc}
        ret = -3;
 8002330:	f06f 0002 	mvn.w	r0, #2
    return ret;
 8002334:	e7f7      	b.n	8002326 <sys_running_img_set+0x3e>
 8002336:	bf00      	nop

08002338 <sys_fw_version_set>:
      \arg        SYS_STATUS_ERR_CHECKSUM: checksum error
      \arg        SYS_STATUS_ERR_TLV: tlv error
      \arg        -1: image type error
*/
int sys_fw_version_set(uint32_t type, uint32_t version)
{
 8002338:	b510      	push	{r4, lr}
    uint8_t status_type;
    uint32_t local_ver = 0;
 800233a:	2400      	movs	r4, #0
{
 800233c:	b084      	sub	sp, #16
    int ret;

    if (type != IMG_TYPE_IMG)
 800233e:	2808      	cmp	r0, #8
{
 8002340:	9101      	str	r1, [sp, #4]
    uint32_t local_ver = 0;
 8002342:	9403      	str	r4, [sp, #12]
    if (type != IMG_TYPE_IMG)
 8002344:	d11a      	bne.n	800237c <sys_fw_version_set+0x44>
        return -1;
    else
        status_type = SYS_IMG_VER_COUNTER;

    ret = sys_status_get(status_type, LEN_SYS_VER_COUNTER, (uint8_t *)&local_ver);
 8002346:	2104      	movs	r1, #4
 8002348:	2007      	movs	r0, #7
 800234a:	aa03      	add	r2, sp, #12
 800234c:	f7ff fede 	bl	800210c <sys_status_get>
    if ((ret != SYS_STATUS_NOT_FOUND) && (ret != SYS_STATUS_FOUND_OK)) {
 8002350:	1c43      	adds	r3, r0, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d809      	bhi.n	800236a <sys_fw_version_set+0x32>
        return ret;
    }
    if (ret == SYS_STATUS_NOT_FOUND)
 8002356:	3001      	adds	r0, #1
        local_ver = 0;
 8002358:	bf0c      	ite	eq
 800235a:	4623      	moveq	r3, r4
 800235c:	9b03      	ldrne	r3, [sp, #12]

    /* New version MUST BE higher than local */
    if (version <= local_ver) {
 800235e:	9a01      	ldr	r2, [sp, #4]
        local_ver = 0;
 8002360:	bf08      	it	eq
 8002362:	9403      	streq	r4, [sp, #12]
    if (version <= local_ver) {
 8002364:	429a      	cmp	r2, r3
 8002366:	d802      	bhi.n	800236e <sys_fw_version_set+0x36>
        return SYS_STATUS_OK;
 8002368:	2000      	movs	r0, #0
    }

    return sys_status_internal_set(status_type, LEN_SYS_VER_COUNTER, (uint8_t *)&version);
}
 800236a:	b004      	add	sp, #16
 800236c:	bd10      	pop	{r4, pc}
    return sys_status_internal_set(status_type, LEN_SYS_VER_COUNTER, (uint8_t *)&version);
 800236e:	2104      	movs	r1, #4
 8002370:	aa01      	add	r2, sp, #4
 8002372:	2007      	movs	r0, #7
 8002374:	f7ff fcd6 	bl	8001d24 <sys_status_internal_set>
}
 8002378:	b004      	add	sp, #16
 800237a:	bd10      	pop	{r4, pc}
        return -1;
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	e7f3      	b.n	800236a <sys_fw_version_set+0x32>
 8002382:	bf00      	nop

08002384 <sys_trng_seed_set>:
      \arg        SYS_STATUS_ERR_CHECKSUM: checksum error
      \arg        SYS_STATUS_ERR_TLV: tlv error
*/
int sys_trng_seed_set(uint8_t val)
{
    uint8_t is_trng_seed = val ? 1 : 0;
 8002384:	1e03      	subs	r3, r0, #0
 8002386:	bf18      	it	ne
 8002388:	2301      	movne	r3, #1
{
 800238a:	b500      	push	{lr}
 800238c:	b083      	sub	sp, #12
    return sys_status_internal_set(SYS_TRNG_SEED, LEN_SYS_TRNG_SEED, &is_trng_seed);
 800238e:	2101      	movs	r1, #1
 8002390:	f10d 0207 	add.w	r2, sp, #7
 8002394:	200a      	movs	r0, #10
    uint8_t is_trng_seed = val ? 1 : 0;
 8002396:	f88d 3007 	strb.w	r3, [sp, #7]
    return sys_status_internal_set(SYS_TRNG_SEED, LEN_SYS_TRNG_SEED, &is_trng_seed);
 800239a:	f7ff fcc3 	bl	8001d24 <sys_status_internal_set>
}
 800239e:	b003      	add	sp, #12
 80023a0:	f85d fb04 	ldr.w	pc, [sp], #4

080023a4 <sys_status_show>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void sys_status_show(void)
{
 80023a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a8:	b089      	sub	sp, #36	; 0x24
    uint8_t t, l, *v;
    char *title;
    int ret;

    /* Found the active system status */
    ret = active_header_get(&sys_hdr, &start);
 80023aa:	a903      	add	r1, sp, #12
 80023ac:	a804      	add	r0, sp, #16
 80023ae:	f7ff fc5b 	bl	8001c68 <active_header_get>
    if (ret != SYS_STATUS_OK) goto exit;
 80023b2:	4604      	mov	r4, r0
 80023b4:	2800      	cmp	r0, #0
 80023b6:	d135      	bne.n	8002424 <sys_status_show+0x80>

    /* Check header */
    if ((sys_hdr.tot_len > SYS_STATUS_AREA_SZ) || (sys_hdr.magic != SYS_STATUS_MAGIC_CODE)) {
 80023b8:	9b04      	ldr	r3, [sp, #16]
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023be:	d838      	bhi.n	8002432 <sys_status_show+0x8e>
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <sys_status_show+0x12c>)
 80023c2:	9a06      	ldr	r2, [sp, #24]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d134      	bne.n	8002432 <sys_status_show+0x8e>
    }

    if (start == FLASH_OFFSET_SYS_STATUS_PING)
        title = "System Status: Ping\r\n";
    else
        title = "System Status: Pong\r\n";
 80023c8:	4b42      	ldr	r3, [pc, #264]	; (80024d4 <sys_status_show+0x130>)
 80023ca:	4a43      	ldr	r2, [pc, #268]	; (80024d8 <sys_status_show+0x134>)
    if (start == FLASH_OFFSET_SYS_STATUS_PING)
 80023cc:	9903      	ldr	r1, [sp, #12]

    printf("%s=============================\r\n", title);
 80023ce:	4843      	ldr	r0, [pc, #268]	; (80024dc <sys_status_show+0x138>)
 80023d0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80023d4:	bf0c      	ite	eq
 80023d6:	4611      	moveq	r1, r2
 80023d8:	4619      	movne	r1, r3
 80023da:	f001 fb23 	bl	8003a24 <iprintf>
    printf("Total Length: 0x%x (%d)\t\r\n", sys_hdr.tot_len, sys_hdr.tot_len);
 80023de:	9a04      	ldr	r2, [sp, #16]
 80023e0:	483f      	ldr	r0, [pc, #252]	; (80024e0 <sys_status_show+0x13c>)
 80023e2:	4611      	mov	r1, r2
 80023e4:	f001 fb1e 	bl	8003a24 <iprintf>
    printf("Active Counter: 0%x\t\r\n", sys_hdr.act_cntr);
 80023e8:	9905      	ldr	r1, [sp, #20]
 80023ea:	483e      	ldr	r0, [pc, #248]	; (80024e4 <sys_status_show+0x140>)
 80023ec:	f001 fb1a 	bl	8003a24 <iprintf>
    printf("Checksum: 0x%x\t\t\r\n", sys_hdr.checksum);
 80023f0:	9907      	ldr	r1, [sp, #28]
 80023f2:	483d      	ldr	r0, [pc, #244]	; (80024e8 <sys_status_show+0x144>)
 80023f4:	f001 fb16 	bl	8003a24 <iprintf>

    /* Get active system status */
    if (sys_hdr.tot_len % AES_BLOCK_SZ) {
 80023f8:	9d04      	ldr	r5, [sp, #16]
        tlen = ((sys_hdr.tot_len >> 4) << 4) + AES_BLOCK_SZ;
    } else {
        tlen = sys_hdr.tot_len;
    }
    buf = mbedtls_calloc(tlen, 1);
 80023fa:	2101      	movs	r1, #1
    if (sys_hdr.tot_len % AES_BLOCK_SZ) {
 80023fc:	072b      	lsls	r3, r5, #28
        tlen = ((sys_hdr.tot_len >> 4) << 4) + AES_BLOCK_SZ;
 80023fe:	bf1c      	itt	ne
 8002400:	f025 050f 	bicne.w	r5, r5, #15
 8002404:	3510      	addne	r5, #16
    buf = mbedtls_calloc(tlen, 1);
 8002406:	4628      	mov	r0, r5
 8002408:	f003 fb1e 	bl	8005a48 <__mbedtls_calloc_veneer>
    if (NULL == buf) goto exit;
 800240c:	4607      	mov	r7, r0
 800240e:	b168      	cbz	r0, 800242c <sys_status_show+0x88>

    ret = flash_indirect_read(start, buf, tlen);
 8002410:	4601      	mov	r1, r0
 8002412:	462a      	mov	r2, r5
 8002414:	9803      	ldr	r0, [sp, #12]
 8002416:	f7ff f8d1 	bl	80015bc <flash_indirect_read>
    if (ret != 0) goto exit;
 800241a:	4604      	mov	r4, r0
 800241c:	b1b0      	cbz	r0, 800244c <sys_status_show+0xa8>
        offset += SYS_STATUS_TLV_HEADER_SZ + l;
    }

exit:
    if (buf)
        mbedtls_free(buf);
 800241e:	4638      	mov	r0, r7
 8002420:	f003 fb1a 	bl	8005a58 <__mbedtls_free_veneer>
    if (ret != 0)
        mbl_trace(MBL_WARN, "Status show error(0x%x).\r\n", ret);
 8002424:	4b31      	ldr	r3, [pc, #196]	; (80024ec <sys_status_show+0x148>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b02      	cmp	r3, #2
 800242a:	dc08      	bgt.n	800243e <sys_status_show+0x9a>
    return;
}
 800242c:	b009      	add	sp, #36	; 0x24
 800242e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        mbl_trace(MBL_WARN, "Status show error(0x%x).\r\n", ret);
 8002432:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <sys_status_show+0x148>)
        ret = -0xFF;
 8002434:	f06f 04fe 	mvn.w	r4, #254	; 0xfe
        mbl_trace(MBL_WARN, "Status show error(0x%x).\r\n", ret);
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b02      	cmp	r3, #2
 800243c:	ddf6      	ble.n	800242c <sys_status_show+0x88>
 800243e:	4621      	mov	r1, r4
 8002440:	482b      	ldr	r0, [pc, #172]	; (80024f0 <sys_status_show+0x14c>)
 8002442:	f001 faef 	bl	8003a24 <iprintf>
}
 8002446:	b009      	add	sp, #36	; 0x24
 8002448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ret = sys_status_crypt(MBEDTLS_AES_DECRYPT, buf, tlen, buf);
 800244c:	462a      	mov	r2, r5
 800244e:	463b      	mov	r3, r7
 8002450:	4639      	mov	r1, r7
 8002452:	f7ff fbb1 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) goto exit;
 8002456:	4604      	mov	r4, r0
 8002458:	2800      	cmp	r0, #0
 800245a:	d1e0      	bne.n	800241e <sys_status_show+0x7a>
    printf("T\tL\tV\r\n");
 800245c:	4825      	ldr	r0, [pc, #148]	; (80024f4 <sys_status_show+0x150>)
 800245e:	f001 fae1 	bl	8003a24 <iprintf>
    sz = sys_hdr.tot_len - SYS_STATUS_HEADER_SZ;
 8002462:	9b04      	ldr	r3, [sp, #16]
    p = buf + SYS_STATUS_HEADER_SZ;
 8002464:	f107 0810 	add.w	r8, r7, #16
    while (offset < sz) {
 8002468:	3b10      	subs	r3, #16
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	d02c      	beq.n	80024c8 <sys_status_show+0x124>
            printf("%02x", v[i]);
 800246e:	4626      	mov	r6, r4
            printf("%02x-", v[i]);
 8002470:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002500 <sys_status_show+0x15c>
            printf("%02x", v[i]);
 8002474:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8002504 <sys_status_show+0x160>
 8002478:	9701      	str	r7, [sp, #4]
        t = *p;  l = *(p + 1);  v = p + 2;
 800247a:	46c3      	mov	fp, r8
 800247c:	f898 4001 	ldrb.w	r4, [r8, #1]
    printf("%d\t%d\t", t, l);
 8002480:	f81b 1b02 	ldrb.w	r1, [fp], #2
 8002484:	4622      	mov	r2, r4
 8002486:	481c      	ldr	r0, [pc, #112]	; (80024f8 <sys_status_show+0x154>)
 8002488:	f001 facc 	bl	8003a24 <iprintf>
    for (i = 0; i < l; i++) {
 800248c:	b174      	cbz	r4, 80024ac <sys_status_show+0x108>
 800248e:	2700      	movs	r7, #0
 8002490:	1e65      	subs	r5, r4, #1
        if (i == l -1)
 8002492:	42af      	cmp	r7, r5
            printf("%02x", v[i]);
 8002494:	bf0c      	ite	eq
 8002496:	4650      	moveq	r0, sl
            printf("%02x-", v[i]);
 8002498:	4648      	movne	r0, r9
            printf("%02x", v[i]);
 800249a:	f89b 1000 	ldrb.w	r1, [fp]
    for (i = 0; i < l; i++) {
 800249e:	3701      	adds	r7, #1
            printf("%02x-", v[i]);
 80024a0:	f001 fac0 	bl	8003a24 <iprintf>
    for (i = 0; i < l; i++) {
 80024a4:	42bc      	cmp	r4, r7
 80024a6:	f10b 0b01 	add.w	fp, fp, #1
 80024aa:	d1f2      	bne.n	8002492 <sys_status_show+0xee>
    printf("\r\n");
 80024ac:	4813      	ldr	r0, [pc, #76]	; (80024fc <sys_status_show+0x158>)
 80024ae:	f001 fab9 	bl	8003a24 <iprintf>
        p += SYS_STATUS_TLV_HEADER_SZ + l;
 80024b2:	3402      	adds	r4, #2
    while (offset < sz) {
 80024b4:	9b00      	ldr	r3, [sp, #0]
        offset += SYS_STATUS_TLV_HEADER_SZ + l;
 80024b6:	4426      	add	r6, r4
    while (offset < sz) {
 80024b8:	42b3      	cmp	r3, r6
        p += SYS_STATUS_TLV_HEADER_SZ + l;
 80024ba:	44a0      	add	r8, r4
    while (offset < sz) {
 80024bc:	d8dd      	bhi.n	800247a <sys_status_show+0xd6>
 80024be:	9f01      	ldr	r7, [sp, #4]
        mbedtls_free(buf);
 80024c0:	4638      	mov	r0, r7
 80024c2:	f003 fac9 	bl	8005a58 <__mbedtls_free_veneer>
    if (ret != 0)
 80024c6:	e7b1      	b.n	800242c <sys_status_show+0x88>
        mbedtls_free(buf);
 80024c8:	4638      	mov	r0, r7
 80024ca:	f003 fac5 	bl	8005a58 <__mbedtls_free_veneer>
    if (ret != 0)
 80024ce:	e7ad      	b.n	800242c <sys_status_show+0x88>
 80024d0:	19342750 	.word	0x19342750
 80024d4:	08005c74 	.word	0x08005c74
 80024d8:	08005c5c 	.word	0x08005c5c
 80024dc:	08005c8c 	.word	0x08005c8c
 80024e0:	08005cb0 	.word	0x08005cb0
 80024e4:	08005ccc 	.word	0x08005ccc
 80024e8:	08005ce4 	.word	0x08005ce4
 80024ec:	20000bfc 	.word	0x20000bfc
 80024f0:	08005d18 	.word	0x08005d18
 80024f4:	08005cf8 	.word	0x08005cf8
 80024f8:	08005d00 	.word	0x08005d00
 80024fc:	08005cf4 	.word	0x08005cf4
 8002500:	08005d10 	.word	0x08005d10
 8002504:	08005d08 	.word	0x08005d08

08002508 <sys_status_dump>:
    if (is_ping ) {
        start = FLASH_OFFSET_SYS_STATUS_PING;
        title = "Status PING:\r\n";
    } else {
        start = FLASH_OFFSET_SYS_STATUS_PONG;
        title = "Status PONG:\r\n";
 8002508:	2800      	cmp	r0, #0
{
 800250a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        title = "Status PONG:\r\n";
 800250e:	bf14      	ite	ne
 8002510:	f44f 4600 	movne.w	r6, #32768	; 0x8000
 8002514:	f44f 4610 	moveq.w	r6, #36864	; 0x9000
 8002518:	4c39      	ldr	r4, [pc, #228]	; (8002600 <sys_status_dump+0xf8>)
{
 800251a:	b084      	sub	sp, #16
    }

    /* Read header */
    ret = flash_indirect_read(start, blk, AES_BLOCK_SZ);
 800251c:	4630      	mov	r0, r6
 800251e:	4669      	mov	r1, sp
 8002520:	f04f 0210 	mov.w	r2, #16
        title = "Status PONG:\r\n";
 8002524:	4f37      	ldr	r7, [pc, #220]	; (8002604 <sys_status_dump+0xfc>)
 8002526:	bf18      	it	ne
 8002528:	4627      	movne	r7, r4
    ret = flash_indirect_read(start, blk, AES_BLOCK_SZ);
 800252a:	f7ff f847 	bl	80015bc <flash_indirect_read>
    if (ret != 0) goto exit;
 800252e:	4604      	mov	r4, r0
 8002530:	b130      	cbz	r0, 8002540 <sys_status_dump+0x38>

exit:
    if (buf)
        mbedtls_free(buf);
    if (ret != 0)
        mbl_trace(MBL_WARN, "Status dump error(0x%x).\r\n", ret);
 8002532:	4b35      	ldr	r3, [pc, #212]	; (8002608 <sys_status_dump+0x100>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b02      	cmp	r3, #2
 8002538:	dc2f      	bgt.n	800259a <sys_status_dump+0x92>
    return;
}
 800253a:	b004      	add	sp, #16
 800253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sys_status_crypt(MBEDTLS_AES_DECRYPT, blk, AES_BLOCK_SZ, blk);
 8002540:	466b      	mov	r3, sp
 8002542:	2210      	movs	r2, #16
 8002544:	4619      	mov	r1, r3
 8002546:	f7ff fb37 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) goto exit;
 800254a:	4604      	mov	r4, r0
 800254c:	2800      	cmp	r0, #0
 800254e:	d1f0      	bne.n	8002532 <sys_status_dump+0x2a>
    if ((sys_hdr->tot_len > SYS_STATUS_AREA_SZ) || (sys_hdr->magic != SYS_STATUS_MAGIC_CODE)) {
 8002550:	9d00      	ldr	r5, [sp, #0]
 8002552:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8002556:	d81a      	bhi.n	800258e <sys_status_dump+0x86>
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <sys_status_dump+0x104>)
 800255a:	9a02      	ldr	r2, [sp, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	d116      	bne.n	800258e <sys_status_dump+0x86>
    if (sys_hdr->tot_len % AES_BLOCK_SZ) {
 8002560:	072a      	lsls	r2, r5, #28
        tlen = ((sys_hdr->tot_len >> 4) << 4) + AES_BLOCK_SZ;
 8002562:	bf1c      	itt	ne
 8002564:	f025 050f 	bicne.w	r5, r5, #15
 8002568:	3510      	addne	r5, #16
    buf = mbedtls_calloc(tlen, 1);
 800256a:	2101      	movs	r1, #1
 800256c:	4628      	mov	r0, r5
 800256e:	f003 fa6b 	bl	8005a48 <__mbedtls_calloc_veneer>
    if (NULL == buf) goto exit;
 8002572:	4680      	mov	r8, r0
 8002574:	2800      	cmp	r0, #0
 8002576:	d0e0      	beq.n	800253a <sys_status_dump+0x32>
    ret = flash_indirect_read(start, buf, tlen);
 8002578:	4630      	mov	r0, r6
 800257a:	462a      	mov	r2, r5
 800257c:	4641      	mov	r1, r8
 800257e:	f7ff f81d 	bl	80015bc <flash_indirect_read>
    if (ret != 0) goto exit;
 8002582:	4604      	mov	r4, r0
 8002584:	b180      	cbz	r0, 80025a8 <sys_status_dump+0xa0>
        mbedtls_free(buf);
 8002586:	4640      	mov	r0, r8
 8002588:	f003 fa66 	bl	8005a58 <__mbedtls_free_veneer>
    if (ret != 0)
 800258c:	e7d1      	b.n	8002532 <sys_status_dump+0x2a>
        mbl_trace(MBL_WARN, "Status dump error(0x%x).\r\n", ret);
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <sys_status_dump+0x100>)
        ret = -0xFF;
 8002590:	f06f 04fe 	mvn.w	r4, #254	; 0xfe
        mbl_trace(MBL_WARN, "Status dump error(0x%x).\r\n", ret);
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2b02      	cmp	r3, #2
 8002598:	ddcf      	ble.n	800253a <sys_status_dump+0x32>
 800259a:	4621      	mov	r1, r4
 800259c:	481c      	ldr	r0, [pc, #112]	; (8002610 <sys_status_dump+0x108>)
 800259e:	f001 fa41 	bl	8003a24 <iprintf>
}
 80025a2:	b004      	add	sp, #16
 80025a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sys_status_crypt(MBEDTLS_AES_DECRYPT, buf, tlen, buf);
 80025a8:	462a      	mov	r2, r5
 80025aa:	4643      	mov	r3, r8
 80025ac:	4641      	mov	r1, r8
 80025ae:	f7ff fb03 	bl	8001bb8 <sys_status_crypt>
    if (ret != 0) goto exit;
 80025b2:	4604      	mov	r4, r0
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d1e6      	bne.n	8002586 <sys_status_dump+0x7e>
    mbl_print_data(title, buf, sys_hdr->tot_len);
 80025b8:	4816      	ldr	r0, [pc, #88]	; (8002614 <sys_status_dump+0x10c>)
 80025ba:	f001 fa33 	bl	8003a24 <iprintf>
 80025be:	4639      	mov	r1, r7
 80025c0:	4815      	ldr	r0, [pc, #84]	; (8002618 <sys_status_dump+0x110>)
 80025c2:	f001 fa2f 	bl	8003a24 <iprintf>
 80025c6:	9b00      	ldr	r3, [sp, #0]
 80025c8:	b193      	cbz	r3, 80025f0 <sys_status_dump+0xe8>
 80025ca:	4e14      	ldr	r6, [pc, #80]	; (800261c <sys_status_dump+0x114>)
 80025cc:	4f14      	ldr	r7, [pc, #80]	; (8002620 <sys_status_dump+0x118>)
 80025ce:	f108 35ff 	add.w	r5, r8, #4294967295
 80025d2:	4630      	mov	r0, r6
 80025d4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80025d8:	f001 fa24 	bl	8003a24 <iprintf>
 80025dc:	9b00      	ldr	r3, [sp, #0]
 80025de:	3401      	adds	r4, #1
 80025e0:	42a3      	cmp	r3, r4
 80025e2:	d905      	bls.n	80025f0 <sys_status_dump+0xe8>
 80025e4:	0723      	lsls	r3, r4, #28
 80025e6:	d1f4      	bne.n	80025d2 <sys_status_dump+0xca>
 80025e8:	4638      	mov	r0, r7
 80025ea:	f001 fa1b 	bl	8003a24 <iprintf>
 80025ee:	e7f0      	b.n	80025d2 <sys_status_dump+0xca>
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <sys_status_dump+0x11c>)
 80025f2:	f001 fa17 	bl	8003a24 <iprintf>
        mbedtls_free(buf);
 80025f6:	4640      	mov	r0, r8
 80025f8:	f003 fa2e 	bl	8005a58 <__mbedtls_free_veneer>
    if (ret != 0)
 80025fc:	e79d      	b.n	800253a <sys_status_dump+0x32>
 80025fe:	bf00      	nop
 8002600:	08005d3c 	.word	0x08005d3c
 8002604:	08005d4c 	.word	0x08005d4c
 8002608:	20000bfc 	.word	0x20000bfc
 800260c:	19342750 	.word	0x19342750
 8002610:	08005d8c 	.word	0x08005d8c
 8002614:	08005d5c 	.word	0x08005d5c
 8002618:	08005d78 	.word	0x08005d78
 800261c:	08005d84 	.word	0x08005d84
 8002620:	08005d80 	.word	0x08005d80
 8002624:	08005cf4 	.word	0x08005cf4

08002628 <sys_status_check>:
      \arg        -2: set system firmware version error
      \arg        -3: flash write error
      \arg        -4: check system status integrity error
*/
int sys_status_check(void)
{
 8002628:	b510      	push	{r4, lr}
 800262a:	b082      	sub	sp, #8
    uint8_t val;
    uint32_t ver_lock_addr = FLASH_BASE + FLASH_OFFSET_IMG_VERSION_LOCK;  /* Last 4 bytes of the first 32k main bootloader area */
    uint32_t val32;

    /* Initialize mbedtls platform related function pointers */
    mbedtls_init();
 800262c:	f7ff fc98 	bl	8001f60 <mbedtls_init>

    /* Set system status area as no decryption area */
    flash_nodec_config(0, (FLASH_OFFSET_SYS_STATUS_PING >> 12), (FLASH_OFFSET_SYS_STATUS_PING >> 12) + 1);
 8002630:	2209      	movs	r2, #9
 8002632:	2108      	movs	r1, #8
 8002634:	2000      	movs	r0, #0
 8002636:	f7fe ff31 	bl	800149c <flash_nodec_config>

    /* init sys status */
    if (*(uint32_t*)ver_lock_addr == 0xFFFFFFFF) {
 800263a:	4b33      	ldr	r3, [pc, #204]	; (8002708 <sys_status_check+0xe0>)
 800263c:	681c      	ldr	r4, [r3, #0]
 800263e:	1c63      	adds	r3, r4, #1
 8002640:	d02b      	beq.n	800269a <sys_status_check+0x72>
        if (ret != 0) {
            return -3;
        }
        mbl_trace(MBL_INFO, "Sys status init OK.\r\n");
    } else {
        ret = sys_statu_integritys_check();
 8002642:	f7ff fcd9 	bl	8001ff8 <sys_statu_integritys_check>
        if (ret != 0) {
 8002646:	2800      	cmp	r0, #0
 8002648:	d14c      	bne.n	80026e4 <sys_status_check+0xbc>
 800264a:	4c30      	ldr	r4, [pc, #192]	; (800270c <sys_status_check+0xe4>)
            return -4;
        }
    }

    /* Read Trace Level */
    ret = sys_status_get(SYS_TRACE_LEVEL, LEN_SYS_TRACE_LEVEL, &val);
 800264c:	2101      	movs	r1, #1
 800264e:	2002      	movs	r0, #2
 8002650:	f10d 0203 	add.w	r2, sp, #3
 8002654:	f7ff fd5a 	bl	800210c <sys_status_get>
    if (ret >= SYS_STATUS_FOUND_OK){
 8002658:	2800      	cmp	r0, #0
        mbl_trace_level = val;
 800265a:	bfaa      	itet	ge
 800265c:	f89d 3003 	ldrbge.w	r3, [sp, #3]
 8002660:	6823      	ldrlt	r3, [r4, #0]
 8002662:	6023      	strge	r3, [r4, #0]
    }
    mbl_trace(MBL_INFO, "Sys status checked OK.\r\n");
 8002664:	2b03      	cmp	r3, #3
 8002666:	dc34      	bgt.n	80026d2 <sys_status_check+0xaa>

    /* Read Error Process */
    ret = sys_status_get(SYS_ERROR_PROCESS, LEN_SYS_ERROR_PROCESS, &val);
 8002668:	2101      	movs	r1, #1
 800266a:	f10d 0203 	add.w	r2, sp, #3
 800266e:	4608      	mov	r0, r1
 8002670:	f7ff fd4c 	bl	800210c <sys_status_get>
    if (ret >= SYS_STATUS_FOUND_OK){
 8002674:	2800      	cmp	r0, #0
 8002676:	db0d      	blt.n	8002694 <sys_status_check+0x6c>
        if (val > ERR_PROCESS_REDOWNLOD)
 8002678:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800267c:	b923      	cbnz	r3, 8002688 <sys_status_check+0x60>
            mbl_err_process = ERR_PROCESS_ENDLESS_LOOP;
        else
            mbl_err_process = ERR_PROCESS_REDOWNLOD;
    }

    return 0;
 800267e:	4618      	mov	r0, r3
            mbl_err_process = ERR_PROCESS_REDOWNLOD;
 8002680:	4a23      	ldr	r2, [pc, #140]	; (8002710 <sys_status_check+0xe8>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	b002      	add	sp, #8
 8002686:	bd10      	pop	{r4, pc}
            mbl_err_process = ERR_PROCESS_ENDLESS_LOOP;
 8002688:	2201      	movs	r2, #1
    return 0;
 800268a:	2000      	movs	r0, #0
            mbl_err_process = ERR_PROCESS_ENDLESS_LOOP;
 800268c:	4b20      	ldr	r3, [pc, #128]	; (8002710 <sys_status_check+0xe8>)
 800268e:	601a      	str	r2, [r3, #0]
}
 8002690:	b002      	add	sp, #8
 8002692:	bd10      	pop	{r4, pc}
    return 0;
 8002694:	2000      	movs	r0, #0
}
 8002696:	b002      	add	sp, #8
 8002698:	bd10      	pop	{r4, pc}
        ret = sys_status_init();
 800269a:	f7ff fc77 	bl	8001f8c <sys_status_init>
        if (ret != 0) {
 800269e:	b9e0      	cbnz	r0, 80026da <sys_status_check+0xb2>
        val32 = 1;
 80026a0:	2101      	movs	r1, #1
        ret = sys_fw_version_set(IMG_TYPE_IMG, val32);
 80026a2:	2008      	movs	r0, #8
        val32 = 1;
 80026a4:	9101      	str	r1, [sp, #4]
        ret = sys_fw_version_set(IMG_TYPE_IMG, val32);
 80026a6:	f7ff fe47 	bl	8002338 <sys_fw_version_set>
        if (ret != 0) {
 80026aa:	b9c0      	cbnz	r0, 80026de <sys_status_check+0xb6>
        ret = flash_write(FLASH_OFFSET_IMG_VERSION_LOCK, (void*)&val32, sizeof(uint32_t));
 80026ac:	2204      	movs	r2, #4
        val32 = 0xCDCDCDCD;
 80026ae:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
        ret = flash_write(FLASH_OFFSET_IMG_VERSION_LOCK, (void*)&val32, sizeof(uint32_t));
 80026b2:	f647 70fc 	movw	r0, #32764	; 0x7ffc
 80026b6:	eb0d 0102 	add.w	r1, sp, r2
        val32 = 0xCDCDCDCD;
 80026ba:	9301      	str	r3, [sp, #4]
        ret = flash_write(FLASH_OFFSET_IMG_VERSION_LOCK, (void*)&val32, sizeof(uint32_t));
 80026bc:	f7fe ffc8 	bl	8001650 <flash_write>
        if (ret != 0) {
 80026c0:	b9b8      	cbnz	r0, 80026f2 <sys_status_check+0xca>
        mbl_trace(MBL_INFO, "Sys status init OK.\r\n");
 80026c2:	4c12      	ldr	r4, [pc, #72]	; (800270c <sys_status_check+0xe4>)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	ddc0      	ble.n	800264c <sys_status_check+0x24>
 80026ca:	4812      	ldr	r0, [pc, #72]	; (8002714 <sys_status_check+0xec>)
 80026cc:	f001 f9aa 	bl	8003a24 <iprintf>
 80026d0:	e7bc      	b.n	800264c <sys_status_check+0x24>
    mbl_trace(MBL_INFO, "Sys status checked OK.\r\n");
 80026d2:	4811      	ldr	r0, [pc, #68]	; (8002718 <sys_status_check+0xf0>)
 80026d4:	f001 f9a6 	bl	8003a24 <iprintf>
 80026d8:	e7c6      	b.n	8002668 <sys_status_check+0x40>
            return -1;
 80026da:	4620      	mov	r0, r4
 80026dc:	e7d2      	b.n	8002684 <sys_status_check+0x5c>
            return -2;
 80026de:	f06f 0001 	mvn.w	r0, #1
 80026e2:	e7cf      	b.n	8002684 <sys_status_check+0x5c>
            mbl_trace(MBL_INFO, "Sys status check failed (%d).\r\n", ret);
 80026e4:	4b09      	ldr	r3, [pc, #36]	; (800270c <sys_status_check+0xe4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	dc05      	bgt.n	80026f8 <sys_status_check+0xd0>
            return -4;
 80026ec:	f06f 0003 	mvn.w	r0, #3
 80026f0:	e7c8      	b.n	8002684 <sys_status_check+0x5c>
            return -3;
 80026f2:	f06f 0002 	mvn.w	r0, #2
 80026f6:	e7c5      	b.n	8002684 <sys_status_check+0x5c>
            mbl_trace(MBL_INFO, "Sys status check failed (%d).\r\n", ret);
 80026f8:	4601      	mov	r1, r0
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <sys_status_check+0xf4>)
 80026fc:	f001 f992 	bl	8003a24 <iprintf>
            return -4;
 8002700:	f06f 0003 	mvn.w	r0, #3
 8002704:	e7be      	b.n	8002684 <sys_status_check+0x5c>
 8002706:	bf00      	nop
 8002708:	08007ffc 	.word	0x08007ffc
 800270c:	20000bfc 	.word	0x20000bfc
 8002710:	20000bf8 	.word	0x20000bf8
 8002714:	08005db0 	.word	0x08005db0
 8002718:	08005df4 	.word	0x08005df4
 800271c:	08005dcc 	.word	0x08005dcc

08002720 <uart_putc>:
    \param[in]  c: data to transmission
    \param[out] none
    \retval     none
*/
void uart_putc(uint8_t c)
{
 8002720:	b510      	push	{r4, lr}
 8002722:	4604      	mov	r4, r0
    while (RESET == usart_flag_get(LOG_UART, USART_FLAG_TBE));
 8002724:	f240 7107 	movw	r1, #1799	; 0x707
 8002728:	4805      	ldr	r0, [pc, #20]	; (8002740 <uart_putc+0x20>)
 800272a:	f000 fbf5 	bl	8002f18 <usart_flag_get>
 800272e:	2800      	cmp	r0, #0
 8002730:	d0f8      	beq.n	8002724 <uart_putc+0x4>
    usart_data_transmit(LOG_UART, (uint8_t)c);
 8002732:	4621      	mov	r1, r4
}
 8002734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usart_data_transmit(LOG_UART, (uint8_t)c);
 8002738:	4801      	ldr	r0, [pc, #4]	; (8002740 <uart_putc+0x20>)
 800273a:	f000 bbe9 	b.w	8002f10 <usart_data_transmit>
 800273e:	bf00      	nop
 8002740:	40004400 	.word	0x40004400

08002744 <_write>:
    /* Return character written */
    return ch;
}
#elif defined(__GNUC__)
int _write(int fd, char *str, int len)
{
 8002744:	b570      	push	{r4, r5, r6, lr}
    (void)fd;
    uint32_t i = 0;

    /* Send string and return the number of characters written */
    for (i = 0; i < len; i ++) {
 8002746:	4616      	mov	r6, r2
 8002748:	b13a      	cbz	r2, 800275a <_write+0x16>
 800274a:	460c      	mov	r4, r1
 800274c:	188d      	adds	r5, r1, r2
        uart_putc(*str++);
 800274e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002752:	f7ff ffe5 	bl	8002720 <uart_putc>
    for (i = 0; i < len; i ++) {
 8002756:	42a5      	cmp	r5, r4
 8002758:	d1f9      	bne.n	800274e <_write+0xa>
    }
    return len;
}
 800275a:	4630      	mov	r0, r6
 800275c:	bd70      	pop	{r4, r5, r6, pc}
 800275e:	bf00      	nop

08002760 <uart_config>:
    \param[out] none
    \retval     none
*/
void uart_config(uint32_t usart_periph)
{
    if (usart_periph == USART1) {
 8002760:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <uart_config+0x100>)
{
 8002762:	b510      	push	{r4, lr}
    if (usart_periph == USART1) {
 8002764:	4298      	cmp	r0, r3
{
 8002766:	4604      	mov	r4, r0
    if (usart_periph == USART1) {
 8002768:	d044      	beq.n	80027f4 <uart_config+0x94>
        gpio_af_set(GPIOA, GPIO_AF_3, GPIO_PIN_8);
        gpio_mode_set(GPIOB, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO_PIN_15);
        gpio_output_options_set(GPIOB, GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, GPIO_PIN_15);
        gpio_mode_set(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO_PIN_8);
        gpio_output_options_set(GPIOA, GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, GPIO_PIN_8);
    } else if (usart_periph == USART2) {
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <uart_config+0x104>)
 800276c:	4298      	cmp	r0, r3
 800276e:	d000      	beq.n	8002772 <uart_config+0x12>
    //usart_receive_config(usart_periph, USART_RECEIVE_ENABLE);
    usart_transmit_config(usart_periph, USART_TRANSMIT_ENABLE);
    usart_enable(usart_periph);

    //usart_interrupt_enable(usart_periph, USART_INT_RBNE);
}
 8002770:	bd10      	pop	{r4, pc}
        rcu_periph_clock_enable(RCU_USART2);
 8002772:	f241 1004 	movw	r0, #4356	; 0x1104
 8002776:	f000 fa79 	bl	8002c6c <rcu_periph_clock_enable>
        rcu_periph_clock_enable(RCU_GPIOB);
 800277a:	f640 4001 	movw	r0, #3073	; 0xc01
 800277e:	f000 fa75 	bl	8002c6c <rcu_periph_clock_enable>
        gpio_af_set(GPIOB, GPIO_AF_7, GPIO_PIN_10);
 8002782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002786:	2107      	movs	r1, #7
 8002788:	4837      	ldr	r0, [pc, #220]	; (8002868 <uart_config+0x108>)
 800278a:	f000 f9ed 	bl	8002b68 <gpio_af_set>
        gpio_af_set(GPIOB, GPIO_AF_7, GPIO_PIN_11);
 800278e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002792:	2107      	movs	r1, #7
 8002794:	4834      	ldr	r0, [pc, #208]	; (8002868 <uart_config+0x108>)
 8002796:	f000 f9e7 	bl	8002b68 <gpio_af_set>
        gpio_mode_set(GPIOB, GPIO_MODE_AF, GPIO_PUPD_PULLUP, GPIO_PIN_10);
 800279a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800279e:	2201      	movs	r2, #1
 80027a0:	2102      	movs	r1, #2
 80027a2:	4831      	ldr	r0, [pc, #196]	; (8002868 <uart_config+0x108>)
 80027a4:	f000 f9a0 	bl	8002ae8 <gpio_mode_set>
        gpio_output_options_set(GPIOB, GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, GPIO_PIN_10);
 80027a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ac:	2202      	movs	r2, #2
 80027ae:	2100      	movs	r1, #0
 80027b0:	482d      	ldr	r0, [pc, #180]	; (8002868 <uart_config+0x108>)
 80027b2:	f000 f9bb 	bl	8002b2c <gpio_output_options_set>
        gpio_mode_set(GPIOB, GPIO_MODE_AF, GPIO_PUPD_PULLUP, GPIO_PIN_11);
 80027b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027ba:	2201      	movs	r2, #1
 80027bc:	2102      	movs	r1, #2
 80027be:	482a      	ldr	r0, [pc, #168]	; (8002868 <uart_config+0x108>)
 80027c0:	f000 f992 	bl	8002ae8 <gpio_mode_set>
        gpio_output_options_set(GPIOB, GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, GPIO_PIN_11);
 80027c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027c8:	2202      	movs	r2, #2
 80027ca:	2100      	movs	r1, #0
 80027cc:	4826      	ldr	r0, [pc, #152]	; (8002868 <uart_config+0x108>)
 80027ce:	f000 f9ad 	bl	8002b2c <gpio_output_options_set>
    usart_deinit(usart_periph);
 80027d2:	4620      	mov	r0, r4
 80027d4:	f000 fb2c 	bl	8002e30 <usart_deinit>
    usart_baudrate_set(usart_periph, 115200U);
 80027d8:	4620      	mov	r0, r4
 80027da:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80027de:	f000 fb55 	bl	8002e8c <usart_baudrate_set>
    usart_transmit_config(usart_periph, USART_TRANSMIT_ENABLE);
 80027e2:	4620      	mov	r0, r4
 80027e4:	2108      	movs	r1, #8
 80027e6:	f000 fb8b 	bl	8002f00 <usart_transmit_config>
    usart_enable(usart_periph);
 80027ea:	4620      	mov	r0, r4
}
 80027ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    usart_enable(usart_periph);
 80027f0:	f000 bb80 	b.w	8002ef4 <usart_enable>
        rcu_periph_clock_enable(RCU_USART1);
 80027f4:	f241 0011 	movw	r0, #4113	; 0x1011
 80027f8:	f000 fa38 	bl	8002c6c <rcu_periph_clock_enable>
        rcu_periph_clock_enable(RCU_GPIOB);
 80027fc:	f640 4001 	movw	r0, #3073	; 0xc01
 8002800:	f000 fa34 	bl	8002c6c <rcu_periph_clock_enable>
        rcu_periph_clock_enable(RCU_GPIOA);
 8002804:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002808:	f000 fa30 	bl	8002c6c <rcu_periph_clock_enable>
        gpio_af_set(GPIOB, GPIO_AF_7, GPIO_PIN_15);
 800280c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002810:	2107      	movs	r1, #7
 8002812:	4815      	ldr	r0, [pc, #84]	; (8002868 <uart_config+0x108>)
 8002814:	f000 f9a8 	bl	8002b68 <gpio_af_set>
        gpio_af_set(GPIOA, GPIO_AF_3, GPIO_PIN_8);
 8002818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800281c:	2103      	movs	r1, #3
 800281e:	4813      	ldr	r0, [pc, #76]	; (800286c <uart_config+0x10c>)
 8002820:	f000 f9a2 	bl	8002b68 <gpio_af_set>
        gpio_mode_set(GPIOB, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO_PIN_15);
 8002824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002828:	2200      	movs	r2, #0
 800282a:	2102      	movs	r1, #2
 800282c:	480e      	ldr	r0, [pc, #56]	; (8002868 <uart_config+0x108>)
 800282e:	f000 f95b 	bl	8002ae8 <gpio_mode_set>
        gpio_output_options_set(GPIOB, GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, GPIO_PIN_15);
 8002832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002836:	2202      	movs	r2, #2
 8002838:	2100      	movs	r1, #0
 800283a:	480b      	ldr	r0, [pc, #44]	; (8002868 <uart_config+0x108>)
 800283c:	f000 f976 	bl	8002b2c <gpio_output_options_set>
        gpio_mode_set(GPIOA, GPIO_MODE_AF, GPIO_PUPD_NONE, GPIO_PIN_8);
 8002840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002844:	2200      	movs	r2, #0
 8002846:	2102      	movs	r1, #2
 8002848:	4808      	ldr	r0, [pc, #32]	; (800286c <uart_config+0x10c>)
 800284a:	f000 f94d 	bl	8002ae8 <gpio_mode_set>
        gpio_output_options_set(GPIOA, GPIO_OTYPE_PP, GPIO_OSPEED_25MHZ, GPIO_PIN_8);
 800284e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002852:	2202      	movs	r2, #2
 8002854:	2100      	movs	r1, #0
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <uart_config+0x10c>)
 8002858:	f000 f968 	bl	8002b2c <gpio_output_options_set>
 800285c:	e7b9      	b.n	80027d2 <uart_config+0x72>
 800285e:	bf00      	nop
 8002860:	40004400 	.word	0x40004400
 8002864:	40011000 	.word	0x40011000
 8002868:	40020400 	.word	0x40020400
 800286c:	40020000 	.word	0x40020000

08002870 <log_uart_init>:
    \param[out] none
    \retval     none
*/
void log_uart_init(void)
{
    uart_config(LOG_UART);
 8002870:	4801      	ldr	r0, [pc, #4]	; (8002878 <log_uart_init+0x8>)
 8002872:	f7ff bf75 	b.w	8002760 <uart_config>
 8002876:	bf00      	nop
 8002878:	40004400 	.word	0x40004400

0800287c <log_uart_idle_wait>:
    \param[in]  none
    \param[out] none
    \retval     none
*/
void log_uart_idle_wait(void)
{
 800287c:	b510      	push	{r4, lr}
    while (RESET == usart_flag_get(LOG_UART, USART_FLAG_TC));
 800287e:	4c04      	ldr	r4, [pc, #16]	; (8002890 <log_uart_idle_wait+0x14>)
 8002880:	f240 7106 	movw	r1, #1798	; 0x706
 8002884:	4620      	mov	r0, r4
 8002886:	f000 fb47 	bl	8002f18 <usart_flag_get>
 800288a:	2800      	cmp	r0, #0
 800288c:	d0f8      	beq.n	8002880 <log_uart_idle_wait+0x4>
}
 800288e:	bd10      	pop	{r4, pc}
 8002890:	40004400 	.word	0x40004400

08002894 <fmc_unlock>:
        /* write the FMC unlock key */
        FMC_KEY = UNLOCK_KEY0;
        FMC_KEY = UNLOCK_KEY1;
    }
#else
    if(RESET != (FMC_CTL & FMC_CTL_LK)){
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <fmc_unlock+0x14>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	d504      	bpl.n	80028a6 <fmc_unlock+0x12>
        /* write the FMC unlock key */
        FMC_KEY = UNLOCK_KEY0;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <fmc_unlock+0x18>)
 800289e:	4904      	ldr	r1, [pc, #16]	; (80028b0 <fmc_unlock+0x1c>)
        FMC_KEY = UNLOCK_KEY1;
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <fmc_unlock+0x20>)
        FMC_KEY = UNLOCK_KEY0;
 80028a2:	6019      	str	r1, [r3, #0]
        FMC_KEY = UNLOCK_KEY1;
 80028a4:	601a      	str	r2, [r3, #0]
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3) */
}
 80028a6:	4770      	bx	lr
 80028a8:	40022010 	.word	0x40022010
 80028ac:	40022004 	.word	0x40022004
 80028b0:	45670123 	.word	0x45670123
 80028b4:	cdef89ab 	.word	0xcdef89ab

080028b8 <fmc_lock>:
    FMC_SECCTL |= FMC_SECCTL_SECLK;
    /* set the LK bit */
    FMC_CTL |= FMC_CTL_LK;
#else
    /* set the LK bit */
    FMC_CTL |= FMC_CTL_LK;
 80028b8:	4a02      	ldr	r2, [pc, #8]	; (80028c4 <fmc_lock+0xc>)
 80028ba:	6813      	ldr	r3, [r2, #0]
 80028bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c0:	6013      	str	r3, [r2, #0]
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3) */ 
}
 80028c2:	4770      	bx	lr
 80028c4:	40022010 	.word	0x40022010

080028c8 <fmc_page_erase>:
      \arg        FMC_TOERR: timeout error
      \arg        FMC_OBERR: option bytes error
      \arg        FMC_SECERR: secure program error, only available in secure mode
*/
fmc_state_enum fmc_page_erase(uint32_t page_address)
{
 80028c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
                }
            }
        }
    }
#else
    if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY)){
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <fmc_page_erase+0x78>)
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	07c9      	lsls	r1, r1, #31
 80028d2:	d503      	bpl.n	80028dc <fmc_page_erase+0x14>
    /* wait for FMC ready */
    do{
        /* get FMC state */
        fmc_state = fmc_state_get();
        timeout--;
    }while((FMC_BUSY == fmc_state) && (0x00U != timeout));
 80028d4:	3a01      	subs	r2, #1
 80028d6:	d1fa      	bne.n	80028ce <fmc_page_erase+0x6>

    if(FMC_BUSY == fmc_state){
        fmc_state = FMC_TOERR;
 80028d8:	2003      	movs	r0, #3
 80028da:	4770      	bx	lr
        if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_WPERR)){
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	06d2      	lsls	r2, r2, #27
 80028e0:	d429      	bmi.n	8002936 <fmc_page_erase+0x6e>
            if((uint32_t)0x00U != (FMC_STAT & (FMC_STAT_OBERR))){
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	071b      	lsls	r3, r3, #28
 80028e6:	d415      	bmi.n	8002914 <fmc_page_erase+0x4c>
{
 80028e8:	b430      	push	{r4, r5}
        FMC_CTL |= FMC_CTL_START;
 80028ea:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
        FMC_CTL |= FMC_CTL_PER;
 80028ee:	4b15      	ldr	r3, [pc, #84]	; (8002944 <fmc_page_erase+0x7c>)
        FMC_ADDR = page_address;
 80028f0:	4d15      	ldr	r5, [pc, #84]	; (8002948 <fmc_page_erase+0x80>)
        FMC_CTL |= FMC_CTL_PER;
 80028f2:	6819      	ldr	r1, [r3, #0]
    if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY)){
 80028f4:	4a12      	ldr	r2, [pc, #72]	; (8002940 <fmc_page_erase+0x78>)
        FMC_CTL |= FMC_CTL_PER;
 80028f6:	f041 0102 	orr.w	r1, r1, #2
 80028fa:	6019      	str	r1, [r3, #0]
        FMC_ADDR = page_address;
 80028fc:	6028      	str	r0, [r5, #0]
        FMC_CTL |= FMC_CTL_START;
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002904:	6019      	str	r1, [r3, #0]
    if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY)){
 8002906:	6813      	ldr	r3, [r2, #0]
 8002908:	07d9      	lsls	r1, r3, #31
 800290a:	d505      	bpl.n	8002918 <fmc_page_erase+0x50>
    }while((FMC_BUSY == fmc_state) && (0x00U != timeout));
 800290c:	3c01      	subs	r4, #1
 800290e:	d1fa      	bne.n	8002906 <fmc_page_erase+0x3e>
        fmc_state = FMC_TOERR;
 8002910:	2003      	movs	r0, #3
 8002912:	e009      	b.n	8002928 <fmc_page_erase+0x60>
                fmc_state = FMC_OBERR; 
 8002914:	2004      	movs	r0, #4
}
 8002916:	4770      	bx	lr
        if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_WPERR)){
 8002918:	6813      	ldr	r3, [r2, #0]
 800291a:	06db      	lsls	r3, r3, #27
 800291c:	d40d      	bmi.n	800293a <fmc_page_erase+0x72>
            if((uint32_t)0x00U != (FMC_STAT & (FMC_STAT_OBERR))){
 800291e:	6810      	ldr	r0, [r2, #0]
                fmc_state = FMC_OBERR; 
 8002920:	f010 0008 	ands.w	r0, r0, #8
 8002924:	bf18      	it	ne
 8002926:	2004      	movne	r0, #4
}
 8002928:	bc30      	pop	{r4, r5}
        FMC_CTL &= ~FMC_CTL_PER;
 800292a:	4a06      	ldr	r2, [pc, #24]	; (8002944 <fmc_page_erase+0x7c>)
 800292c:	6813      	ldr	r3, [r2, #0]
 800292e:	f023 0302 	bic.w	r3, r3, #2
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	4770      	bx	lr
            fmc_state = FMC_WPERR;
 8002936:	2002      	movs	r0, #2
 8002938:	4770      	bx	lr
 800293a:	2002      	movs	r0, #2
 800293c:	e7f4      	b.n	8002928 <fmc_page_erase+0x60>
 800293e:	bf00      	nop
 8002940:	4002200c 	.word	0x4002200c
 8002944:	40022010 	.word	0x40022010
 8002948:	40022014 	.word	0x40022014

0800294c <fmc_word_program>:
{
 800294c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002950:	b430      	push	{r4, r5}
    if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY)){
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <fmc_word_program+0x70>)
 8002954:	681c      	ldr	r4, [r3, #0]
 8002956:	07e4      	lsls	r4, r4, #31
 8002958:	d503      	bpl.n	8002962 <fmc_word_program+0x16>
    }while((FMC_BUSY == fmc_state) && (0x00U != timeout));
 800295a:	3a01      	subs	r2, #1
 800295c:	d1fa      	bne.n	8002954 <fmc_word_program+0x8>
        fmc_state = FMC_TOERR;
 800295e:	2003      	movs	r0, #3
 8002960:	e016      	b.n	8002990 <fmc_word_program+0x44>
        if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_WPERR)){
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	06d5      	lsls	r5, r2, #27
 8002966:	d424      	bmi.n	80029b2 <fmc_word_program+0x66>
            if((uint32_t)0x00U != (FMC_STAT & (FMC_STAT_OBERR))){
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	071c      	lsls	r4, r3, #28
 800296c:	d40f      	bmi.n	800298e <fmc_word_program+0x42>
        REG32(address) = data;
 800296e:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
        FMC_CTL |= FMC_CTL_PG;
 8002972:	4d13      	ldr	r5, [pc, #76]	; (80029c0 <fmc_word_program+0x74>)
    if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY)){
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <fmc_word_program+0x70>)
        FMC_CTL |= FMC_CTL_PG;
 8002976:	682a      	ldr	r2, [r5, #0]
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	602a      	str	r2, [r5, #0]
        REG32(address) = data;
 800297e:	6001      	str	r1, [r0, #0]
    if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY)){
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	07d1      	lsls	r1, r2, #31
 8002984:	d506      	bpl.n	8002994 <fmc_word_program+0x48>
    }while((FMC_BUSY == fmc_state) && (0x00U != timeout));
 8002986:	3c01      	subs	r4, #1
 8002988:	d1fa      	bne.n	8002980 <fmc_word_program+0x34>
        fmc_state = FMC_TOERR;
 800298a:	2003      	movs	r0, #3
 800298c:	e00a      	b.n	80029a4 <fmc_word_program+0x58>
                fmc_state = FMC_OBERR; 
 800298e:	2004      	movs	r0, #4
}
 8002990:	bc30      	pop	{r4, r5}
 8002992:	4770      	bx	lr
        if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_WPERR)){
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	06d2      	lsls	r2, r2, #27
 8002998:	d40e      	bmi.n	80029b8 <fmc_word_program+0x6c>
            if((uint32_t)0x00U != (FMC_STAT & (FMC_STAT_OBERR))){
 800299a:	6818      	ldr	r0, [r3, #0]
                fmc_state = FMC_OBERR; 
 800299c:	f010 0008 	ands.w	r0, r0, #8
 80029a0:	bf18      	it	ne
 80029a2:	2004      	movne	r0, #4
}
 80029a4:	bc30      	pop	{r4, r5}
        FMC_CTL &= ~FMC_CTL_PG;
 80029a6:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <fmc_word_program+0x74>)
 80029a8:	6813      	ldr	r3, [r2, #0]
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	6013      	str	r3, [r2, #0]
}
 80029b0:	4770      	bx	lr
            fmc_state = FMC_WPERR;
 80029b2:	2002      	movs	r0, #2
}
 80029b4:	bc30      	pop	{r4, r5}
 80029b6:	4770      	bx	lr
            fmc_state = FMC_WPERR;
 80029b8:	2002      	movs	r0, #2
 80029ba:	e7f3      	b.n	80029a4 <fmc_word_program+0x58>
 80029bc:	4002200c 	.word	0x4002200c
 80029c0:	40022010 	.word	0x40022010

080029c4 <fmc_continuous_program>:
{
 80029c4:	b4f0      	push	{r4, r5, r6, r7}
 80029c6:	4604      	mov	r4, r0
 80029c8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_BUSY)){
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <fmc_continuous_program+0x64>)
 80029ce:	681f      	ldr	r7, [r3, #0]
 80029d0:	07fd      	lsls	r5, r7, #31
 80029d2:	d503      	bpl.n	80029dc <fmc_continuous_program+0x18>
    }while((FMC_BUSY == fmc_state) && (0x00U != timeout));
 80029d4:	3e01      	subs	r6, #1
 80029d6:	d1fa      	bne.n	80029ce <fmc_continuous_program+0xa>
        fmc_state = FMC_TOERR;
 80029d8:	2003      	movs	r0, #3
 80029da:	e01d      	b.n	8002a18 <fmc_continuous_program+0x54>
        if((uint32_t)0x00U != (FMC_STAT & FMC_STAT_WPERR)){
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	06c0      	lsls	r0, r0, #27
 80029e0:	d41f      	bmi.n	8002a22 <fmc_continuous_program+0x5e>
            if((uint32_t)0x00U != (FMC_STAT & (FMC_STAT_OBERR))){
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	f010 0008 	ands.w	r0, r0, #8
 80029e8:	d118      	bne.n	8002a1c <fmc_continuous_program+0x58>
        FMC_CTL |= FMC_CTL_PG;
 80029ea:	4d10      	ldr	r5, [pc, #64]	; (8002a2c <fmc_continuous_program+0x68>)
        for(uint32_t i = 0U; i < size; i++)
 80029ec:	0892      	lsrs	r2, r2, #2
        FMC_CTL |= FMC_CTL_PG;
 80029ee:	682b      	ldr	r3, [r5, #0]
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	602b      	str	r3, [r5, #0]
        for(uint32_t i = 0U; i < size; i++)
 80029f6:	d00a      	beq.n	8002a0e <fmc_continuous_program+0x4a>
 80029f8:	3404      	adds	r4, #4
 80029fa:	1f0b      	subs	r3, r1, #4
 80029fc:	1a65      	subs	r5, r4, r1
 80029fe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            REG32(address) = data[i];
 8002a02:	18e9      	adds	r1, r5, r3
 8002a04:	f853 4f04 	ldr.w	r4, [r3, #4]!
        for(uint32_t i = 0U; i < size; i++)
 8002a08:	4293      	cmp	r3, r2
            REG32(address) = data[i];
 8002a0a:	600c      	str	r4, [r1, #0]
        for(uint32_t i = 0U; i < size; i++)
 8002a0c:	d1f9      	bne.n	8002a02 <fmc_continuous_program+0x3e>
        FMC_CTL &= ~FMC_CTL_PG;
 8002a0e:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <fmc_continuous_program+0x68>)
 8002a10:	6813      	ldr	r3, [r2, #0]
 8002a12:	f023 0301 	bic.w	r3, r3, #1
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bcf0      	pop	{r4, r5, r6, r7}
 8002a1a:	4770      	bx	lr
                fmc_state = FMC_OBERR; 
 8002a1c:	2004      	movs	r0, #4
}
 8002a1e:	bcf0      	pop	{r4, r5, r6, r7}
 8002a20:	4770      	bx	lr
            fmc_state = FMC_WPERR;
 8002a22:	2002      	movs	r0, #2
}
 8002a24:	bcf0      	pop	{r4, r5, r6, r7}
 8002a26:	4770      	bx	lr
 8002a28:	4002200c 	.word	0x4002200c
 8002a2c:	40022010 	.word	0x40022010

08002a30 <ob_unlock>:
    if(RESET == (FMC_CTL & FMC_CTL_OBWEN)){
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <ob_unlock+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	059b      	lsls	r3, r3, #22
 8002a36:	d404      	bmi.n	8002a42 <ob_unlock+0x12>
        FMC_OBKEY = UNLOCK_KEY0;
 8002a38:	4b03      	ldr	r3, [pc, #12]	; (8002a48 <ob_unlock+0x18>)
 8002a3a:	4904      	ldr	r1, [pc, #16]	; (8002a4c <ob_unlock+0x1c>)
        FMC_OBKEY = UNLOCK_KEY1;
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <ob_unlock+0x20>)
        FMC_OBKEY = UNLOCK_KEY0;
 8002a3e:	6019      	str	r1, [r3, #0]
        FMC_OBKEY = UNLOCK_KEY1;
 8002a40:	601a      	str	r2, [r3, #0]
}
 8002a42:	4770      	bx	lr
 8002a44:	40022010 	.word	0x40022010
 8002a48:	40022008 	.word	0x40022008
 8002a4c:	45670123 	.word	0x45670123
 8002a50:	cdef89ab 	.word	0xcdef89ab

08002a54 <ob_lock>:
    FMC_CTL &= ~FMC_CTL_OBWEN;
 8002a54:	4a02      	ldr	r2, [pc, #8]	; (8002a60 <ob_lock+0xc>)
 8002a56:	6813      	ldr	r3, [r2, #0]
 8002a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a5c:	6013      	str	r3, [r2, #0]
}
 8002a5e:	4770      	bx	lr
 8002a60:	40022010 	.word	0x40022010

08002a64 <fmc_no_rtdec_config>:
    switch(nodec_register_index){
 8002a64:	2a03      	cmp	r2, #3
 8002a66:	d80d      	bhi.n	8002a84 <fmc_no_rtdec_config+0x20>
 8002a68:	e8df f002 	tbb	[pc, r2]
 8002a6c:	0213100d 	.word	0x0213100d
        FMC_NODEC3 = 0U;
 8002a70:	2200      	movs	r2, #0
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <fmc_no_rtdec_config+0x34>)
 8002a74:	601a      	str	r2, [r3, #0]
        FMC_NODEC3 |= nodec_spage;
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4310      	orrs	r0, r2
 8002a7a:	6018      	str	r0, [r3, #0]
        FMC_NODEC3 |= nodec_epage <<FMC_EPAGE_OFFSET;
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8002a82:	6019      	str	r1, [r3, #0]
}
 8002a84:	4770      	bx	lr
        FMC_NODEC0 = 0U;
 8002a86:	2200      	movs	r2, #0
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <fmc_no_rtdec_config+0x38>)
 8002a8a:	e7f3      	b.n	8002a74 <fmc_no_rtdec_config+0x10>
        FMC_NODEC1 = 0U;
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <fmc_no_rtdec_config+0x3c>)
 8002a90:	e7f0      	b.n	8002a74 <fmc_no_rtdec_config+0x10>
        FMC_NODEC2 = 0U;
 8002a92:	2200      	movs	r2, #0
 8002a94:	4b03      	ldr	r3, [pc, #12]	; (8002aa4 <fmc_no_rtdec_config+0x40>)
 8002a96:	e7ed      	b.n	8002a74 <fmc_no_rtdec_config+0x10>
 8002a98:	4002207c 	.word	0x4002207c
 8002a9c:	40022070 	.word	0x40022070
 8002aa0:	40022074 	.word	0x40022074
 8002aa4:	40022078 	.word	0x40022078

08002aa8 <fmc_offset_region_config>:
    FMC_OFRG = 0U;
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <fmc_offset_region_config+0x1c>)
{
 8002aac:	b410      	push	{r4}
    FMC_OFRG = 0U;
 8002aae:	601a      	str	r2, [r3, #0]
    FMC_OFRG |= (uint32_t)(of_spage);
 8002ab0:	681c      	ldr	r4, [r3, #0]
 8002ab2:	4320      	orrs	r0, r4
 8002ab4:	6018      	str	r0, [r3, #0]
    FMC_OFRG |= (uint32_t)(of_epage <<FMC_EPAGE_OFFSET);
 8002ab6:	681a      	ldr	r2, [r3, #0]
}
 8002ab8:	f85d 4b04 	ldr.w	r4, [sp], #4
    FMC_OFRG |= (uint32_t)(of_epage <<FMC_EPAGE_OFFSET);
 8002abc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8002ac0:	6019      	str	r1, [r3, #0]
}
 8002ac2:	4770      	bx	lr
 8002ac4:	40022080 	.word	0x40022080

08002ac8 <fmc_offset_value_config>:
    FMC_OFVR = 0U;
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <fmc_offset_value_config+0x10>)
 8002acc:	601a      	str	r2, [r3, #0]
    FMC_OFVR |= (uint32_t)(of_value);
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4310      	orrs	r0, r2
 8002ad2:	6018      	str	r0, [r3, #0]
}
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40022084 	.word	0x40022084

08002adc <fmc_flag_clear>:
    FMC_STAT = flag;
 8002adc:	4b01      	ldr	r3, [pc, #4]	; (8002ae4 <fmc_flag_clear+0x8>)
 8002ade:	6018      	str	r0, [r3, #0]
}
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	4002200c 	.word	0x4002200c

08002ae8 <gpio_mode_set>:
      \arg        GPIO_PIN_x(x=0..15), GPIO_PIN_ALL
    \param[out] none
    \retval     none
*/
void gpio_mode_set(uint32_t gpio_periph, uint32_t mode, uint32_t pull_up_down, uint32_t pin)
{
 8002ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    ctl = GPIO_CTL(gpio_periph);
    pupd = GPIO_PUD(gpio_periph);

    for(i = 0U;i < 16U;i++){
        if((1U << i) & pin){
 8002aec:	f04f 0c01 	mov.w	ip, #1
    pupd = GPIO_PUD(gpio_periph);
 8002af0:	2400      	movs	r4, #0
            /* clear the specified pin mode bits */
            ctl &= ~GPIO_MODE_MASK(i);
 8002af2:	f04f 0e03 	mov.w	lr, #3
    ctl = GPIO_CTL(gpio_periph);
 8002af6:	6807      	ldr	r7, [r0, #0]
    pupd = GPIO_PUD(gpio_periph);
 8002af8:	68c6      	ldr	r6, [r0, #12]
        if((1U << i) & pin){
 8002afa:	fa0c f504 	lsl.w	r5, ip, r4
 8002afe:	421d      	tst	r5, r3
 8002b00:	d00d      	beq.n	8002b1e <gpio_mode_set+0x36>
 8002b02:	0065      	lsls	r5, r4, #1
            ctl &= ~GPIO_MODE_MASK(i);
 8002b04:	fa0e f805 	lsl.w	r8, lr, r5
 8002b08:	ea27 0708 	bic.w	r7, r7, r8
            /* set the specified pin mode bits */
            ctl |= GPIO_MODE_SET(i, mode);

            /* clear the specified pin pupd bits */
            pupd &= ~GPIO_PUPD_MASK(i);
 8002b0c:	ea26 0608 	bic.w	r6, r6, r8
            ctl |= GPIO_MODE_SET(i, mode);
 8002b10:	fa01 f805 	lsl.w	r8, r1, r5
            /* set the specified pin pupd bits */
            pupd |= GPIO_PUPD_SET(i, pull_up_down);
 8002b14:	fa02 f505 	lsl.w	r5, r2, r5
            ctl |= GPIO_MODE_SET(i, mode);
 8002b18:	ea48 0707 	orr.w	r7, r8, r7
            pupd |= GPIO_PUPD_SET(i, pull_up_down);
 8002b1c:	432e      	orrs	r6, r5
    for(i = 0U;i < 16U;i++){
 8002b1e:	3401      	adds	r4, #1
 8002b20:	2c10      	cmp	r4, #16
 8002b22:	d1ea      	bne.n	8002afa <gpio_mode_set+0x12>
        }
    }

    GPIO_CTL(gpio_periph) = ctl;
 8002b24:	6007      	str	r7, [r0, #0]
    GPIO_PUD(gpio_periph) = pupd;
 8002b26:	60c6      	str	r6, [r0, #12]
}
 8002b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b2c <gpio_output_options_set>:
void gpio_output_options_set(uint32_t gpio_periph, uint8_t otype, uint32_t speed, uint32_t pin)
{
    uint16_t i;
    uint32_t ospeed;

    if(GPIO_OTYPE_OD == otype){
 8002b2c:	2901      	cmp	r1, #1
        GPIO_OMODE(gpio_periph) |= (uint32_t)pin;
 8002b2e:	6841      	ldr	r1, [r0, #4]
{
 8002b30:	b4f0      	push	{r4, r5, r6, r7}
        GPIO_OMODE(gpio_periph) |= (uint32_t)pin;
 8002b32:	bf0c      	ite	eq
 8002b34:	4319      	orreq	r1, r3
    }else{
        GPIO_OMODE(gpio_periph) &= (uint32_t)(~pin);
 8002b36:	4399      	bicne	r1, r3
 8002b38:	6041      	str	r1, [r0, #4]

    /* get the specified pin output speed bits value */
    ospeed = GPIO_OSPD(gpio_periph);

    for(i = 0U;i < 16U;i++){
        if((1U << i) & pin){
 8002b3a:	2601      	movs	r6, #1
    ospeed = GPIO_OSPD(gpio_periph);
 8002b3c:	2100      	movs	r1, #0
            /* clear the specified pin output speed bits */
            ospeed &= ~GPIO_OSPEED_MASK(i);
 8002b3e:	f04f 0c03 	mov.w	ip, #3
    ospeed = GPIO_OSPD(gpio_periph);
 8002b42:	6885      	ldr	r5, [r0, #8]
        if((1U << i) & pin){
 8002b44:	fa06 f401 	lsl.w	r4, r6, r1
 8002b48:	421c      	tst	r4, r3
 8002b4a:	d007      	beq.n	8002b5c <gpio_output_options_set+0x30>
 8002b4c:	004c      	lsls	r4, r1, #1
            ospeed &= ~GPIO_OSPEED_MASK(i);
 8002b4e:	fa0c f704 	lsl.w	r7, ip, r4
 8002b52:	ea25 0507 	bic.w	r5, r5, r7
            /* set the specified pin output speed bits */
            ospeed |= GPIO_OSPEED_SET(i,speed);
 8002b56:	fa02 f404 	lsl.w	r4, r2, r4
 8002b5a:	4325      	orrs	r5, r4
    for(i = 0U;i < 16U;i++){
 8002b5c:	3101      	adds	r1, #1
 8002b5e:	2910      	cmp	r1, #16
 8002b60:	d1f0      	bne.n	8002b44 <gpio_output_options_set+0x18>
        }
    }
    GPIO_OSPD(gpio_periph) = ospeed;
 8002b62:	6085      	str	r5, [r0, #8]
}
 8002b64:	bcf0      	pop	{r4, r5, r6, r7}
 8002b66:	4770      	bx	lr

08002b68 <gpio_af_set>:
      \arg        GPIO_PIN_x(x=0..15), GPIO_PIN_ALL
    \param[out] none
    \retval     none
*/
void gpio_af_set(uint32_t gpio_periph, uint32_t alt_func_num, uint32_t pin)
{
 8002b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint16_t i;
    uint32_t afrl, afrh;

    afrl = GPIO_AFSEL0(gpio_periph);
    afrh = GPIO_AFSEL1(gpio_periph);
 8002b6c:	2300      	movs	r3, #0

    for(i = 0U;i < 8U;i++){
        if((1U << i) & pin){
 8002b6e:	2601      	movs	r6, #1
            /* clear the specified pin alternate function bits */
            afrl &= ~GPIO_AFR_MASK(i);
 8002b70:	f04f 080f 	mov.w	r8, #15
    afrl = GPIO_AFSEL0(gpio_periph);
 8002b74:	f8d0 e020 	ldr.w	lr, [r0, #32]
    afrh = GPIO_AFSEL1(gpio_periph);
 8002b78:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
        if((1U << i) & pin){
 8002b7c:	fa06 f403 	lsl.w	r4, r6, r3
 8002b80:	4214      	tst	r4, r2
 8002b82:	d008      	beq.n	8002b96 <gpio_af_set+0x2e>
 8002b84:	009d      	lsls	r5, r3, #2
            afrl &= ~GPIO_AFR_MASK(i);
 8002b86:	fa08 f705 	lsl.w	r7, r8, r5
 8002b8a:	ea2e 0707 	bic.w	r7, lr, r7
            afrl |= GPIO_AFR_SET(i,alt_func_num);
 8002b8e:	fa01 f505 	lsl.w	r5, r1, r5
 8002b92:	ea45 0e07 	orr.w	lr, r5, r7
    for(i = 0U;i < 8U;i++){
 8002b96:	3301      	adds	r3, #1
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d1ef      	bne.n	8002b7c <gpio_af_set+0x14>
        }
    }

    for(i = 8U;i < 16U;i++){
        if((1U << i) & pin){
 8002b9c:	2501      	movs	r5, #1
            /* clear the specified pin alternate function bits */
            afrh &= ~GPIO_AFR_MASK(i - 8U);
 8002b9e:	f04f 080f 	mov.w	r8, #15
        if((1U << i) & pin){
 8002ba2:	fa05 f703 	lsl.w	r7, r5, r3
 8002ba6:	4217      	tst	r7, r2
 8002ba8:	d009      	beq.n	8002bbe <gpio_af_set+0x56>
            afrh &= ~GPIO_AFR_MASK(i - 8U);
 8002baa:	009c      	lsls	r4, r3, #2
 8002bac:	3c20      	subs	r4, #32
 8002bae:	fa08 f604 	lsl.w	r6, r8, r4
 8002bb2:	ea2c 0606 	bic.w	r6, ip, r6
            afrh |= GPIO_AFR_SET(i - 8U,alt_func_num);
 8002bb6:	fa01 f404 	lsl.w	r4, r1, r4
 8002bba:	ea44 0c06 	orr.w	ip, r4, r6
    for(i = 8U;i < 16U;i++){
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d1ee      	bne.n	8002ba2 <gpio_af_set+0x3a>
        }
    }

    GPIO_AFSEL0(gpio_periph) = afrl;
 8002bc4:	f8c0 e020 	str.w	lr, [r0, #32]
    GPIO_AFSEL1(gpio_periph) = afrh;
 8002bc8:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
}
 8002bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bd0 <icache_remap_disable.part.0>:
    \brief      disable the icache remap function
    \param[in]  region_num : the remap region to be disabled
    \param[out] none
    \retval     ErrStatus: status of result(SUCCESS or ERROR)
*/
ErrStatus icache_remap_disable(uint32_t region_num)
 8002bd0:	4602      	mov	r2, r0
        /* select the icache region */
        __IO uint32_t reg = REG32(ICACHE + 0x20U + (0x04U * region_num));
        reg &= ~ICACHE_CFGx_EN;
        return SUCCESS;
    }
}
 8002bd2:	2001      	movs	r0, #1
        __IO uint32_t reg = REG32(ICACHE + 0x20U + (0x04U * region_num));
 8002bd4:	4b05      	ldr	r3, [pc, #20]	; (8002bec <icache_remap_disable.part.0+0x1c>)
ErrStatus icache_remap_disable(uint32_t region_num)
 8002bd6:	b082      	sub	sp, #8
        __IO uint32_t reg = REG32(ICACHE + 0x20U + (0x04U * region_num));
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	9301      	str	r3, [sp, #4]
        reg &= ~ICACHE_CFGx_EN;
 8002be0:	9b01      	ldr	r3, [sp, #4]
 8002be2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002be6:	9301      	str	r3, [sp, #4]
}
 8002be8:	b002      	add	sp, #8
 8002bea:	4770      	bx	lr
 8002bec:	10020008 	.word	0x10020008

08002bf0 <icache_enable>:
    if(ENABLE != (ICACHE_CTL & ICACHE_CTL_EN)){ 
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <icache_enable+0x14>)
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	07d2      	lsls	r2, r2, #31
 8002bf6:	d403      	bmi.n	8002c00 <icache_enable+0x10>
        ICACHE_CTL |= ICACHE_CTL_EN;
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f042 0201 	orr.w	r2, r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40080000 	.word	0x40080000

08002c08 <icache_disable>:
{
 8002c08:	b508      	push	{r3, lr}
    if(ENABLE == (ICACHE_CTL & ICACHE_CTL_EN)){ 
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <icache_disable+0x60>)
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	f010 0001 	ands.w	r0, r0, #1
 8002c12:	d101      	bne.n	8002c18 <icache_disable+0x10>
 8002c14:	f7ff ffdc 	bl	8002bd0 <icache_remap_disable.part.0>
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <icache_disable+0x60>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	07d9      	lsls	r1, r3, #31
 8002c1e:	d402      	bmi.n	8002c26 <icache_disable+0x1e>
 8002c20:	2001      	movs	r0, #1
 8002c22:	f7ff ffd5 	bl	8002bd0 <icache_remap_disable.part.0>
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <icache_disable+0x60>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	07da      	lsls	r2, r3, #31
 8002c2c:	d402      	bmi.n	8002c34 <icache_disable+0x2c>
 8002c2e:	2002      	movs	r0, #2
 8002c30:	f7ff ffce 	bl	8002bd0 <icache_remap_disable.part.0>
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <icache_disable+0x60>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	07db      	lsls	r3, r3, #31
 8002c3a:	d402      	bmi.n	8002c42 <icache_disable+0x3a>
 8002c3c:	2003      	movs	r0, #3
 8002c3e:	f7ff ffc7 	bl	8002bd0 <icache_remap_disable.part.0>
    ICACHE_CTL |= reset_monitor_source;
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <icache_disable+0x60>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 8002c4a:	601a      	str	r2, [r3, #0]
    ICACHE_CTL &= ~reset_monitor_source;
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002c52:	601a      	str	r2, [r3, #0]
    ICACHE_CTL &= ~monitor_source;
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002c5a:	601a      	str	r2, [r3, #0]
    ICACHE_CTL &= ICACHE_CTL_DEFAULT;
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	f002 0204 	and.w	r2, r2, #4
 8002c62:	601a      	str	r2, [r3, #0]
}
 8002c64:	bd08      	pop	{r3, pc}
 8002c66:	bf00      	nop
 8002c68:	40080000 	.word	0x40080000

08002c6c <rcu_periph_clock_enable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_enable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) |= BIT(RCU_BIT_POS(periph));
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	0983      	lsrs	r3, r0, #6
 8002c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c74:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002c78:	6819      	ldr	r1, [r3, #0]
 8002c7a:	f000 001f 	and.w	r0, r0, #31
 8002c7e:	fa02 f000 	lsl.w	r0, r2, r0
 8002c82:	4308      	orrs	r0, r1
 8002c84:	6018      	str	r0, [r3, #0]
}
 8002c86:	4770      	bx	lr

08002c88 <rcu_periph_clock_disable>:
    \param[out] none
    \retval     none
*/
void rcu_periph_clock_disable(rcu_periph_enum periph)
{
    RCU_REG_VAL(periph) &= ~BIT(RCU_BIT_POS(periph));
 8002c88:	2101      	movs	r1, #1
 8002c8a:	0983      	lsrs	r3, r0, #6
 8002c8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c90:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f000 001f 	and.w	r0, r0, #31
 8002c9a:	fa01 f000 	lsl.w	r0, r1, r0
 8002c9e:	ea22 0000 	bic.w	r0, r2, r0
 8002ca2:	6018      	str	r0, [r3, #0]
}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop

08002ca8 <rcu_periph_reset_enable>:
 8002ca8:	f7ff bfe0 	b.w	8002c6c <rcu_periph_clock_enable>

08002cac <rcu_periph_reset_disable>:
 8002cac:	f7ff bfec 	b.w	8002c88 <rcu_periph_clock_disable>

08002cb0 <rcu_clock_freq_get>:
      \arg        CK_APB2: APB2 clock frequency
    \param[out] none
    \retval     clock frequency of system, AHB, APB1, APB2
*/
uint32_t rcu_clock_freq_get(rcu_clock_freq_enum clock)
{
 8002cb0:	b470      	push	{r4, r5, r6}
    uint32_t cksys_freq, ahb_freq, apb1_freq, apb2_freq;
    uint32_t usart2_freq = 0U, usart0_freq = 0U,i2c0_freq = 0U;    
    uint32_t pllpsc, plln, pllsel, pllp, ck_src, idx, clk_exp;
    
    /* exponent of AHB, APB1 and APB2 clock divider */
    const uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8002cb2:	4c59      	ldr	r4, [pc, #356]	; (8002e18 <rcu_clock_freq_get+0x168>)
{
 8002cb4:	b089      	sub	sp, #36	; 0x24
    const uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8002cb6:	ae08      	add	r6, sp, #32
{
 8002cb8:	4605      	mov	r5, r0
    const uint8_t ahb_exp[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 8002cba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002cbe:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
    const uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8002cc2:	466a      	mov	r2, sp
    const uint8_t apb2_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8002cc4:	ab02      	add	r3, sp, #8
    const uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8002cc6:	3410      	adds	r4, #16
 8002cc8:	e894 0003 	ldmia.w	r4, {r0, r1}
    const uint8_t apb2_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8002ccc:	e883 0003 	stmia.w	r3, {r0, r1}
    const uint8_t apb1_exp[8] = {0, 0, 0, 0, 1, 2, 3, 4};
 8002cd0:	e882 0003 	stmia.w	r2, {r0, r1}

    sws = GET_BITS(RCU_CFG0, 2, 3);
 8002cd4:	4b51      	ldr	r3, [pc, #324]	; (8002e1c <rcu_clock_freq_get+0x16c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f3c3 0381 	ubfx	r3, r3, #2, #2
    switch(sws){
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d069      	beq.n	8002db4 <rcu_clock_freq_get+0x104>
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d156      	bne.n	8002d92 <rcu_clock_freq_get+0xe2>
        cksys_freq = HXTAL_VALUE;
        break;
    /* PLLP is selected as CK_SYS */
    case SEL_PLLP:
        /* get the value of PLLPSC[5:0] */
        pllpsc = GET_BITS(RCU_PLL, 0U, 5U);
 8002ce4:	494e      	ldr	r1, [pc, #312]	; (8002e20 <rcu_clock_freq_get+0x170>)
        /* PLL clock source selection, HXTAL or IRC16M/2 */
        pllsel = (RCU_PLL & RCU_PLL_PLLSEL);
        if (RCU_PLLSRC_HXTAL == pllsel) {
            ck_src = HXTAL_VALUE;
        } else {
            ck_src = IRC16M_VALUE;
 8002ce6:	4a4f      	ldr	r2, [pc, #316]	; (8002e24 <rcu_clock_freq_get+0x174>)
        pllpsc = GET_BITS(RCU_PLL, 0U, 5U);
 8002ce8:	6808      	ldr	r0, [r1, #0]
        plln = GET_BITS(RCU_PLL, 6U, 14U);
 8002cea:	680c      	ldr	r4, [r1, #0]
        pllp = (GET_BITS(RCU_PLL, 16U, 17U) + 1U) * 2U;
 8002cec:	680b      	ldr	r3, [r1, #0]
        pllsel = (RCU_PLL & RCU_PLL_PLLSEL);
 8002cee:	680e      	ldr	r6, [r1, #0]
            ck_src = IRC16M_VALUE;
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <rcu_clock_freq_get+0x178>)
 8002cf2:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8002cf6:	bf08      	it	eq
 8002cf8:	460a      	moveq	r2, r1
        pllpsc = GET_BITS(RCU_PLL, 0U, 5U);
 8002cfa:	f000 013f 	and.w	r1, r0, #63	; 0x3f
        }
        cksys_freq = ((ck_src / pllpsc) * plln)/pllp;
 8002cfe:	fbb2 f2f1 	udiv	r2, r2, r1
        plln = GET_BITS(RCU_PLL, 6U, 14U);
 8002d02:	f3c4 1488 	ubfx	r4, r4, #6, #9
        cksys_freq = ((ck_src / pllpsc) * plln)/pllp;
 8002d06:	fb04 f402 	mul.w	r4, r4, r2
        pllp = (GET_BITS(RCU_PLL, 16U, 17U) + 1U) * 2U;
 8002d0a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d0e:	3301      	adds	r3, #1
 8002d10:	005b      	lsls	r3, r3, #1
        cksys_freq = ((ck_src / pllpsc) * plln)/pllp;
 8002d12:	fbb4 f4f3 	udiv	r4, r4, r3
    default:
        cksys_freq = IRC16M_VALUE;
        break;
    }
    /* calculate AHB clock frequency */
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <rcu_clock_freq_get+0x16c>)
    clk_exp = ahb_exp[idx];
 8002d18:	a808      	add	r0, sp, #32
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8002d1a:	6819      	ldr	r1, [r3, #0]
    ahb_freq = cksys_freq >> clk_exp;
    
    /* calculate APB1 clock frequency */
    idx = GET_BITS(RCU_CFG0, 10, 12);
 8002d1c:	681a      	ldr	r2, [r3, #0]
    clk_exp = apb1_exp[idx];
    apb1_freq = ahb_freq >> clk_exp;
    
    /* calculate APB2 clock frequency */
    idx = GET_BITS(RCU_CFG0, 13, 15);
 8002d1e:	681b      	ldr	r3, [r3, #0]
    idx = GET_BITS(RCU_CFG0, 4, 7);
 8002d20:	f3c1 1103 	ubfx	r1, r1, #4, #4
    clk_exp = ahb_exp[idx];
 8002d24:	4401      	add	r1, r0
    idx = GET_BITS(RCU_CFG0, 10, 12);
 8002d26:	f3c2 2282 	ubfx	r2, r2, #10, #3
    idx = GET_BITS(RCU_CFG0, 13, 15);
 8002d2a:	f3c3 3342 	ubfx	r3, r3, #13, #3
    clk_exp = apb2_exp[idx];
 8002d2e:	4403      	add	r3, r0
    clk_exp = apb1_exp[idx];
 8002d30:	4402      	add	r2, r0
    clk_exp = ahb_exp[idx];
 8002d32:	f811 1c10 	ldrb.w	r1, [r1, #-16]
    clk_exp = apb1_exp[idx];
 8002d36:	f812 0c20 	ldrb.w	r0, [r2, #-32]
    clk_exp = apb2_exp[idx];
 8002d3a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
    ahb_freq = cksys_freq >> clk_exp;
 8002d3e:	fa24 f301 	lsr.w	r3, r4, r1
    apb1_freq = ahb_freq >> clk_exp;
 8002d42:	fa23 f000 	lsr.w	r0, r3, r0
    apb2_freq = ahb_freq >> clk_exp;
 8002d46:	fa23 f202 	lsr.w	r2, r3, r2
    
    /* return the clocks frequency */
    switch(clock){
 8002d4a:	2d06      	cmp	r5, #6
 8002d4c:	d862      	bhi.n	8002e14 <rcu_clock_freq_get+0x164>
 8002d4e:	e8df f005 	tbb	[pc, r5]
 8002d52:	512d      	.short	0x512d
 8002d54:	3704331d 	.word	0x3704331d
 8002d58:	22          	.byte	0x22
 8002d59:	00          	.byte	0x00
    case CK_APB2:
        ck_freq = apb2_freq;
        break;
    case CK_USART0:
        /* calculate USART0 clock frequency */
        if(RCU_USART0SRC_CKAPB1 == (RCU_CFG1 & RCU_CFG1_USART0SEL)){
 8002d5a:	4b34      	ldr	r3, [pc, #208]	; (8002e2c <rcu_clock_freq_get+0x17c>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f012 4f40 	tst.w	r2, #3221225472	; 0xc0000000
 8002d62:	d013      	beq.n	8002d8c <rcu_clock_freq_get+0xdc>
            usart0_freq = apb1_freq;
        }else if(RCU_USART0SRC_CKSYS == (RCU_CFG1 & RCU_CFG1_USART0SEL)){
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002d6a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002d6e:	d01d      	beq.n	8002dac <rcu_clock_freq_get+0xfc>
            usart0_freq = cksys_freq;
        }else if(RCU_USART0SRC_LXTAL == (RCU_CFG1 & RCU_CFG1_USART0SEL)){
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002d76:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002d7a:	d048      	beq.n	8002e0e <rcu_clock_freq_get+0x15e>
            usart0_freq = LXTAL_VALUE;
        }else if(RCU_USART0SRC_IRC16M == (RCU_CFG1 & RCU_CFG1_USART0SEL)){
 8002d7c:	681b      	ldr	r3, [r3, #0]
            usart0_freq = IRC16M_VALUE;
 8002d7e:	482a      	ldr	r0, [pc, #168]	; (8002e28 <rcu_clock_freq_get+0x178>)
        }else if(RCU_USART0SRC_IRC16M == (RCU_CFG1 & RCU_CFG1_USART0SEL)){
 8002d80:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            usart0_freq = IRC16M_VALUE;
 8002d84:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002d88:	bf18      	it	ne
 8002d8a:	2000      	movne	r0, #0
        break;
    default:
        break;
    }
    return ck_freq;
}
 8002d8c:	b009      	add	sp, #36	; 0x24
 8002d8e:	bc70      	pop	{r4, r5, r6}
 8002d90:	4770      	bx	lr
        cksys_freq = IRC16M_VALUE;
 8002d92:	4c25      	ldr	r4, [pc, #148]	; (8002e28 <rcu_clock_freq_get+0x178>)
 8002d94:	e7bf      	b.n	8002d16 <rcu_clock_freq_get+0x66>
        if(RCU_I2C0SRC_CKAPB1 == (RCU_CFG1 & RCU_CFG1_I2C0SEL)){
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <rcu_clock_freq_get+0x17c>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	f012 6f40 	tst.w	r2, #201326592	; 0xc000000
 8002d9e:	d0f5      	beq.n	8002d8c <rcu_clock_freq_get+0xdc>
        }else if(RCU_I2C0SRC_CKSYS == (RCU_CFG1 & RCU_CFG1_I2C0SEL)){
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	f002 6240 	and.w	r2, r2, #201326592	; 0xc000000
 8002da6:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8002daa:	d127      	bne.n	8002dfc <rcu_clock_freq_get+0x14c>
            i2c0_freq = cksys_freq;
 8002dac:	4620      	mov	r0, r4
}
 8002dae:	b009      	add	sp, #36	; 0x24
 8002db0:	bc70      	pop	{r4, r5, r6}
 8002db2:	4770      	bx	lr
    switch(sws){
 8002db4:	4c1b      	ldr	r4, [pc, #108]	; (8002e24 <rcu_clock_freq_get+0x174>)
 8002db6:	e7ae      	b.n	8002d16 <rcu_clock_freq_get+0x66>
            usart2_freq = apb2_freq;
 8002db8:	4610      	mov	r0, r2
}
 8002dba:	b009      	add	sp, #36	; 0x24
 8002dbc:	bc70      	pop	{r4, r5, r6}
 8002dbe:	4770      	bx	lr
        if(RCU_USART2SRC_CKAPB2 == (RCU_CFG1 & RCU_CFG1_USART2SEL)){
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <rcu_clock_freq_get+0x17c>)
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8002dc8:	d0f6      	beq.n	8002db8 <rcu_clock_freq_get+0x108>
        }else if(RCU_USART2SRC_CKSYS == (RCU_CFG1 & RCU_CFG1_USART2SEL)){
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 8002dd0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8002dd4:	d0ea      	beq.n	8002dac <rcu_clock_freq_get+0xfc>
        }else if(RCU_USART2SRC_LXTAL == (RCU_CFG1 & RCU_CFG1_USART2SEL)){
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
 8002ddc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002de0:	d015      	beq.n	8002e0e <rcu_clock_freq_get+0x15e>
        }else if(RCU_USART2SRC_IRC16M == (RCU_CFG1 & RCU_CFG1_USART2SEL)){
 8002de2:	681b      	ldr	r3, [r3, #0]
            usart0_freq = IRC16M_VALUE;
 8002de4:	4810      	ldr	r0, [pc, #64]	; (8002e28 <rcu_clock_freq_get+0x178>)
        }else if(RCU_USART2SRC_IRC16M == (RCU_CFG1 & RCU_CFG1_USART2SEL)){
 8002de6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
            usart0_freq = IRC16M_VALUE;
 8002dea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002dee:	bf18      	it	ne
 8002df0:	2000      	movne	r0, #0
 8002df2:	e7cb      	b.n	8002d8c <rcu_clock_freq_get+0xdc>
        ck_freq = ahb_freq;
 8002df4:	4618      	mov	r0, r3
}
 8002df6:	b009      	add	sp, #36	; 0x24
 8002df8:	bc70      	pop	{r4, r5, r6}
 8002dfa:	4770      	bx	lr
        }else if(RCU_I2C0SRC_IRC16M == (RCU_CFG1 & RCU_CFG1_I2C0SEL)){
 8002dfc:	681b      	ldr	r3, [r3, #0]
            usart0_freq = IRC16M_VALUE;
 8002dfe:	480a      	ldr	r0, [pc, #40]	; (8002e28 <rcu_clock_freq_get+0x178>)
        }else if(RCU_I2C0SRC_IRC16M == (RCU_CFG1 & RCU_CFG1_I2C0SEL)){
 8002e00:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
            usart0_freq = IRC16M_VALUE;
 8002e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e08:	bf18      	it	ne
 8002e0a:	2000      	movne	r0, #0
 8002e0c:	e7be      	b.n	8002d8c <rcu_clock_freq_get+0xdc>
            usart0_freq = LXTAL_VALUE;
 8002e0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002e12:	e7bb      	b.n	8002d8c <rcu_clock_freq_get+0xdc>
    uint32_t sws, ck_freq = 0U;
 8002e14:	2000      	movs	r0, #0
 8002e16:	e7b9      	b.n	8002d8c <rcu_clock_freq_get+0xdc>
 8002e18:	08005aa8 	.word	0x08005aa8
 8002e1c:	40023808 	.word	0x40023808
 8002e20:	40023804 	.word	0x40023804
 8002e24:	02625a00 	.word	0x02625a00
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	4002388c 	.word	0x4002388c

08002e30 <usart_deinit>:
    \param[in]  usart_periph: USARTx(x=0,1,2)
    \param[out] none
    \retval     none
*/
void usart_deinit(uint32_t usart_periph)
{
 8002e30:	b508      	push	{r3, lr}
    switch(usart_periph){
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <usart_deinit+0x58>)
 8002e34:	4298      	cmp	r0, r3
 8002e36:	d008      	beq.n	8002e4a <usart_deinit+0x1a>
 8002e38:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 8002e3c:	4298      	cmp	r0, r3
 8002e3e:	d018      	beq.n	8002e72 <usart_deinit+0x42>
 8002e40:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8002e44:	4298      	cmp	r0, r3
 8002e46:	d00a      	beq.n	8002e5e <usart_deinit+0x2e>
        rcu_periph_reset_disable(RCU_USART2RST);
        break;
    default:
        break;
    }
}
 8002e48:	bd08      	pop	{r3, pc}
        rcu_periph_reset_enable(RCU_USART0RST);
 8002e4a:	f640 0012 	movw	r0, #2066	; 0x812
 8002e4e:	f7ff ff2b 	bl	8002ca8 <rcu_periph_reset_enable>
}
 8002e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        rcu_periph_reset_disable(RCU_USART0RST);
 8002e56:	f640 0012 	movw	r0, #2066	; 0x812
 8002e5a:	f7ff bf27 	b.w	8002cac <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_USART1RST);
 8002e5e:	f640 0011 	movw	r0, #2065	; 0x811
 8002e62:	f7ff ff21 	bl	8002ca8 <rcu_periph_reset_enable>
}
 8002e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        rcu_periph_reset_disable(RCU_USART1RST);
 8002e6a:	f640 0011 	movw	r0, #2065	; 0x811
 8002e6e:	f7ff bf1d 	b.w	8002cac <rcu_periph_reset_disable>
        rcu_periph_reset_enable(RCU_USART2RST);
 8002e72:	f640 1004 	movw	r0, #2308	; 0x904
 8002e76:	f7ff ff17 	bl	8002ca8 <rcu_periph_reset_enable>
}
 8002e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        rcu_periph_reset_disable(RCU_USART2RST);
 8002e7e:	f640 1004 	movw	r0, #2308	; 0x904
 8002e82:	f7ff bf13 	b.w	8002cac <rcu_periph_reset_disable>
 8002e86:	bf00      	nop
 8002e88:	40004800 	.word	0x40004800

08002e8c <usart_baudrate_set>:
    \param[in]  baudval: baud rate value
    \param[out] none
    \retval     none
*/ 
void usart_baudrate_set(uint32_t usart_periph, uint32_t baudval)
{
 8002e8c:	b538      	push	{r3, r4, r5, lr}
    uint32_t uclk = 0U, intdiv = 0U, fradiv = 0U, udiv = 0U;
    switch(usart_periph){
 8002e8e:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <usart_baudrate_set+0x64>)
{
 8002e90:	4604      	mov	r4, r0
    switch(usart_periph){
 8002e92:	4298      	cmp	r0, r3
{
 8002e94:	460d      	mov	r5, r1
    switch(usart_periph){
 8002e96:	d01f      	beq.n	8002ed8 <usart_baudrate_set+0x4c>
 8002e98:	f503 4348 	add.w	r3, r3, #51200	; 0xc800
 8002e9c:	4298      	cmp	r0, r3
 8002e9e:	d023      	beq.n	8002ee8 <usart_baudrate_set+0x5c>
 8002ea0:	f5a3 434c 	sub.w	r3, r3, #52224	; 0xcc00
 8002ea4:	4298      	cmp	r0, r3
 8002ea6:	d01b      	beq.n	8002ee0 <usart_baudrate_set+0x54>
 8002ea8:	2000      	movs	r0, #0
         uclk = rcu_clock_freq_get(CK_USART2);
         break;
    default:
         break;
    }
    if(USART_CTL0(usart_periph) & USART_CTL0_OVSMOD){
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	d50c      	bpl.n	8002eca <usart_baudrate_set+0x3e>
        /* oversampling by 8, configure the value of USART_BAUD */
        udiv = ((2U * uclk) + (baudval / 2U)) / baudval;
 8002eb0:	0869      	lsrs	r1, r5, #1
 8002eb2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002eb6:	fbb0 f0f5 	udiv	r0, r0, r5
        intdiv = udiv & 0x0000fff0U;
 8002eba:	f64f 75f0 	movw	r5, #65520	; 0xfff0
        fradiv = (udiv >> 1U) & 0x00000007U;
 8002ebe:	f3c0 0342 	ubfx	r3, r0, #1, #3
        intdiv = udiv & 0x0000fff0U;
 8002ec2:	4028      	ands	r0, r5
        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 8002ec4:	4318      	orrs	r0, r3
 8002ec6:	60e0      	str	r0, [r4, #12]
        udiv = (uclk + (baudval / 2U)) / baudval;
        intdiv = udiv & 0x0000fff0U;
        fradiv = udiv & 0x0000000fU;
        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
    }
}
 8002ec8:	bd38      	pop	{r3, r4, r5, pc}
        udiv = (uclk + (baudval / 2U)) / baudval;
 8002eca:	eb00 0355 	add.w	r3, r0, r5, lsr #1
 8002ece:	fbb3 f0f5 	udiv	r0, r3, r5
        USART_BAUD(usart_periph) = ((USART_BAUD_FRADIV | USART_BAUD_INTDIV) & (intdiv | fradiv));
 8002ed2:	b280      	uxth	r0, r0
 8002ed4:	60e0      	str	r0, [r4, #12]
}
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
         uclk = rcu_clock_freq_get(CK_USART0);
 8002ed8:	2004      	movs	r0, #4
 8002eda:	f7ff fee9 	bl	8002cb0 <rcu_clock_freq_get>
         break;
 8002ede:	e7e4      	b.n	8002eaa <usart_baudrate_set+0x1e>
         uclk = rcu_clock_freq_get(CK_APB1);
 8002ee0:	2002      	movs	r0, #2
 8002ee2:	f7ff fee5 	bl	8002cb0 <rcu_clock_freq_get>
         break;
 8002ee6:	e7e0      	b.n	8002eaa <usart_baudrate_set+0x1e>
         uclk = rcu_clock_freq_get(CK_USART2);
 8002ee8:	2005      	movs	r0, #5
 8002eea:	f7ff fee1 	bl	8002cb0 <rcu_clock_freq_get>
         break;
 8002eee:	e7dc      	b.n	8002eaa <usart_baudrate_set+0x1e>
 8002ef0:	40004800 	.word	0x40004800

08002ef4 <usart_enable>:
    \param[out] none
    \retval     none
*/
void usart_enable(uint32_t usart_periph)
{
    USART_CTL0(usart_periph) |= USART_CTL0_UEN;
 8002ef4:	6803      	ldr	r3, [r0, #0]
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6003      	str	r3, [r0, #0]
}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop

08002f00 <usart_transmit_config>:
    \param[out] none
    \retval     none
*/
void usart_transmit_config(uint32_t usart_periph, uint32_t txconfig)
{
    USART_CTL0(usart_periph) &= ~USART_CTL0_TEN;
 8002f00:	6802      	ldr	r2, [r0, #0]
 8002f02:	f022 0208 	bic.w	r2, r2, #8
 8002f06:	6002      	str	r2, [r0, #0]
    /* configure transfer mode */
    USART_CTL0(usart_periph) |= txconfig;
 8002f08:	6803      	ldr	r3, [r0, #0]
 8002f0a:	4319      	orrs	r1, r3
 8002f0c:	6001      	str	r1, [r0, #0]
}
 8002f0e:	4770      	bx	lr

08002f10 <usart_data_transmit>:
    \param[out] none
    \retval     none
*/
void usart_data_transmit(uint32_t usart_periph, uint32_t data)
{
    USART_TDATA(usart_periph) = (USART_TDATA_TDATA & data);
 8002f10:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002f14:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002f16:	4770      	bx	lr

08002f18 <usart_flag_get>:
    \param[out] none
    \retval     FlagStatus: SET or RESET
*/
FlagStatus usart_flag_get(uint32_t usart_periph, usart_flag_enum flag)
{
    if(RESET != (USART_REG_VAL(usart_periph, flag) & BIT(USART_BIT_POS(flag)))){
 8002f18:	f3c1 1389 	ubfx	r3, r1, #6, #10
 8002f1c:	5818      	ldr	r0, [r3, r0]
 8002f1e:	f001 011f 	and.w	r1, r1, #31
 8002f22:	40c8      	lsrs	r0, r1
        return SET;
    }else{
        return RESET;
    }
}
 8002f24:	f000 0001 	and.w	r0, r0, #1
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop

08002f2c <system_clock_180m_40m_hxtal>:
    /* enable HXTAL */
    RCU_CTL |= RCU_CTL_HXTALEN;
    RCU_CTL |= RCU_CTL_HXTALENPLL;
    {
       __IO int i;
       for (i = 0; i < 0x20; i++);
 8002f2c:	2100      	movs	r1, #0
    RCU_CTL |= RCU_CTL_HXTALPU;
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	; (8002fec <system_clock_180m_40m_hxtal+0xc0>)
{
 8002f30:	b430      	push	{r4, r5}
    RCU_CTL |= RCU_CTL_HXTALPU;
 8002f32:	681a      	ldr	r2, [r3, #0]
{
 8002f34:	b082      	sub	sp, #8
    RCU_CTL |= RCU_CTL_HXTALPU;
 8002f36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f3a:	601a      	str	r2, [r3, #0]
    RCU_CTL |= RCU_CTL_HXTALEN;
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f42:	601a      	str	r2, [r3, #0]
    RCU_CTL |= RCU_CTL_HXTALENPLL;
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f4a:	601a      	str	r2, [r3, #0]
       for (i = 0; i < 0x20; i++);
 8002f4c:	9101      	str	r1, [sp, #4]
 8002f4e:	9b01      	ldr	r3, [sp, #4]
 8002f50:	2b1f      	cmp	r3, #31
 8002f52:	dc05      	bgt.n	8002f60 <system_clock_180m_40m_hxtal+0x34>
 8002f54:	9b01      	ldr	r3, [sp, #4]
 8002f56:	3301      	adds	r3, #1
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	9b01      	ldr	r3, [sp, #4]
 8002f5c:	2b1f      	cmp	r3, #31
 8002f5e:	ddf9      	ble.n	8002f54 <system_clock_180m_40m_hxtal+0x28>
    }

    RCU_CTL |= RCU_CTL_HXTALREADY;
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <system_clock_180m_40m_hxtal+0xc0>)
 8002f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f66:	6811      	ldr	r1, [r2, #0]
    /* wait until HXTAL is stable or the startup time is longer than HXTAL_STARTUP_TIMEOUT */
    do{
        timeout++;
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8002f68:	4610      	mov	r0, r2
    RCU_CTL |= RCU_CTL_HXTALREADY;
 8002f6a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002f6e:	6011      	str	r1, [r2, #0]
 8002f70:	e001      	b.n	8002f76 <system_clock_180m_40m_hxtal+0x4a>
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 8002f72:	3b01      	subs	r3, #1
 8002f74:	d002      	beq.n	8002f7c <system_clock_180m_40m_hxtal+0x50>
        stab_flag = (RCU_CTL & RCU_CTL_HXTALSTB);
 8002f76:	6802      	ldr	r2, [r0, #0]
    }while((0U == stab_flag) && (HXTAL_STARTUP_TIMEOUT != timeout));
 8002f78:	0394      	lsls	r4, r2, #14
 8002f7a:	d5fa      	bpl.n	8002f72 <system_clock_180m_40m_hxtal+0x46>

    /* if fail */
    if(0U == (RCU_CTL & RCU_CTL_HXTALSTB)){
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <system_clock_180m_40m_hxtal+0xc0>)
 8002f7e:	6813      	ldr	r3, [r2, #0]
 8002f80:	0399      	lsls	r1, r3, #14
 8002f82:	d532      	bpl.n	8002fea <system_clock_180m_40m_hxtal+0xbe>
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV2;
    /* APB1 = AHB/4 */
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV4;

    /* Configure the main PLL, PSC = 40, PLL_N = 360, PLL_P = 2 */
    RCU_PLL = (40U | (360U << 6U) | (((2U >> 1U) - 1U) << 16U) |
 8002f84:	f64d 2528 	movw	r5, #55848	; 0xda28

    /* enable PLL */
    RCU_CTL |= RCU_CTL_PLLEN;

    /* wait until PLL is stable */
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8002f88:	4614      	mov	r4, r2
    RCU_APB1EN |= RCU_APB1EN_PMUEN;
 8002f8a:	4919      	ldr	r1, [pc, #100]	; (8002ff0 <system_clock_180m_40m_hxtal+0xc4>)
    PMU_CTL0 |= PMU_CTL0_LDOVS;
 8002f8c:	4819      	ldr	r0, [pc, #100]	; (8002ff4 <system_clock_180m_40m_hxtal+0xc8>)
    RCU_APB1EN |= RCU_APB1EN_PMUEN;
 8002f8e:	680b      	ldr	r3, [r1, #0]
 8002f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f94:	600b      	str	r3, [r1, #0]
    PMU_CTL0 |= PMU_CTL0_LDOVS;
 8002f96:	6801      	ldr	r1, [r0, #0]
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8002f98:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <system_clock_180m_40m_hxtal+0xcc>)
    PMU_CTL0 |= PMU_CTL0_LDOVS;
 8002f9a:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8002f9e:	6001      	str	r1, [r0, #0]
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8002fa0:	6819      	ldr	r1, [r3, #0]
    RCU_PLL = (40U | (360U << 6U) | (((2U >> 1U) - 1U) << 16U) |
 8002fa2:	f500 30e4 	add.w	r0, r0, #116736	; 0x1c800
    RCU_CFG0 |= RCU_AHB_CKSYS_DIV1;
 8002fa6:	6019      	str	r1, [r3, #0]
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV2;
 8002fa8:	6819      	ldr	r1, [r3, #0]
    RCU_PLL = (40U | (360U << 6U) | (((2U >> 1U) - 1U) << 16U) |
 8002faa:	3004      	adds	r0, #4
    RCU_CFG0 |= RCU_APB2_CKAHB_DIV2;
 8002fac:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002fb0:	6019      	str	r1, [r3, #0]
    RCU_CFG0 |= RCU_APB1_CKAHB_DIV4;
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400
 8002fb8:	6019      	str	r1, [r3, #0]
    RCU_PLL = (40U | (360U << 6U) | (((2U >> 1U) - 1U) << 16U) |
 8002fba:	6005      	str	r5, [r0, #0]
    RCU_CTL |= RCU_CTL_PLLEN;
 8002fbc:	6813      	ldr	r3, [r2, #0]
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]
    while(0U == (RCU_CTL & RCU_CTL_PLLSTB)){
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	019a      	lsls	r2, r3, #6
 8002fc8:	d5fc      	bpl.n	8002fc4 <system_clock_180m_40m_hxtal+0x98>
    }

    /* select PLLP as system clock */
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <system_clock_180m_40m_hxtal+0xcc>)
    RCU_CFG0 |= RCU_CKSYSSRC_PLLP;

    /* wait until PLL is selected as system clock */
    while(0U == (RCU_CFG0 & RCU_SCSS_PLLP)){
 8002fcc:	4619      	mov	r1, r3
    RCU_CFG0 &= ~RCU_CFG0_SCS;
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	f022 0203 	bic.w	r2, r2, #3
 8002fd4:	601a      	str	r2, [r3, #0]
    RCU_CFG0 |= RCU_CKSYSSRC_PLLP;
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	f042 0202 	orr.w	r2, r2, #2
 8002fdc:	601a      	str	r2, [r3, #0]
    while(0U == (RCU_CFG0 & RCU_SCSS_PLLP)){
 8002fde:	680b      	ldr	r3, [r1, #0]
 8002fe0:	071b      	lsls	r3, r3, #28
 8002fe2:	d5fc      	bpl.n	8002fde <system_clock_180m_40m_hxtal+0xb2>
    }
}
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bc30      	pop	{r4, r5}
 8002fe8:	4770      	bx	lr
        while(1){
 8002fea:	e7fe      	b.n	8002fea <system_clock_180m_40m_hxtal+0xbe>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40023840 	.word	0x40023840
 8002ff4:	40007000 	.word	0x40007000
 8002ff8:	40023808 	.word	0x40023808

08002ffc <SystemInit>:

	/* Reset the RCC clock configuration to the default reset state ------------*/
	RCU_CTL |= RCU_CTL_HXTALBPS;
	{
		__IO uint32_t i;
		for (i=0; i<20; i++);
 8002ffc:	2000      	movs	r0, #0
	SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ffe:	4916      	ldr	r1, [pc, #88]	; (8003058 <SystemInit+0x5c>)
	{
 8003000:	b500      	push	{lr}
	SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003002:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
	RCU_CTL |= RCU_CTL_HXTALBPS;
 8003006:	4a15      	ldr	r2, [pc, #84]	; (800305c <SystemInit+0x60>)
	SCB->CPACR |= ((3UL << 10*2) | (3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800300c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
	RCU_CTL |= RCU_CTL_HXTALBPS;
 8003010:	6813      	ldr	r3, [r2, #0]
	{
 8003012:	b083      	sub	sp, #12
	RCU_CTL |= RCU_CTL_HXTALBPS;
 8003014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003018:	6013      	str	r3, [r2, #0]
		for (i=0; i<20; i++);
 800301a:	9001      	str	r0, [sp, #4]
 800301c:	9b01      	ldr	r3, [sp, #4]
 800301e:	2b13      	cmp	r3, #19
 8003020:	d805      	bhi.n	800302e <SystemInit+0x32>
 8003022:	9b01      	ldr	r3, [sp, #4]
 8003024:	3301      	adds	r3, #1
 8003026:	9301      	str	r3, [sp, #4]
 8003028:	9b01      	ldr	r3, [sp, #4]
 800302a:	2b13      	cmp	r3, #19
 800302c:	d9f9      	bls.n	8003022 <SystemInit+0x26>
	}

	/* Reset CFG0 register */
	RCU_CFG0 = 0x00000000U;
 800302e:	2100      	movs	r1, #0

	/* Reset HSEON, CSSON and PLLON bits */
	RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);

	/* Reset PLLCFG register */
	RCU_PLLCFG = RCU_PLLCFG_PLLDIGOSEL;
 8003030:	f04f 7040 	mov.w	r0, #50331648	; 0x3000000
	RCU_CFG0 = 0x00000000U;
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <SystemInit+0x64>)
	RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <SystemInit+0x60>)
	RCU_CFG0 = 0x00000000U;
 8003038:	6019      	str	r1, [r3, #0]
	RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 800303a:	6813      	ldr	r3, [r2, #0]
	RCU_PLLCFG = RCU_PLLCFG_PLLDIGOSEL;
 800303c:	4909      	ldr	r1, [pc, #36]	; (8003064 <SystemInit+0x68>)
	RCU_CTL &= ~(RCU_CTL_PLLEN | RCU_CTL_CKMEN | RCU_CTL_HXTALEN);
 800303e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
	RCU_PLLCFG = RCU_PLLCFG_PLLDIGOSEL;
 8003048:	6008      	str	r0, [r1, #0]

#ifdef CONFIG_PLATFORM_ASIC
	system_clock_180m_40m_hxtal();
 800304a:	f7ff ff6f 	bl	8002f2c <system_clock_180m_40m_hxtal>
	system_clock_hxtal();
#endif

	/* Enable icache */
	icache_enable();
}
 800304e:	b003      	add	sp, #12
 8003050:	f85d eb04 	ldr.w	lr, [sp], #4
	icache_enable();
 8003054:	f7ff bdcc 	b.w	8002bf0 <icache_enable>
 8003058:	e000ed00 	.word	0xe000ed00
 800305c:	40023800 	.word	0x40023800
 8003060:	40023808 	.word	0x40023808
 8003064:	40023884 	.word	0x40023884

08003068 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function

/* reset Handler */
Reset_Handler:
  movs r1, #0
 8003068:	2100      	movs	r1, #0
  b CodeInit
 800306a:	e00e      	b.n	800308a <CodeInit>

0800306c <CopyData>:

CopyData:
  ldr r3, =_sidata
 800306c:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <LoopForever+0x4>)
  ldr r3, [r3, r1]
 800306e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003070:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003072:	3104      	adds	r1, #4

08003074 <DataInit>:

DataInit:
  ldr r0, =_sdata
 8003074:	4810      	ldr	r0, [pc, #64]	; (80030b8 <LoopForever+0x8>)
  ldr r3, =_edata
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <LoopForever+0xc>)
  adds r2, r0, r1
 8003078:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800307a:	429a      	cmp	r2, r3
  bcc CopyData
 800307c:	d3f6      	bcc.n	800306c <CopyData>
  ldr r2, =_sbss
 800307e:	4a10      	ldr	r2, [pc, #64]	; (80030c0 <LoopForever+0x10>)
  b Zerobss
 8003080:	e00d      	b.n	800309e <Zerobss>

08003082 <CopyCode>:

CopyCode:
  ldr r3, =_sicode
 8003082:	4b10      	ldr	r3, [pc, #64]	; (80030c4 <LoopForever+0x14>)
  ldr r3, [r3, r1]
 8003084:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003086:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003088:	3104      	adds	r1, #4

0800308a <CodeInit>:

CodeInit:
  ldr r0, =_scode
 800308a:	480f      	ldr	r0, [pc, #60]	; (80030c8 <LoopForever+0x18>)
  ldr r3, =_ecode
 800308c:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <LoopForever+0x1c>)
  adds r2, r0, r1
 800308e:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003090:	429a      	cmp	r2, r3
  bcc CopyCode
 8003092:	d3f6      	bcc.n	8003082 <CopyCode>
  movs r1, #0
 8003094:	2100      	movs	r1, #0
  b DataInit
 8003096:	e7ed      	b.n	8003074 <DataInit>

08003098 <FillZerobss>:

FillZerobss:
  movs r3, #0
 8003098:	2300      	movs	r3, #0
  str r3, [r2], #4
 800309a:	f842 3b04 	str.w	r3, [r2], #4

0800309e <Zerobss>:

Zerobss:
  ldr r3, = _ebss
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <LoopForever+0x20>)
  cmp r2, r3
 80030a0:	429a      	cmp	r2, r3
  bcc FillZerobss
 80030a2:	d3f9      	bcc.n	8003098 <FillZerobss>
/* Call SystemInit function */
  bl  SystemInit
 80030a4:	f7ff ffaa 	bl	8002ffc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030a8:	f000 f816 	bl	80030d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ac:	f7fe fd08 	bl	8001ac0 <main>

080030b0 <LoopForever>:

LoopForever:
    b LoopForever
 80030b0:	e7fe      	b.n	80030b0 <LoopForever>
 80030b2:	0000      	.short	0x0000
  ldr r3, =_sidata
 80030b4:	080060e8 	.word	0x080060e8
  ldr r0, =_sdata
 80030b8:	20000bf8 	.word	0x20000bf8
  ldr r3, =_edata
 80030bc:	20000dd0 	.word	0x20000dd0
  ldr r2, =_sbss
 80030c0:	20000dd0 	.word	0x20000dd0
  ldr r3, =_sicode
 80030c4:	08000100 	.word	0x08000100
  ldr r0, =_scode
 80030c8:	20000200 	.word	0x20000200
  ldr r3, =_ecode
 80030cc:	20000bf8 	.word	0x20000bf8
  ldr r3, = _ebss
 80030d0:	20001e0c 	.word	0x20001e0c

080030d4 <ADC_IRQHandler>:


    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030d4:	e7fe      	b.n	80030d4 <ADC_IRQHandler>
	...

080030d8 <__libc_init_array>:
 80030d8:	b570      	push	{r4, r5, r6, lr}
 80030da:	4d0d      	ldr	r5, [pc, #52]	; (8003110 <__libc_init_array+0x38>)
 80030dc:	2600      	movs	r6, #0
 80030de:	4c0d      	ldr	r4, [pc, #52]	; (8003114 <__libc_init_array+0x3c>)
 80030e0:	1b64      	subs	r4, r4, r5
 80030e2:	10a4      	asrs	r4, r4, #2
 80030e4:	42a6      	cmp	r6, r4
 80030e6:	d109      	bne.n	80030fc <__libc_init_array+0x24>
 80030e8:	4d0b      	ldr	r5, [pc, #44]	; (8003118 <__libc_init_array+0x40>)
 80030ea:	2600      	movs	r6, #0
 80030ec:	4c0b      	ldr	r4, [pc, #44]	; (800311c <__libc_init_array+0x44>)
 80030ee:	f002 fc5d 	bl	80059ac <_init>
 80030f2:	1b64      	subs	r4, r4, r5
 80030f4:	10a4      	asrs	r4, r4, #2
 80030f6:	42a6      	cmp	r6, r4
 80030f8:	d105      	bne.n	8003106 <__libc_init_array+0x2e>
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003100:	3601      	adds	r6, #1
 8003102:	4798      	blx	r3
 8003104:	e7ee      	b.n	80030e4 <__libc_init_array+0xc>
 8003106:	f855 3b04 	ldr.w	r3, [r5], #4
 800310a:	3601      	adds	r6, #1
 800310c:	4798      	blx	r3
 800310e:	e7f2      	b.n	80030f6 <__libc_init_array+0x1e>
 8003110:	080060e0 	.word	0x080060e0
 8003114:	080060e0 	.word	0x080060e0
 8003118:	080060e0 	.word	0x080060e0
 800311c:	080060e4 	.word	0x080060e4

08003120 <memcpy>:
 8003120:	440a      	add	r2, r1
 8003122:	1e43      	subs	r3, r0, #1
 8003124:	4291      	cmp	r1, r2
 8003126:	d100      	bne.n	800312a <memcpy+0xa>
 8003128:	4770      	bx	lr
 800312a:	b510      	push	{r4, lr}
 800312c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003130:	4291      	cmp	r1, r2
 8003132:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003136:	d1f9      	bne.n	800312c <memcpy+0xc>
 8003138:	bd10      	pop	{r4, pc}

0800313a <memset>:
 800313a:	4402      	add	r2, r0
 800313c:	4603      	mov	r3, r0
 800313e:	4293      	cmp	r3, r2
 8003140:	d100      	bne.n	8003144 <memset+0xa>
 8003142:	4770      	bx	lr
 8003144:	f803 1b01 	strb.w	r1, [r3], #1
 8003148:	e7f9      	b.n	800313e <memset+0x4>

0800314a <__cvt>:
 800314a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800314e:	ec55 4b10 	vmov	r4, r5, d0
 8003152:	2d00      	cmp	r5, #0
 8003154:	460e      	mov	r6, r1
 8003156:	4619      	mov	r1, r3
 8003158:	462b      	mov	r3, r5
 800315a:	bfb4      	ite	lt
 800315c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003160:	2300      	movge	r3, #0
 8003162:	4691      	mov	r9, r2
 8003164:	bfbf      	itttt	lt
 8003166:	4622      	movlt	r2, r4
 8003168:	461d      	movlt	r5, r3
 800316a:	232d      	movlt	r3, #45	; 0x2d
 800316c:	4614      	movlt	r4, r2
 800316e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003172:	700b      	strb	r3, [r1, #0]
 8003174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003176:	f023 0820 	bic.w	r8, r3, #32
 800317a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800317e:	d005      	beq.n	800318c <__cvt+0x42>
 8003180:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003184:	d100      	bne.n	8003188 <__cvt+0x3e>
 8003186:	3601      	adds	r6, #1
 8003188:	2102      	movs	r1, #2
 800318a:	e000      	b.n	800318e <__cvt+0x44>
 800318c:	2103      	movs	r1, #3
 800318e:	ab03      	add	r3, sp, #12
 8003190:	4632      	mov	r2, r6
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	ab02      	add	r3, sp, #8
 8003196:	ec45 4b10 	vmov	d0, r4, r5
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4653      	mov	r3, sl
 800319e:	f000 fceb 	bl	8003b78 <_dtoa_r>
 80031a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80031a6:	4607      	mov	r7, r0
 80031a8:	d102      	bne.n	80031b0 <__cvt+0x66>
 80031aa:	f019 0f01 	tst.w	r9, #1
 80031ae:	d022      	beq.n	80031f6 <__cvt+0xac>
 80031b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031b4:	eb07 0906 	add.w	r9, r7, r6
 80031b8:	d110      	bne.n	80031dc <__cvt+0x92>
 80031ba:	783b      	ldrb	r3, [r7, #0]
 80031bc:	2b30      	cmp	r3, #48	; 0x30
 80031be:	d10a      	bne.n	80031d6 <__cvt+0x8c>
 80031c0:	2200      	movs	r2, #0
 80031c2:	2300      	movs	r3, #0
 80031c4:	4620      	mov	r0, r4
 80031c6:	4629      	mov	r1, r5
 80031c8:	f7fe f8c2 	bl	8001350 <__aeabi_dcmpeq>
 80031cc:	b918      	cbnz	r0, 80031d6 <__cvt+0x8c>
 80031ce:	f1c6 0601 	rsb	r6, r6, #1
 80031d2:	f8ca 6000 	str.w	r6, [sl]
 80031d6:	f8da 3000 	ldr.w	r3, [sl]
 80031da:	4499      	add	r9, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	2300      	movs	r3, #0
 80031e0:	4620      	mov	r0, r4
 80031e2:	4629      	mov	r1, r5
 80031e4:	f7fe f8b4 	bl	8001350 <__aeabi_dcmpeq>
 80031e8:	b108      	cbz	r0, 80031ee <__cvt+0xa4>
 80031ea:	f8cd 900c 	str.w	r9, [sp, #12]
 80031ee:	2230      	movs	r2, #48	; 0x30
 80031f0:	9b03      	ldr	r3, [sp, #12]
 80031f2:	454b      	cmp	r3, r9
 80031f4:	d307      	bcc.n	8003206 <__cvt+0xbc>
 80031f6:	9b03      	ldr	r3, [sp, #12]
 80031f8:	4638      	mov	r0, r7
 80031fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031fc:	1bdb      	subs	r3, r3, r7
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	b004      	add	sp, #16
 8003202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003206:	1c59      	adds	r1, r3, #1
 8003208:	9103      	str	r1, [sp, #12]
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	e7f0      	b.n	80031f0 <__cvt+0xa6>

0800320e <__exponent>:
 800320e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003210:	2900      	cmp	r1, #0
 8003212:	4603      	mov	r3, r0
 8003214:	bfb8      	it	lt
 8003216:	4249      	neglt	r1, r1
 8003218:	f803 2b02 	strb.w	r2, [r3], #2
 800321c:	bfb4      	ite	lt
 800321e:	222d      	movlt	r2, #45	; 0x2d
 8003220:	222b      	movge	r2, #43	; 0x2b
 8003222:	2909      	cmp	r1, #9
 8003224:	7042      	strb	r2, [r0, #1]
 8003226:	dd2a      	ble.n	800327e <__exponent+0x70>
 8003228:	f10d 0407 	add.w	r4, sp, #7
 800322c:	270a      	movs	r7, #10
 800322e:	46a4      	mov	ip, r4
 8003230:	460a      	mov	r2, r1
 8003232:	46a6      	mov	lr, r4
 8003234:	3c01      	subs	r4, #1
 8003236:	2a63      	cmp	r2, #99	; 0x63
 8003238:	fb91 f6f7 	sdiv	r6, r1, r7
 800323c:	fb07 1516 	mls	r5, r7, r6, r1
 8003240:	4631      	mov	r1, r6
 8003242:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003246:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800324a:	dcf1      	bgt.n	8003230 <__exponent+0x22>
 800324c:	3130      	adds	r1, #48	; 0x30
 800324e:	f1ae 0502 	sub.w	r5, lr, #2
 8003252:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003256:	1c44      	adds	r4, r0, #1
 8003258:	4629      	mov	r1, r5
 800325a:	4561      	cmp	r1, ip
 800325c:	d30a      	bcc.n	8003274 <__exponent+0x66>
 800325e:	f10d 0209 	add.w	r2, sp, #9
 8003262:	eba2 020e 	sub.w	r2, r2, lr
 8003266:	4565      	cmp	r5, ip
 8003268:	bf88      	it	hi
 800326a:	2200      	movhi	r2, #0
 800326c:	4413      	add	r3, r2
 800326e:	1a18      	subs	r0, r3, r0
 8003270:	b003      	add	sp, #12
 8003272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003274:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003278:	f804 2f01 	strb.w	r2, [r4, #1]!
 800327c:	e7ed      	b.n	800325a <__exponent+0x4c>
 800327e:	2330      	movs	r3, #48	; 0x30
 8003280:	3130      	adds	r1, #48	; 0x30
 8003282:	7083      	strb	r3, [r0, #2]
 8003284:	1d03      	adds	r3, r0, #4
 8003286:	70c1      	strb	r1, [r0, #3]
 8003288:	e7f1      	b.n	800326e <__exponent+0x60>
	...

0800328c <_printf_float>:
 800328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003290:	ed2d 8b02 	vpush	{d8}
 8003294:	b08d      	sub	sp, #52	; 0x34
 8003296:	460c      	mov	r4, r1
 8003298:	4616      	mov	r6, r2
 800329a:	461f      	mov	r7, r3
 800329c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80032a0:	4605      	mov	r5, r0
 80032a2:	f001 fb3b 	bl	800491c <_localeconv_r>
 80032a6:	f8d0 a000 	ldr.w	sl, [r0]
 80032aa:	4650      	mov	r0, sl
 80032ac:	f7fd fc24 	bl	8000af8 <strlen>
 80032b0:	2300      	movs	r3, #0
 80032b2:	f894 b018 	ldrb.w	fp, [r4, #24]
 80032b6:	ee08 0a10 	vmov	s16, r0
 80032ba:	930a      	str	r3, [sp, #40]	; 0x28
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	9305      	str	r3, [sp, #20]
 80032c0:	f8d8 3000 	ldr.w	r3, [r8]
 80032c4:	3307      	adds	r3, #7
 80032c6:	f023 0307 	bic.w	r3, r3, #7
 80032ca:	f103 0208 	add.w	r2, r3, #8
 80032ce:	f8c8 2000 	str.w	r2, [r8]
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80032de:	f04f 32ff 	mov.w	r2, #4294967295
 80032e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80032e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80032ea:	9307      	str	r3, [sp, #28]
 80032ec:	4b9e      	ldr	r3, [pc, #632]	; (8003568 <_printf_float+0x2dc>)
 80032ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032f2:	f7fe f85f 	bl	80013b4 <__aeabi_dcmpun>
 80032f6:	bb88      	cbnz	r0, 800335c <_printf_float+0xd0>
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	4b9a      	ldr	r3, [pc, #616]	; (8003568 <_printf_float+0x2dc>)
 80032fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003302:	f7fe f839 	bl	8001378 <__aeabi_dcmple>
 8003306:	bb48      	cbnz	r0, 800335c <_printf_float+0xd0>
 8003308:	2200      	movs	r2, #0
 800330a:	2300      	movs	r3, #0
 800330c:	4640      	mov	r0, r8
 800330e:	4649      	mov	r1, r9
 8003310:	f7fe f828 	bl	8001364 <__aeabi_dcmplt>
 8003314:	b110      	cbz	r0, 800331c <_printf_float+0x90>
 8003316:	232d      	movs	r3, #45	; 0x2d
 8003318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800331c:	4b93      	ldr	r3, [pc, #588]	; (800356c <_printf_float+0x2e0>)
 800331e:	4894      	ldr	r0, [pc, #592]	; (8003570 <_printf_float+0x2e4>)
 8003320:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003324:	bf94      	ite	ls
 8003326:	4698      	movls	r8, r3
 8003328:	4680      	movhi	r8, r0
 800332a:	2303      	movs	r3, #3
 800332c:	f04f 0900 	mov.w	r9, #0
 8003330:	6123      	str	r3, [r4, #16]
 8003332:	9b05      	ldr	r3, [sp, #20]
 8003334:	f023 0204 	bic.w	r2, r3, #4
 8003338:	6022      	str	r2, [r4, #0]
 800333a:	4633      	mov	r3, r6
 800333c:	aa0b      	add	r2, sp, #44	; 0x2c
 800333e:	4621      	mov	r1, r4
 8003340:	4628      	mov	r0, r5
 8003342:	9700      	str	r7, [sp, #0]
 8003344:	f000 f9d8 	bl	80036f8 <_printf_common>
 8003348:	3001      	adds	r0, #1
 800334a:	f040 8090 	bne.w	800346e <_printf_float+0x1e2>
 800334e:	f04f 30ff 	mov.w	r0, #4294967295
 8003352:	b00d      	add	sp, #52	; 0x34
 8003354:	ecbd 8b02 	vpop	{d8}
 8003358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800335c:	4642      	mov	r2, r8
 800335e:	464b      	mov	r3, r9
 8003360:	4640      	mov	r0, r8
 8003362:	4649      	mov	r1, r9
 8003364:	f7fe f826 	bl	80013b4 <__aeabi_dcmpun>
 8003368:	b140      	cbz	r0, 800337c <_printf_float+0xf0>
 800336a:	464b      	mov	r3, r9
 800336c:	4881      	ldr	r0, [pc, #516]	; (8003574 <_printf_float+0x2e8>)
 800336e:	2b00      	cmp	r3, #0
 8003370:	bfbc      	itt	lt
 8003372:	232d      	movlt	r3, #45	; 0x2d
 8003374:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003378:	4b7f      	ldr	r3, [pc, #508]	; (8003578 <_printf_float+0x2ec>)
 800337a:	e7d1      	b.n	8003320 <_printf_float+0x94>
 800337c:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003380:	6863      	ldr	r3, [r4, #4]
 8003382:	9206      	str	r2, [sp, #24]
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	d13f      	bne.n	8003408 <_printf_float+0x17c>
 8003388:	2306      	movs	r3, #6
 800338a:	6063      	str	r3, [r4, #4]
 800338c:	9b05      	ldr	r3, [sp, #20]
 800338e:	4628      	mov	r0, r5
 8003390:	6861      	ldr	r1, [r4, #4]
 8003392:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003396:	2300      	movs	r3, #0
 8003398:	9303      	str	r3, [sp, #12]
 800339a:	ab0a      	add	r3, sp, #40	; 0x28
 800339c:	6022      	str	r2, [r4, #0]
 800339e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80033a2:	ab09      	add	r3, sp, #36	; 0x24
 80033a4:	ec49 8b10 	vmov	d0, r8, r9
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80033ae:	f7ff fecc 	bl	800314a <__cvt>
 80033b2:	9b06      	ldr	r3, [sp, #24]
 80033b4:	4680      	mov	r8, r0
 80033b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80033b8:	2b47      	cmp	r3, #71	; 0x47
 80033ba:	d108      	bne.n	80033ce <_printf_float+0x142>
 80033bc:	1cc8      	adds	r0, r1, #3
 80033be:	db02      	blt.n	80033c6 <_printf_float+0x13a>
 80033c0:	6863      	ldr	r3, [r4, #4]
 80033c2:	4299      	cmp	r1, r3
 80033c4:	dd41      	ble.n	800344a <_printf_float+0x1be>
 80033c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80033ca:	fa5f fb8b 	uxtb.w	fp, fp
 80033ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80033d2:	d820      	bhi.n	8003416 <_printf_float+0x18a>
 80033d4:	3901      	subs	r1, #1
 80033d6:	465a      	mov	r2, fp
 80033d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033dc:	9109      	str	r1, [sp, #36]	; 0x24
 80033de:	f7ff ff16 	bl	800320e <__exponent>
 80033e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033e4:	4681      	mov	r9, r0
 80033e6:	1813      	adds	r3, r2, r0
 80033e8:	2a01      	cmp	r2, #1
 80033ea:	6123      	str	r3, [r4, #16]
 80033ec:	dc02      	bgt.n	80033f4 <_printf_float+0x168>
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	07d2      	lsls	r2, r2, #31
 80033f2:	d501      	bpl.n	80033f8 <_printf_float+0x16c>
 80033f4:	3301      	adds	r3, #1
 80033f6:	6123      	str	r3, [r4, #16]
 80033f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d09c      	beq.n	800333a <_printf_float+0xae>
 8003400:	232d      	movs	r3, #45	; 0x2d
 8003402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003406:	e798      	b.n	800333a <_printf_float+0xae>
 8003408:	9a06      	ldr	r2, [sp, #24]
 800340a:	2a47      	cmp	r2, #71	; 0x47
 800340c:	d1be      	bne.n	800338c <_printf_float+0x100>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1bc      	bne.n	800338c <_printf_float+0x100>
 8003412:	2301      	movs	r3, #1
 8003414:	e7b9      	b.n	800338a <_printf_float+0xfe>
 8003416:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800341a:	d118      	bne.n	800344e <_printf_float+0x1c2>
 800341c:	2900      	cmp	r1, #0
 800341e:	6863      	ldr	r3, [r4, #4]
 8003420:	dd0b      	ble.n	800343a <_printf_float+0x1ae>
 8003422:	6121      	str	r1, [r4, #16]
 8003424:	b913      	cbnz	r3, 800342c <_printf_float+0x1a0>
 8003426:	6822      	ldr	r2, [r4, #0]
 8003428:	07d0      	lsls	r0, r2, #31
 800342a:	d502      	bpl.n	8003432 <_printf_float+0x1a6>
 800342c:	3301      	adds	r3, #1
 800342e:	440b      	add	r3, r1
 8003430:	6123      	str	r3, [r4, #16]
 8003432:	f04f 0900 	mov.w	r9, #0
 8003436:	65a1      	str	r1, [r4, #88]	; 0x58
 8003438:	e7de      	b.n	80033f8 <_printf_float+0x16c>
 800343a:	b913      	cbnz	r3, 8003442 <_printf_float+0x1b6>
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	07d2      	lsls	r2, r2, #31
 8003440:	d501      	bpl.n	8003446 <_printf_float+0x1ba>
 8003442:	3302      	adds	r3, #2
 8003444:	e7f4      	b.n	8003430 <_printf_float+0x1a4>
 8003446:	2301      	movs	r3, #1
 8003448:	e7f2      	b.n	8003430 <_printf_float+0x1a4>
 800344a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800344e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003450:	4299      	cmp	r1, r3
 8003452:	db05      	blt.n	8003460 <_printf_float+0x1d4>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	6121      	str	r1, [r4, #16]
 8003458:	07d8      	lsls	r0, r3, #31
 800345a:	d5ea      	bpl.n	8003432 <_printf_float+0x1a6>
 800345c:	1c4b      	adds	r3, r1, #1
 800345e:	e7e7      	b.n	8003430 <_printf_float+0x1a4>
 8003460:	2900      	cmp	r1, #0
 8003462:	bfd4      	ite	le
 8003464:	f1c1 0202 	rsble	r2, r1, #2
 8003468:	2201      	movgt	r2, #1
 800346a:	4413      	add	r3, r2
 800346c:	e7e0      	b.n	8003430 <_printf_float+0x1a4>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	055a      	lsls	r2, r3, #21
 8003472:	d407      	bmi.n	8003484 <_printf_float+0x1f8>
 8003474:	6923      	ldr	r3, [r4, #16]
 8003476:	4642      	mov	r2, r8
 8003478:	4631      	mov	r1, r6
 800347a:	4628      	mov	r0, r5
 800347c:	47b8      	blx	r7
 800347e:	3001      	adds	r0, #1
 8003480:	d12c      	bne.n	80034dc <_printf_float+0x250>
 8003482:	e764      	b.n	800334e <_printf_float+0xc2>
 8003484:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003488:	f240 80e0 	bls.w	800364c <_printf_float+0x3c0>
 800348c:	2200      	movs	r2, #0
 800348e:	2300      	movs	r3, #0
 8003490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003494:	f7fd ff5c 	bl	8001350 <__aeabi_dcmpeq>
 8003498:	2800      	cmp	r0, #0
 800349a:	d034      	beq.n	8003506 <_printf_float+0x27a>
 800349c:	2301      	movs	r3, #1
 800349e:	4a37      	ldr	r2, [pc, #220]	; (800357c <_printf_float+0x2f0>)
 80034a0:	4631      	mov	r1, r6
 80034a2:	4628      	mov	r0, r5
 80034a4:	47b8      	blx	r7
 80034a6:	3001      	adds	r0, #1
 80034a8:	f43f af51 	beq.w	800334e <_printf_float+0xc2>
 80034ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034b0:	429a      	cmp	r2, r3
 80034b2:	db02      	blt.n	80034ba <_printf_float+0x22e>
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	07d8      	lsls	r0, r3, #31
 80034b8:	d510      	bpl.n	80034dc <_printf_float+0x250>
 80034ba:	ee18 3a10 	vmov	r3, s16
 80034be:	4652      	mov	r2, sl
 80034c0:	4631      	mov	r1, r6
 80034c2:	4628      	mov	r0, r5
 80034c4:	47b8      	blx	r7
 80034c6:	3001      	adds	r0, #1
 80034c8:	f43f af41 	beq.w	800334e <_printf_float+0xc2>
 80034cc:	f04f 0800 	mov.w	r8, #0
 80034d0:	f104 091a 	add.w	r9, r4, #26
 80034d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034d6:	3b01      	subs	r3, #1
 80034d8:	4543      	cmp	r3, r8
 80034da:	dc09      	bgt.n	80034f0 <_printf_float+0x264>
 80034dc:	6823      	ldr	r3, [r4, #0]
 80034de:	079b      	lsls	r3, r3, #30
 80034e0:	f100 8105 	bmi.w	80036ee <_printf_float+0x462>
 80034e4:	68e0      	ldr	r0, [r4, #12]
 80034e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034e8:	4298      	cmp	r0, r3
 80034ea:	bfb8      	it	lt
 80034ec:	4618      	movlt	r0, r3
 80034ee:	e730      	b.n	8003352 <_printf_float+0xc6>
 80034f0:	2301      	movs	r3, #1
 80034f2:	464a      	mov	r2, r9
 80034f4:	4631      	mov	r1, r6
 80034f6:	4628      	mov	r0, r5
 80034f8:	47b8      	blx	r7
 80034fa:	3001      	adds	r0, #1
 80034fc:	f43f af27 	beq.w	800334e <_printf_float+0xc2>
 8003500:	f108 0801 	add.w	r8, r8, #1
 8003504:	e7e6      	b.n	80034d4 <_printf_float+0x248>
 8003506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	dc39      	bgt.n	8003580 <_printf_float+0x2f4>
 800350c:	2301      	movs	r3, #1
 800350e:	4a1b      	ldr	r2, [pc, #108]	; (800357c <_printf_float+0x2f0>)
 8003510:	4631      	mov	r1, r6
 8003512:	4628      	mov	r0, r5
 8003514:	47b8      	blx	r7
 8003516:	3001      	adds	r0, #1
 8003518:	f43f af19 	beq.w	800334e <_printf_float+0xc2>
 800351c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003520:	4313      	orrs	r3, r2
 8003522:	d102      	bne.n	800352a <_printf_float+0x29e>
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	07d9      	lsls	r1, r3, #31
 8003528:	d5d8      	bpl.n	80034dc <_printf_float+0x250>
 800352a:	ee18 3a10 	vmov	r3, s16
 800352e:	4652      	mov	r2, sl
 8003530:	4631      	mov	r1, r6
 8003532:	4628      	mov	r0, r5
 8003534:	47b8      	blx	r7
 8003536:	3001      	adds	r0, #1
 8003538:	f43f af09 	beq.w	800334e <_printf_float+0xc2>
 800353c:	f04f 0900 	mov.w	r9, #0
 8003540:	f104 0a1a 	add.w	sl, r4, #26
 8003544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003546:	425b      	negs	r3, r3
 8003548:	454b      	cmp	r3, r9
 800354a:	dc01      	bgt.n	8003550 <_printf_float+0x2c4>
 800354c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800354e:	e792      	b.n	8003476 <_printf_float+0x1ea>
 8003550:	2301      	movs	r3, #1
 8003552:	4652      	mov	r2, sl
 8003554:	4631      	mov	r1, r6
 8003556:	4628      	mov	r0, r5
 8003558:	47b8      	blx	r7
 800355a:	3001      	adds	r0, #1
 800355c:	f43f aef7 	beq.w	800334e <_printf_float+0xc2>
 8003560:	f109 0901 	add.w	r9, r9, #1
 8003564:	e7ee      	b.n	8003544 <_printf_float+0x2b8>
 8003566:	bf00      	nop
 8003568:	7fefffff 	.word	0x7fefffff
 800356c:	08005e24 	.word	0x08005e24
 8003570:	08005e28 	.word	0x08005e28
 8003574:	08005e30 	.word	0x08005e30
 8003578:	08005e2c 	.word	0x08005e2c
 800357c:	08005e34 	.word	0x08005e34
 8003580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003582:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003584:	429a      	cmp	r2, r3
 8003586:	bfa8      	it	ge
 8003588:	461a      	movge	r2, r3
 800358a:	2a00      	cmp	r2, #0
 800358c:	4691      	mov	r9, r2
 800358e:	dc37      	bgt.n	8003600 <_printf_float+0x374>
 8003590:	f04f 0b00 	mov.w	fp, #0
 8003594:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003598:	f104 021a 	add.w	r2, r4, #26
 800359c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800359e:	9305      	str	r3, [sp, #20]
 80035a0:	eba3 0309 	sub.w	r3, r3, r9
 80035a4:	455b      	cmp	r3, fp
 80035a6:	dc33      	bgt.n	8003610 <_printf_float+0x384>
 80035a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035ac:	429a      	cmp	r2, r3
 80035ae:	db3b      	blt.n	8003628 <_printf_float+0x39c>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	07da      	lsls	r2, r3, #31
 80035b4:	d438      	bmi.n	8003628 <_printf_float+0x39c>
 80035b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035b8:	9b05      	ldr	r3, [sp, #20]
 80035ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	eba2 0901 	sub.w	r9, r2, r1
 80035c2:	4599      	cmp	r9, r3
 80035c4:	bfa8      	it	ge
 80035c6:	4699      	movge	r9, r3
 80035c8:	f1b9 0f00 	cmp.w	r9, #0
 80035cc:	dc35      	bgt.n	800363a <_printf_float+0x3ae>
 80035ce:	f04f 0800 	mov.w	r8, #0
 80035d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035d6:	f104 0a1a 	add.w	sl, r4, #26
 80035da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	eba3 0309 	sub.w	r3, r3, r9
 80035e4:	4543      	cmp	r3, r8
 80035e6:	f77f af79 	ble.w	80034dc <_printf_float+0x250>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4652      	mov	r2, sl
 80035ee:	4631      	mov	r1, r6
 80035f0:	4628      	mov	r0, r5
 80035f2:	47b8      	blx	r7
 80035f4:	3001      	adds	r0, #1
 80035f6:	f43f aeaa 	beq.w	800334e <_printf_float+0xc2>
 80035fa:	f108 0801 	add.w	r8, r8, #1
 80035fe:	e7ec      	b.n	80035da <_printf_float+0x34e>
 8003600:	4613      	mov	r3, r2
 8003602:	4631      	mov	r1, r6
 8003604:	4642      	mov	r2, r8
 8003606:	4628      	mov	r0, r5
 8003608:	47b8      	blx	r7
 800360a:	3001      	adds	r0, #1
 800360c:	d1c0      	bne.n	8003590 <_printf_float+0x304>
 800360e:	e69e      	b.n	800334e <_printf_float+0xc2>
 8003610:	2301      	movs	r3, #1
 8003612:	4631      	mov	r1, r6
 8003614:	4628      	mov	r0, r5
 8003616:	9205      	str	r2, [sp, #20]
 8003618:	47b8      	blx	r7
 800361a:	3001      	adds	r0, #1
 800361c:	f43f ae97 	beq.w	800334e <_printf_float+0xc2>
 8003620:	f10b 0b01 	add.w	fp, fp, #1
 8003624:	9a05      	ldr	r2, [sp, #20]
 8003626:	e7b9      	b.n	800359c <_printf_float+0x310>
 8003628:	ee18 3a10 	vmov	r3, s16
 800362c:	4652      	mov	r2, sl
 800362e:	4631      	mov	r1, r6
 8003630:	4628      	mov	r0, r5
 8003632:	47b8      	blx	r7
 8003634:	3001      	adds	r0, #1
 8003636:	d1be      	bne.n	80035b6 <_printf_float+0x32a>
 8003638:	e689      	b.n	800334e <_printf_float+0xc2>
 800363a:	9a05      	ldr	r2, [sp, #20]
 800363c:	464b      	mov	r3, r9
 800363e:	4631      	mov	r1, r6
 8003640:	4628      	mov	r0, r5
 8003642:	4442      	add	r2, r8
 8003644:	47b8      	blx	r7
 8003646:	3001      	adds	r0, #1
 8003648:	d1c1      	bne.n	80035ce <_printf_float+0x342>
 800364a:	e680      	b.n	800334e <_printf_float+0xc2>
 800364c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800364e:	2a01      	cmp	r2, #1
 8003650:	dc01      	bgt.n	8003656 <_printf_float+0x3ca>
 8003652:	07db      	lsls	r3, r3, #31
 8003654:	d538      	bpl.n	80036c8 <_printf_float+0x43c>
 8003656:	2301      	movs	r3, #1
 8003658:	4642      	mov	r2, r8
 800365a:	4631      	mov	r1, r6
 800365c:	4628      	mov	r0, r5
 800365e:	47b8      	blx	r7
 8003660:	3001      	adds	r0, #1
 8003662:	f43f ae74 	beq.w	800334e <_printf_float+0xc2>
 8003666:	ee18 3a10 	vmov	r3, s16
 800366a:	4652      	mov	r2, sl
 800366c:	4631      	mov	r1, r6
 800366e:	4628      	mov	r0, r5
 8003670:	47b8      	blx	r7
 8003672:	3001      	adds	r0, #1
 8003674:	f43f ae6b 	beq.w	800334e <_printf_float+0xc2>
 8003678:	2200      	movs	r2, #0
 800367a:	2300      	movs	r3, #0
 800367c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003680:	f7fd fe66 	bl	8001350 <__aeabi_dcmpeq>
 8003684:	b9d8      	cbnz	r0, 80036be <_printf_float+0x432>
 8003686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003688:	f108 0201 	add.w	r2, r8, #1
 800368c:	3b01      	subs	r3, #1
 800368e:	4631      	mov	r1, r6
 8003690:	4628      	mov	r0, r5
 8003692:	47b8      	blx	r7
 8003694:	3001      	adds	r0, #1
 8003696:	d10e      	bne.n	80036b6 <_printf_float+0x42a>
 8003698:	e659      	b.n	800334e <_printf_float+0xc2>
 800369a:	2301      	movs	r3, #1
 800369c:	4652      	mov	r2, sl
 800369e:	4631      	mov	r1, r6
 80036a0:	4628      	mov	r0, r5
 80036a2:	47b8      	blx	r7
 80036a4:	3001      	adds	r0, #1
 80036a6:	f43f ae52 	beq.w	800334e <_printf_float+0xc2>
 80036aa:	f108 0801 	add.w	r8, r8, #1
 80036ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036b0:	3b01      	subs	r3, #1
 80036b2:	4543      	cmp	r3, r8
 80036b4:	dcf1      	bgt.n	800369a <_printf_float+0x40e>
 80036b6:	464b      	mov	r3, r9
 80036b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80036bc:	e6dc      	b.n	8003478 <_printf_float+0x1ec>
 80036be:	f04f 0800 	mov.w	r8, #0
 80036c2:	f104 0a1a 	add.w	sl, r4, #26
 80036c6:	e7f2      	b.n	80036ae <_printf_float+0x422>
 80036c8:	2301      	movs	r3, #1
 80036ca:	4642      	mov	r2, r8
 80036cc:	e7df      	b.n	800368e <_printf_float+0x402>
 80036ce:	2301      	movs	r3, #1
 80036d0:	464a      	mov	r2, r9
 80036d2:	4631      	mov	r1, r6
 80036d4:	4628      	mov	r0, r5
 80036d6:	47b8      	blx	r7
 80036d8:	3001      	adds	r0, #1
 80036da:	f43f ae38 	beq.w	800334e <_printf_float+0xc2>
 80036de:	f108 0801 	add.w	r8, r8, #1
 80036e2:	68e3      	ldr	r3, [r4, #12]
 80036e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036e6:	1a5b      	subs	r3, r3, r1
 80036e8:	4543      	cmp	r3, r8
 80036ea:	dcf0      	bgt.n	80036ce <_printf_float+0x442>
 80036ec:	e6fa      	b.n	80034e4 <_printf_float+0x258>
 80036ee:	f04f 0800 	mov.w	r8, #0
 80036f2:	f104 0919 	add.w	r9, r4, #25
 80036f6:	e7f4      	b.n	80036e2 <_printf_float+0x456>

080036f8 <_printf_common>:
 80036f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036fc:	4616      	mov	r6, r2
 80036fe:	4699      	mov	r9, r3
 8003700:	688a      	ldr	r2, [r1, #8]
 8003702:	4607      	mov	r7, r0
 8003704:	690b      	ldr	r3, [r1, #16]
 8003706:	460c      	mov	r4, r1
 8003708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800370c:	4293      	cmp	r3, r2
 800370e:	bfb8      	it	lt
 8003710:	4613      	movlt	r3, r2
 8003712:	6033      	str	r3, [r6, #0]
 8003714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003718:	b10a      	cbz	r2, 800371e <_printf_common+0x26>
 800371a:	3301      	adds	r3, #1
 800371c:	6033      	str	r3, [r6, #0]
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	0699      	lsls	r1, r3, #26
 8003722:	bf42      	ittt	mi
 8003724:	6833      	ldrmi	r3, [r6, #0]
 8003726:	3302      	addmi	r3, #2
 8003728:	6033      	strmi	r3, [r6, #0]
 800372a:	6825      	ldr	r5, [r4, #0]
 800372c:	f015 0506 	ands.w	r5, r5, #6
 8003730:	d106      	bne.n	8003740 <_printf_common+0x48>
 8003732:	f104 0a19 	add.w	sl, r4, #25
 8003736:	68e3      	ldr	r3, [r4, #12]
 8003738:	6832      	ldr	r2, [r6, #0]
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	42ab      	cmp	r3, r5
 800373e:	dc29      	bgt.n	8003794 <_printf_common+0x9c>
 8003740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003744:	1e13      	subs	r3, r2, #0
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	bf18      	it	ne
 800374a:	2301      	movne	r3, #1
 800374c:	0692      	lsls	r2, r2, #26
 800374e:	d42e      	bmi.n	80037ae <_printf_common+0xb6>
 8003750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003754:	4649      	mov	r1, r9
 8003756:	4638      	mov	r0, r7
 8003758:	47c0      	blx	r8
 800375a:	3001      	adds	r0, #1
 800375c:	d021      	beq.n	80037a2 <_printf_common+0xaa>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	341a      	adds	r4, #26
 8003762:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8003766:	f003 0306 	and.w	r3, r3, #6
 800376a:	6832      	ldr	r2, [r6, #0]
 800376c:	2600      	movs	r6, #0
 800376e:	2b04      	cmp	r3, #4
 8003770:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003774:	bf08      	it	eq
 8003776:	1aad      	subeq	r5, r5, r2
 8003778:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800377c:	bf14      	ite	ne
 800377e:	2500      	movne	r5, #0
 8003780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003784:	4293      	cmp	r3, r2
 8003786:	bfc4      	itt	gt
 8003788:	1a9b      	subgt	r3, r3, r2
 800378a:	18ed      	addgt	r5, r5, r3
 800378c:	42b5      	cmp	r5, r6
 800378e:	d11a      	bne.n	80037c6 <_printf_common+0xce>
 8003790:	2000      	movs	r0, #0
 8003792:	e008      	b.n	80037a6 <_printf_common+0xae>
 8003794:	2301      	movs	r3, #1
 8003796:	4652      	mov	r2, sl
 8003798:	4649      	mov	r1, r9
 800379a:	4638      	mov	r0, r7
 800379c:	47c0      	blx	r8
 800379e:	3001      	adds	r0, #1
 80037a0:	d103      	bne.n	80037aa <_printf_common+0xb2>
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295
 80037a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037aa:	3501      	adds	r5, #1
 80037ac:	e7c3      	b.n	8003736 <_printf_common+0x3e>
 80037ae:	18e1      	adds	r1, r4, r3
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	2030      	movs	r0, #48	; 0x30
 80037b4:	3302      	adds	r3, #2
 80037b6:	4422      	add	r2, r4
 80037b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037c4:	e7c4      	b.n	8003750 <_printf_common+0x58>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4622      	mov	r2, r4
 80037ca:	4649      	mov	r1, r9
 80037cc:	4638      	mov	r0, r7
 80037ce:	47c0      	blx	r8
 80037d0:	3001      	adds	r0, #1
 80037d2:	d0e6      	beq.n	80037a2 <_printf_common+0xaa>
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7d9      	b.n	800378c <_printf_common+0x94>

080037d8 <_printf_i>:
 80037d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	460c      	mov	r4, r1
 80037de:	4691      	mov	r9, r2
 80037e0:	4680      	mov	r8, r0
 80037e2:	469a      	mov	sl, r3
 80037e4:	7e27      	ldrb	r7, [r4, #24]
 80037e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80037ec:	2f78      	cmp	r7, #120	; 0x78
 80037ee:	d807      	bhi.n	8003800 <_printf_i+0x28>
 80037f0:	2f62      	cmp	r7, #98	; 0x62
 80037f2:	d80a      	bhi.n	800380a <_printf_i+0x32>
 80037f4:	2f00      	cmp	r7, #0
 80037f6:	f000 80d8 	beq.w	80039aa <_printf_i+0x1d2>
 80037fa:	2f58      	cmp	r7, #88	; 0x58
 80037fc:	f000 80a3 	beq.w	8003946 <_printf_i+0x16e>
 8003800:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003808:	e03a      	b.n	8003880 <_printf_i+0xa8>
 800380a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800380e:	2b15      	cmp	r3, #21
 8003810:	d8f6      	bhi.n	8003800 <_printf_i+0x28>
 8003812:	a001      	add	r0, pc, #4	; (adr r0, 8003818 <_printf_i+0x40>)
 8003814:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003818:	08003871 	.word	0x08003871
 800381c:	08003885 	.word	0x08003885
 8003820:	08003801 	.word	0x08003801
 8003824:	08003801 	.word	0x08003801
 8003828:	08003801 	.word	0x08003801
 800382c:	08003801 	.word	0x08003801
 8003830:	08003885 	.word	0x08003885
 8003834:	08003801 	.word	0x08003801
 8003838:	08003801 	.word	0x08003801
 800383c:	08003801 	.word	0x08003801
 8003840:	08003801 	.word	0x08003801
 8003844:	08003991 	.word	0x08003991
 8003848:	080038b5 	.word	0x080038b5
 800384c:	08003973 	.word	0x08003973
 8003850:	08003801 	.word	0x08003801
 8003854:	08003801 	.word	0x08003801
 8003858:	080039b3 	.word	0x080039b3
 800385c:	08003801 	.word	0x08003801
 8003860:	080038b5 	.word	0x080038b5
 8003864:	08003801 	.word	0x08003801
 8003868:	08003801 	.word	0x08003801
 800386c:	0800397b 	.word	0x0800397b
 8003870:	680b      	ldr	r3, [r1, #0]
 8003872:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003876:	1d1a      	adds	r2, r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	600a      	str	r2, [r1, #0]
 800387c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003880:	2301      	movs	r3, #1
 8003882:	e0a3      	b.n	80039cc <_printf_i+0x1f4>
 8003884:	6825      	ldr	r5, [r4, #0]
 8003886:	6808      	ldr	r0, [r1, #0]
 8003888:	062e      	lsls	r6, r5, #24
 800388a:	f100 0304 	add.w	r3, r0, #4
 800388e:	d50a      	bpl.n	80038a6 <_printf_i+0xce>
 8003890:	6805      	ldr	r5, [r0, #0]
 8003892:	600b      	str	r3, [r1, #0]
 8003894:	2d00      	cmp	r5, #0
 8003896:	da03      	bge.n	80038a0 <_printf_i+0xc8>
 8003898:	232d      	movs	r3, #45	; 0x2d
 800389a:	426d      	negs	r5, r5
 800389c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038a0:	485e      	ldr	r0, [pc, #376]	; (8003a1c <_printf_i+0x244>)
 80038a2:	230a      	movs	r3, #10
 80038a4:	e019      	b.n	80038da <_printf_i+0x102>
 80038a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038aa:	6805      	ldr	r5, [r0, #0]
 80038ac:	600b      	str	r3, [r1, #0]
 80038ae:	bf18      	it	ne
 80038b0:	b22d      	sxthne	r5, r5
 80038b2:	e7ef      	b.n	8003894 <_printf_i+0xbc>
 80038b4:	680b      	ldr	r3, [r1, #0]
 80038b6:	6825      	ldr	r5, [r4, #0]
 80038b8:	1d18      	adds	r0, r3, #4
 80038ba:	6008      	str	r0, [r1, #0]
 80038bc:	0628      	lsls	r0, r5, #24
 80038be:	d501      	bpl.n	80038c4 <_printf_i+0xec>
 80038c0:	681d      	ldr	r5, [r3, #0]
 80038c2:	e002      	b.n	80038ca <_printf_i+0xf2>
 80038c4:	0669      	lsls	r1, r5, #25
 80038c6:	d5fb      	bpl.n	80038c0 <_printf_i+0xe8>
 80038c8:	881d      	ldrh	r5, [r3, #0]
 80038ca:	2f6f      	cmp	r7, #111	; 0x6f
 80038cc:	4853      	ldr	r0, [pc, #332]	; (8003a1c <_printf_i+0x244>)
 80038ce:	bf0c      	ite	eq
 80038d0:	2308      	moveq	r3, #8
 80038d2:	230a      	movne	r3, #10
 80038d4:	2100      	movs	r1, #0
 80038d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038da:	6866      	ldr	r6, [r4, #4]
 80038dc:	2e00      	cmp	r6, #0
 80038de:	60a6      	str	r6, [r4, #8]
 80038e0:	bfa2      	ittt	ge
 80038e2:	6821      	ldrge	r1, [r4, #0]
 80038e4:	f021 0104 	bicge.w	r1, r1, #4
 80038e8:	6021      	strge	r1, [r4, #0]
 80038ea:	b90d      	cbnz	r5, 80038f0 <_printf_i+0x118>
 80038ec:	2e00      	cmp	r6, #0
 80038ee:	d04d      	beq.n	800398c <_printf_i+0x1b4>
 80038f0:	4616      	mov	r6, r2
 80038f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80038f6:	fb03 5711 	mls	r7, r3, r1, r5
 80038fa:	5dc7      	ldrb	r7, [r0, r7]
 80038fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003900:	462f      	mov	r7, r5
 8003902:	460d      	mov	r5, r1
 8003904:	42bb      	cmp	r3, r7
 8003906:	d9f4      	bls.n	80038f2 <_printf_i+0x11a>
 8003908:	2b08      	cmp	r3, #8
 800390a:	d10b      	bne.n	8003924 <_printf_i+0x14c>
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	07df      	lsls	r7, r3, #31
 8003910:	d508      	bpl.n	8003924 <_printf_i+0x14c>
 8003912:	6923      	ldr	r3, [r4, #16]
 8003914:	6861      	ldr	r1, [r4, #4]
 8003916:	4299      	cmp	r1, r3
 8003918:	bfde      	ittt	le
 800391a:	2330      	movle	r3, #48	; 0x30
 800391c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003920:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003924:	1b92      	subs	r2, r2, r6
 8003926:	6122      	str	r2, [r4, #16]
 8003928:	464b      	mov	r3, r9
 800392a:	aa03      	add	r2, sp, #12
 800392c:	4621      	mov	r1, r4
 800392e:	4640      	mov	r0, r8
 8003930:	f8cd a000 	str.w	sl, [sp]
 8003934:	f7ff fee0 	bl	80036f8 <_printf_common>
 8003938:	3001      	adds	r0, #1
 800393a:	d14c      	bne.n	80039d6 <_printf_i+0x1fe>
 800393c:	f04f 30ff 	mov.w	r0, #4294967295
 8003940:	b004      	add	sp, #16
 8003942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003946:	4835      	ldr	r0, [pc, #212]	; (8003a1c <_printf_i+0x244>)
 8003948:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	680e      	ldr	r6, [r1, #0]
 8003950:	061f      	lsls	r7, r3, #24
 8003952:	f856 5b04 	ldr.w	r5, [r6], #4
 8003956:	600e      	str	r6, [r1, #0]
 8003958:	d514      	bpl.n	8003984 <_printf_i+0x1ac>
 800395a:	07d9      	lsls	r1, r3, #31
 800395c:	bf44      	itt	mi
 800395e:	f043 0320 	orrmi.w	r3, r3, #32
 8003962:	6023      	strmi	r3, [r4, #0]
 8003964:	b91d      	cbnz	r5, 800396e <_printf_i+0x196>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	f023 0320 	bic.w	r3, r3, #32
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	2310      	movs	r3, #16
 8003970:	e7b0      	b.n	80038d4 <_printf_i+0xfc>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	f043 0320 	orr.w	r3, r3, #32
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	2378      	movs	r3, #120	; 0x78
 800397c:	4828      	ldr	r0, [pc, #160]	; (8003a20 <_printf_i+0x248>)
 800397e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003982:	e7e3      	b.n	800394c <_printf_i+0x174>
 8003984:	065e      	lsls	r6, r3, #25
 8003986:	bf48      	it	mi
 8003988:	b2ad      	uxthmi	r5, r5
 800398a:	e7e6      	b.n	800395a <_printf_i+0x182>
 800398c:	4616      	mov	r6, r2
 800398e:	e7bb      	b.n	8003908 <_printf_i+0x130>
 8003990:	680b      	ldr	r3, [r1, #0]
 8003992:	6826      	ldr	r6, [r4, #0]
 8003994:	1d1d      	adds	r5, r3, #4
 8003996:	6960      	ldr	r0, [r4, #20]
 8003998:	600d      	str	r5, [r1, #0]
 800399a:	0635      	lsls	r5, r6, #24
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	d501      	bpl.n	80039a4 <_printf_i+0x1cc>
 80039a0:	6018      	str	r0, [r3, #0]
 80039a2:	e002      	b.n	80039aa <_printf_i+0x1d2>
 80039a4:	0671      	lsls	r1, r6, #25
 80039a6:	d5fb      	bpl.n	80039a0 <_printf_i+0x1c8>
 80039a8:	8018      	strh	r0, [r3, #0]
 80039aa:	2300      	movs	r3, #0
 80039ac:	4616      	mov	r6, r2
 80039ae:	6123      	str	r3, [r4, #16]
 80039b0:	e7ba      	b.n	8003928 <_printf_i+0x150>
 80039b2:	680b      	ldr	r3, [r1, #0]
 80039b4:	1d1a      	adds	r2, r3, #4
 80039b6:	600a      	str	r2, [r1, #0]
 80039b8:	2100      	movs	r1, #0
 80039ba:	681e      	ldr	r6, [r3, #0]
 80039bc:	6862      	ldr	r2, [r4, #4]
 80039be:	4630      	mov	r0, r6
 80039c0:	f000 ffbc 	bl	800493c <memchr>
 80039c4:	b108      	cbz	r0, 80039ca <_printf_i+0x1f2>
 80039c6:	1b80      	subs	r0, r0, r6
 80039c8:	6060      	str	r0, [r4, #4]
 80039ca:	6863      	ldr	r3, [r4, #4]
 80039cc:	6123      	str	r3, [r4, #16]
 80039ce:	2300      	movs	r3, #0
 80039d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d4:	e7a8      	b.n	8003928 <_printf_i+0x150>
 80039d6:	6923      	ldr	r3, [r4, #16]
 80039d8:	4632      	mov	r2, r6
 80039da:	4649      	mov	r1, r9
 80039dc:	4640      	mov	r0, r8
 80039de:	47d0      	blx	sl
 80039e0:	3001      	adds	r0, #1
 80039e2:	d0ab      	beq.n	800393c <_printf_i+0x164>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	079b      	lsls	r3, r3, #30
 80039e8:	d413      	bmi.n	8003a12 <_printf_i+0x23a>
 80039ea:	68e0      	ldr	r0, [r4, #12]
 80039ec:	9b03      	ldr	r3, [sp, #12]
 80039ee:	4298      	cmp	r0, r3
 80039f0:	bfb8      	it	lt
 80039f2:	4618      	movlt	r0, r3
 80039f4:	e7a4      	b.n	8003940 <_printf_i+0x168>
 80039f6:	2301      	movs	r3, #1
 80039f8:	4632      	mov	r2, r6
 80039fa:	4649      	mov	r1, r9
 80039fc:	4640      	mov	r0, r8
 80039fe:	47d0      	blx	sl
 8003a00:	3001      	adds	r0, #1
 8003a02:	d09b      	beq.n	800393c <_printf_i+0x164>
 8003a04:	3501      	adds	r5, #1
 8003a06:	68e3      	ldr	r3, [r4, #12]
 8003a08:	9903      	ldr	r1, [sp, #12]
 8003a0a:	1a5b      	subs	r3, r3, r1
 8003a0c:	42ab      	cmp	r3, r5
 8003a0e:	dcf2      	bgt.n	80039f6 <_printf_i+0x21e>
 8003a10:	e7eb      	b.n	80039ea <_printf_i+0x212>
 8003a12:	2500      	movs	r5, #0
 8003a14:	f104 0619 	add.w	r6, r4, #25
 8003a18:	e7f5      	b.n	8003a06 <_printf_i+0x22e>
 8003a1a:	bf00      	nop
 8003a1c:	08005e36 	.word	0x08005e36
 8003a20:	08005e47 	.word	0x08005e47

08003a24 <iprintf>:
 8003a24:	b40f      	push	{r0, r1, r2, r3}
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <iprintf+0x2c>)
 8003a28:	b513      	push	{r0, r1, r4, lr}
 8003a2a:	681c      	ldr	r4, [r3, #0]
 8003a2c:	b124      	cbz	r4, 8003a38 <iprintf+0x14>
 8003a2e:	69a3      	ldr	r3, [r4, #24]
 8003a30:	b913      	cbnz	r3, 8003a38 <iprintf+0x14>
 8003a32:	4620      	mov	r0, r4
 8003a34:	f000 fed4 	bl	80047e0 <__sinit>
 8003a38:	ab05      	add	r3, sp, #20
 8003a3a:	9a04      	ldr	r2, [sp, #16]
 8003a3c:	68a1      	ldr	r1, [r4, #8]
 8003a3e:	4620      	mov	r0, r4
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	f001 fb81 	bl	8005148 <_vfiprintf_r>
 8003a46:	b002      	add	sp, #8
 8003a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a4c:	b004      	add	sp, #16
 8003a4e:	4770      	bx	lr
 8003a50:	20000c00 	.word	0x20000c00

08003a54 <quorem>:
 8003a54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a58:	6903      	ldr	r3, [r0, #16]
 8003a5a:	4607      	mov	r7, r0
 8003a5c:	690c      	ldr	r4, [r1, #16]
 8003a5e:	42a3      	cmp	r3, r4
 8003a60:	f2c0 8085 	blt.w	8003b6e <quorem+0x11a>
 8003a64:	3c01      	subs	r4, #1
 8003a66:	f100 0514 	add.w	r5, r0, #20
 8003a6a:	f101 0814 	add.w	r8, r1, #20
 8003a6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a76:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003a80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003a84:	3301      	adds	r3, #1
 8003a86:	429a      	cmp	r2, r3
 8003a88:	fbb2 f6f3 	udiv	r6, r2, r3
 8003a8c:	d333      	bcc.n	8003af6 <quorem+0xa2>
 8003a8e:	f04f 0e00 	mov.w	lr, #0
 8003a92:	4640      	mov	r0, r8
 8003a94:	46ac      	mov	ip, r5
 8003a96:	46f2      	mov	sl, lr
 8003a98:	f850 2b04 	ldr.w	r2, [r0], #4
 8003a9c:	b293      	uxth	r3, r2
 8003a9e:	4581      	cmp	r9, r0
 8003aa0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8003aa4:	fb06 e303 	mla	r3, r6, r3, lr
 8003aa8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	fb06 e202 	mla	r2, r6, r2, lr
 8003ab2:	ebaa 0303 	sub.w	r3, sl, r3
 8003ab6:	f8dc a000 	ldr.w	sl, [ip]
 8003aba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003abe:	fa1f fa8a 	uxth.w	sl, sl
 8003ac2:	4453      	add	r3, sl
 8003ac4:	fa1f fa82 	uxth.w	sl, r2
 8003ac8:	f8dc 2000 	ldr.w	r2, [ip]
 8003acc:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8003ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ade:	f84c 3b04 	str.w	r3, [ip], #4
 8003ae2:	d2d9      	bcs.n	8003a98 <quorem+0x44>
 8003ae4:	f855 300b 	ldr.w	r3, [r5, fp]
 8003ae8:	b92b      	cbnz	r3, 8003af6 <quorem+0xa2>
 8003aea:	9b01      	ldr	r3, [sp, #4]
 8003aec:	3b04      	subs	r3, #4
 8003aee:	429d      	cmp	r5, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	d330      	bcc.n	8003b56 <quorem+0x102>
 8003af4:	613c      	str	r4, [r7, #16]
 8003af6:	4638      	mov	r0, r7
 8003af8:	f001 f959 	bl	8004dae <__mcmp>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	db26      	blt.n	8003b4e <quorem+0xfa>
 8003b00:	3601      	adds	r6, #1
 8003b02:	4628      	mov	r0, r5
 8003b04:	f04f 0c00 	mov.w	ip, #0
 8003b08:	f858 1b04 	ldr.w	r1, [r8], #4
 8003b0c:	f8d0 e000 	ldr.w	lr, [r0]
 8003b10:	b28b      	uxth	r3, r1
 8003b12:	45c1      	cmp	r9, r8
 8003b14:	fa1f f28e 	uxth.w	r2, lr
 8003b18:	ebac 0303 	sub.w	r3, ip, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	ea4f 4211 	mov.w	r2, r1, lsr #16
 8003b22:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003b26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b34:	f840 3b04 	str.w	r3, [r0], #4
 8003b38:	d2e6      	bcs.n	8003b08 <quorem+0xb4>
 8003b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b42:	b922      	cbnz	r2, 8003b4e <quorem+0xfa>
 8003b44:	3b04      	subs	r3, #4
 8003b46:	429d      	cmp	r5, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	d30a      	bcc.n	8003b62 <quorem+0x10e>
 8003b4c:	613c      	str	r4, [r7, #16]
 8003b4e:	4630      	mov	r0, r6
 8003b50:	b003      	add	sp, #12
 8003b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	3b04      	subs	r3, #4
 8003b5a:	2a00      	cmp	r2, #0
 8003b5c:	d1ca      	bne.n	8003af4 <quorem+0xa0>
 8003b5e:	3c01      	subs	r4, #1
 8003b60:	e7c5      	b.n	8003aee <quorem+0x9a>
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	3b04      	subs	r3, #4
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d1f0      	bne.n	8003b4c <quorem+0xf8>
 8003b6a:	3c01      	subs	r4, #1
 8003b6c:	e7eb      	b.n	8003b46 <quorem+0xf2>
 8003b6e:	2000      	movs	r0, #0
 8003b70:	e7ee      	b.n	8003b50 <quorem+0xfc>
 8003b72:	0000      	movs	r0, r0
 8003b74:	0000      	movs	r0, r0
	...

08003b78 <_dtoa_r>:
 8003b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b7e:	4604      	mov	r4, r0
 8003b80:	ed2d 8b02 	vpush	{d8}
 8003b84:	b095      	sub	sp, #84	; 0x54
 8003b86:	ec57 6b10 	vmov	r6, r7, d0
 8003b8a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003b8e:	9105      	str	r1, [sp, #20]
 8003b90:	9209      	str	r2, [sp, #36]	; 0x24
 8003b92:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b94:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8003b98:	b93d      	cbnz	r5, 8003baa <_dtoa_r+0x32>
 8003b9a:	2010      	movs	r0, #16
 8003b9c:	f000 fec6 	bl	800492c <malloc>
 8003ba0:	6260      	str	r0, [r4, #36]	; 0x24
 8003ba2:	6005      	str	r5, [r0, #0]
 8003ba4:	60c5      	str	r5, [r0, #12]
 8003ba6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bac:	6819      	ldr	r1, [r3, #0]
 8003bae:	b151      	cbz	r1, 8003bc6 <_dtoa_r+0x4e>
 8003bb0:	685a      	ldr	r2, [r3, #4]
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4093      	lsls	r3, r2
 8003bb8:	604a      	str	r2, [r1, #4]
 8003bba:	608b      	str	r3, [r1, #8]
 8003bbc:	f000 ff00 	bl	80049c0 <_Bfree>
 8003bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	1e3b      	subs	r3, r7, #0
 8003bc8:	bfb7      	itett	lt
 8003bca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003bce:	2300      	movge	r3, #0
 8003bd0:	2201      	movlt	r2, #1
 8003bd2:	9303      	strlt	r3, [sp, #12]
 8003bd4:	bfa8      	it	ge
 8003bd6:	f8c8 3000 	strge.w	r3, [r8]
 8003bda:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003bde:	4bb6      	ldr	r3, [pc, #728]	; (8003eb8 <_dtoa_r+0x340>)
 8003be0:	bfb8      	it	lt
 8003be2:	f8c8 2000 	strlt.w	r2, [r8]
 8003be6:	ea33 0309 	bics.w	r3, r3, r9
 8003bea:	d11b      	bne.n	8003c24 <_dtoa_r+0xac>
 8003bec:	f242 730f 	movw	r3, #9999	; 0x270f
 8003bf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003bf8:	4333      	orrs	r3, r6
 8003bfa:	f000 8572 	beq.w	80046e2 <_dtoa_r+0xb6a>
 8003bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c00:	b963      	cbnz	r3, 8003c1c <_dtoa_r+0xa4>
 8003c02:	4bae      	ldr	r3, [pc, #696]	; (8003ebc <_dtoa_r+0x344>)
 8003c04:	e025      	b.n	8003c52 <_dtoa_r+0xda>
 8003c06:	4bae      	ldr	r3, [pc, #696]	; (8003ec0 <_dtoa_r+0x348>)
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	9800      	ldr	r0, [sp, #0]
 8003c12:	b015      	add	sp, #84	; 0x54
 8003c14:	ecbd 8b02 	vpop	{d8}
 8003c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1c:	4ba7      	ldr	r3, [pc, #668]	; (8003ebc <_dtoa_r+0x344>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	3303      	adds	r3, #3
 8003c22:	e7f3      	b.n	8003c0c <_dtoa_r+0x94>
 8003c24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	ec51 0b17 	vmov	r0, r1, d7
 8003c30:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003c34:	f7fd fb8c 	bl	8001350 <__aeabi_dcmpeq>
 8003c38:	4680      	mov	r8, r0
 8003c3a:	b160      	cbz	r0, 8003c56 <_dtoa_r+0xde>
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8549 	beq.w	80046dc <_dtoa_r+0xb64>
 8003c4a:	4b9e      	ldr	r3, [pc, #632]	; (8003ec4 <_dtoa_r+0x34c>)
 8003c4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	3b01      	subs	r3, #1
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	e7dc      	b.n	8003c10 <_dtoa_r+0x98>
 8003c56:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003c5a:	aa12      	add	r2, sp, #72	; 0x48
 8003c5c:	a913      	add	r1, sp, #76	; 0x4c
 8003c5e:	4620      	mov	r0, r4
 8003c60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8003c64:	f001 f93c 	bl	8004ee0 <__d2b>
 8003c68:	4682      	mov	sl, r0
 8003c6a:	2d00      	cmp	r5, #0
 8003c6c:	d07c      	beq.n	8003d68 <_dtoa_r+0x1f0>
 8003c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c70:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003c74:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c7c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8003c80:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003c84:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4b8f      	ldr	r3, [pc, #572]	; (8003ec8 <_dtoa_r+0x350>)
 8003c8c:	4630      	mov	r0, r6
 8003c8e:	4639      	mov	r1, r7
 8003c90:	f7fc ff3e 	bl	8000b10 <__aeabi_dsub>
 8003c94:	a382      	add	r3, pc, #520	; (adr r3, 8003ea0 <_dtoa_r+0x328>)
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f7fd f8f1 	bl	8000e80 <__aeabi_dmul>
 8003c9e:	a382      	add	r3, pc, #520	; (adr r3, 8003ea8 <_dtoa_r+0x330>)
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f7fc ff36 	bl	8000b14 <__adddf3>
 8003ca8:	4606      	mov	r6, r0
 8003caa:	460f      	mov	r7, r1
 8003cac:	4628      	mov	r0, r5
 8003cae:	f7fd f87d 	bl	8000dac <__aeabi_i2d>
 8003cb2:	a37f      	add	r3, pc, #508	; (adr r3, 8003eb0 <_dtoa_r+0x338>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fd f8e2 	bl	8000e80 <__aeabi_dmul>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	4639      	mov	r1, r7
 8003cc4:	f7fc ff26 	bl	8000b14 <__adddf3>
 8003cc8:	4606      	mov	r6, r0
 8003cca:	460f      	mov	r7, r1
 8003ccc:	f7fd fb88 	bl	80013e0 <__aeabi_d2iz>
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	4681      	mov	r9, r0
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	4639      	mov	r1, r7
 8003cda:	f7fd fb43 	bl	8001364 <__aeabi_dcmplt>
 8003cde:	b148      	cbz	r0, 8003cf4 <_dtoa_r+0x17c>
 8003ce0:	4648      	mov	r0, r9
 8003ce2:	f7fd f863 	bl	8000dac <__aeabi_i2d>
 8003ce6:	4632      	mov	r2, r6
 8003ce8:	463b      	mov	r3, r7
 8003cea:	f7fd fb31 	bl	8001350 <__aeabi_dcmpeq>
 8003cee:	b908      	cbnz	r0, 8003cf4 <_dtoa_r+0x17c>
 8003cf0:	f109 39ff 	add.w	r9, r9, #4294967295
 8003cf4:	f1b9 0f16 	cmp.w	r9, #22
 8003cf8:	d855      	bhi.n	8003da6 <_dtoa_r+0x22e>
 8003cfa:	4b74      	ldr	r3, [pc, #464]	; (8003ecc <_dtoa_r+0x354>)
 8003cfc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003d00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f7fd fb2c 	bl	8001364 <__aeabi_dcmplt>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d04c      	beq.n	8003daa <_dtoa_r+0x232>
 8003d10:	f109 39ff 	add.w	r9, r9, #4294967295
 8003d14:	2300      	movs	r3, #0
 8003d16:	930e      	str	r3, [sp, #56]	; 0x38
 8003d18:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d1a:	1b5d      	subs	r5, r3, r5
 8003d1c:	1e6b      	subs	r3, r5, #1
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	bf45      	ittet	mi
 8003d22:	2300      	movmi	r3, #0
 8003d24:	f1c5 0801 	rsbmi	r8, r5, #1
 8003d28:	f04f 0800 	movpl.w	r8, #0
 8003d2c:	9304      	strmi	r3, [sp, #16]
 8003d2e:	f1b9 0f00 	cmp.w	r9, #0
 8003d32:	db3c      	blt.n	8003dae <_dtoa_r+0x236>
 8003d34:	9b04      	ldr	r3, [sp, #16]
 8003d36:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8003d3a:	444b      	add	r3, r9
 8003d3c:	9304      	str	r3, [sp, #16]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9306      	str	r3, [sp, #24]
 8003d42:	9b05      	ldr	r3, [sp, #20]
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	f200 8099 	bhi.w	8003e7c <_dtoa_r+0x304>
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	bfc5      	ittet	gt
 8003d4e:	3b04      	subgt	r3, #4
 8003d50:	2500      	movgt	r5, #0
 8003d52:	2501      	movle	r5, #1
 8003d54:	9305      	strgt	r3, [sp, #20]
 8003d56:	9b05      	ldr	r3, [sp, #20]
 8003d58:	3b02      	subs	r3, #2
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	f200 809a 	bhi.w	8003e94 <_dtoa_r+0x31c>
 8003d60:	e8df f003 	tbb	[pc, r3]
 8003d64:	8a7c7e2d 	.word	0x8a7c7e2d
 8003d68:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003d6c:	441d      	add	r5, r3
 8003d6e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003d72:	2b20      	cmp	r3, #32
 8003d74:	bfc6      	itte	gt
 8003d76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003d7a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003d7e:	f1c3 0320 	rsble	r3, r3, #32
 8003d82:	f105 35ff 	add.w	r5, r5, #4294967295
 8003d86:	bfc5      	ittet	gt
 8003d88:	fa09 f303 	lslgt.w	r3, r9, r3
 8003d8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003d90:	fa06 f003 	lslle.w	r0, r6, r3
 8003d94:	4318      	orrgt	r0, r3
 8003d96:	f7fc fff9 	bl	8000d8c <__aeabi_ui2d>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	4606      	mov	r6, r0
 8003d9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003da2:	9310      	str	r3, [sp, #64]	; 0x40
 8003da4:	e770      	b.n	8003c88 <_dtoa_r+0x110>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e7b5      	b.n	8003d16 <_dtoa_r+0x19e>
 8003daa:	900e      	str	r0, [sp, #56]	; 0x38
 8003dac:	e7b4      	b.n	8003d18 <_dtoa_r+0x1a0>
 8003dae:	f1c9 0300 	rsb	r3, r9, #0
 8003db2:	eba8 0809 	sub.w	r8, r8, r9
 8003db6:	9306      	str	r3, [sp, #24]
 8003db8:	2300      	movs	r3, #0
 8003dba:	930d      	str	r3, [sp, #52]	; 0x34
 8003dbc:	e7c1      	b.n	8003d42 <_dtoa_r+0x1ca>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9308      	str	r3, [sp, #32]
 8003dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f300 8085 	bgt.w	8003ed4 <_dtoa_r+0x35c>
 8003dca:	f04f 0b01 	mov.w	fp, #1
 8003dce:	465b      	mov	r3, fp
 8003dd0:	f8cd b004 	str.w	fp, [sp, #4]
 8003dd4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8003dd8:	2200      	movs	r2, #0
 8003dda:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003ddc:	6072      	str	r2, [r6, #4]
 8003dde:	2204      	movs	r2, #4
 8003de0:	f102 0014 	add.w	r0, r2, #20
 8003de4:	6871      	ldr	r1, [r6, #4]
 8003de6:	4298      	cmp	r0, r3
 8003de8:	d97a      	bls.n	8003ee0 <_dtoa_r+0x368>
 8003dea:	4620      	mov	r0, r4
 8003dec:	f000 fdb4 	bl	8004958 <_Balloc>
 8003df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003df2:	6030      	str	r0, [r6, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	9b01      	ldr	r3, [sp, #4]
 8003dfa:	2b0e      	cmp	r3, #14
 8003dfc:	f200 80f5 	bhi.w	8003fea <_dtoa_r+0x472>
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	f000 80f2 	beq.w	8003fea <_dtoa_r+0x472>
 8003e06:	f1b9 0f00 	cmp.w	r9, #0
 8003e0a:	dd7d      	ble.n	8003f08 <_dtoa_r+0x390>
 8003e0c:	f009 030f 	and.w	r3, r9, #15
 8003e10:	4a2e      	ldr	r2, [pc, #184]	; (8003ecc <_dtoa_r+0x354>)
 8003e12:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003e16:	ea4f 1729 	mov.w	r7, r9, asr #4
 8003e1a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003e1e:	ed93 7b00 	vldr	d7, [r3]
 8003e22:	eeb0 8a47 	vmov.f32	s16, s14
 8003e26:	eef0 8a67 	vmov.f32	s17, s15
 8003e2a:	d05d      	beq.n	8003ee8 <_dtoa_r+0x370>
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <_dtoa_r+0x358>)
 8003e2e:	f007 070f 	and.w	r7, r7, #15
 8003e32:	2503      	movs	r5, #3
 8003e34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003e38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e3c:	f7fd f94a 	bl	80010d4 <__aeabi_ddiv>
 8003e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e44:	4e22      	ldr	r6, [pc, #136]	; (8003ed0 <_dtoa_r+0x358>)
 8003e46:	2f00      	cmp	r7, #0
 8003e48:	d150      	bne.n	8003eec <_dtoa_r+0x374>
 8003e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e4e:	ec53 2b18 	vmov	r2, r3, d8
 8003e52:	f7fd f93f 	bl	80010d4 <__aeabi_ddiv>
 8003e56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e5a:	e06f      	b.n	8003f3c <_dtoa_r+0x3c4>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e7af      	b.n	8003dc0 <_dtoa_r+0x248>
 8003e60:	2300      	movs	r3, #0
 8003e62:	9308      	str	r3, [sp, #32]
 8003e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e66:	eb09 0b03 	add.w	fp, r9, r3
 8003e6a:	f10b 0301 	add.w	r3, fp, #1
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	bfb8      	it	lt
 8003e74:	2301      	movlt	r3, #1
 8003e76:	e7af      	b.n	8003dd8 <_dtoa_r+0x260>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e7f2      	b.n	8003e62 <_dtoa_r+0x2ea>
 8003e7c:	2501      	movs	r5, #1
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9508      	str	r5, [sp, #32]
 8003e82:	9305      	str	r3, [sp, #20]
 8003e84:	f04f 3bff 	mov.w	fp, #4294967295
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2312      	movs	r3, #18
 8003e8c:	f8cd b004 	str.w	fp, [sp, #4]
 8003e90:	9209      	str	r2, [sp, #36]	; 0x24
 8003e92:	e7a1      	b.n	8003dd8 <_dtoa_r+0x260>
 8003e94:	2301      	movs	r3, #1
 8003e96:	9308      	str	r3, [sp, #32]
 8003e98:	e7f4      	b.n	8003e84 <_dtoa_r+0x30c>
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w
 8003ea0:	636f4361 	.word	0x636f4361
 8003ea4:	3fd287a7 	.word	0x3fd287a7
 8003ea8:	8b60c8b3 	.word	0x8b60c8b3
 8003eac:	3fc68a28 	.word	0x3fc68a28
 8003eb0:	509f79fb 	.word	0x509f79fb
 8003eb4:	3fd34413 	.word	0x3fd34413
 8003eb8:	7ff00000 	.word	0x7ff00000
 8003ebc:	08005e61 	.word	0x08005e61
 8003ec0:	08005e58 	.word	0x08005e58
 8003ec4:	08005e35 	.word	0x08005e35
 8003ec8:	3ff80000 	.word	0x3ff80000
 8003ecc:	08005ef0 	.word	0x08005ef0
 8003ed0:	08005ec8 	.word	0x08005ec8
 8003ed4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8003ed8:	465b      	mov	r3, fp
 8003eda:	f8cd b004 	str.w	fp, [sp, #4]
 8003ede:	e77b      	b.n	8003dd8 <_dtoa_r+0x260>
 8003ee0:	3101      	adds	r1, #1
 8003ee2:	0052      	lsls	r2, r2, #1
 8003ee4:	6071      	str	r1, [r6, #4]
 8003ee6:	e77b      	b.n	8003de0 <_dtoa_r+0x268>
 8003ee8:	2502      	movs	r5, #2
 8003eea:	e7ab      	b.n	8003e44 <_dtoa_r+0x2cc>
 8003eec:	07f9      	lsls	r1, r7, #31
 8003eee:	d508      	bpl.n	8003f02 <_dtoa_r+0x38a>
 8003ef0:	3501      	adds	r5, #1
 8003ef2:	ec51 0b18 	vmov	r0, r1, d8
 8003ef6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003efa:	f7fc ffc1 	bl	8000e80 <__aeabi_dmul>
 8003efe:	ec41 0b18 	vmov	d8, r0, r1
 8003f02:	107f      	asrs	r7, r7, #1
 8003f04:	3608      	adds	r6, #8
 8003f06:	e79e      	b.n	8003e46 <_dtoa_r+0x2ce>
 8003f08:	f000 80ab 	beq.w	8004062 <_dtoa_r+0x4ea>
 8003f0c:	f1c9 0600 	rsb	r6, r9, #0
 8003f10:	4baa      	ldr	r3, [pc, #680]	; (80041bc <_dtoa_r+0x644>)
 8003f12:	4fab      	ldr	r7, [pc, #684]	; (80041c0 <_dtoa_r+0x648>)
 8003f14:	2502      	movs	r5, #2
 8003f16:	f006 020f 	and.w	r2, r6, #15
 8003f1a:	1136      	asrs	r6, r6, #4
 8003f1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f7fc ffaa 	bl	8000e80 <__aeabi_dmul>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f32:	2e00      	cmp	r6, #0
 8003f34:	f040 808a 	bne.w	800404c <_dtoa_r+0x4d4>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d18c      	bne.n	8003e56 <_dtoa_r+0x2de>
 8003f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8091 	beq.w	8004066 <_dtoa_r+0x4ee>
 8003f44:	2200      	movs	r2, #0
 8003f46:	4b9f      	ldr	r3, [pc, #636]	; (80041c4 <_dtoa_r+0x64c>)
 8003f48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	4639      	mov	r1, r7
 8003f50:	f7fd fa08 	bl	8001364 <__aeabi_dcmplt>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	f000 8086 	beq.w	8004066 <_dtoa_r+0x4ee>
 8003f5a:	9b01      	ldr	r3, [sp, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8082 	beq.w	8004066 <_dtoa_r+0x4ee>
 8003f62:	f1bb 0f00 	cmp.w	fp, #0
 8003f66:	dd3c      	ble.n	8003fe2 <_dtoa_r+0x46a>
 8003f68:	f109 33ff 	add.w	r3, r9, #4294967295
 8003f6c:	3501      	adds	r5, #1
 8003f6e:	2200      	movs	r2, #0
 8003f70:	4630      	mov	r0, r6
 8003f72:	9307      	str	r3, [sp, #28]
 8003f74:	4639      	mov	r1, r7
 8003f76:	4b94      	ldr	r3, [pc, #592]	; (80041c8 <_dtoa_r+0x650>)
 8003f78:	f7fc ff82 	bl	8000e80 <__aeabi_dmul>
 8003f7c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f88:	4628      	mov	r0, r5
 8003f8a:	f7fc ff0f 	bl	8000dac <__aeabi_i2d>
 8003f8e:	4632      	mov	r2, r6
 8003f90:	463b      	mov	r3, r7
 8003f92:	f7fc ff75 	bl	8000e80 <__aeabi_dmul>
 8003f96:	4b8d      	ldr	r3, [pc, #564]	; (80041cc <_dtoa_r+0x654>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f7fc fdbb 	bl	8000b14 <__adddf3>
 8003f9e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fa6:	9303      	str	r3, [sp, #12]
 8003fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d160      	bne.n	8004070 <_dtoa_r+0x4f8>
 8003fae:	2200      	movs	r2, #0
 8003fb0:	4b87      	ldr	r3, [pc, #540]	; (80041d0 <_dtoa_r+0x658>)
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	4639      	mov	r1, r7
 8003fb6:	f7fc fdab 	bl	8000b10 <__aeabi_dsub>
 8003fba:	4606      	mov	r6, r0
 8003fbc:	460f      	mov	r7, r1
 8003fbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003fc2:	f7fd f9ed 	bl	80013a0 <__aeabi_dcmpgt>
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	f040 8297 	bne.w	80044fa <_dtoa_r+0x982>
 8003fcc:	4630      	mov	r0, r6
 8003fce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003fd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003fd6:	4639      	mov	r1, r7
 8003fd8:	f7fd f9c4 	bl	8001364 <__aeabi_dcmplt>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	f040 8289 	bne.w	80044f4 <_dtoa_r+0x97c>
 8003fe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f2c0 815b 	blt.w	80042a8 <_dtoa_r+0x730>
 8003ff2:	f1b9 0f0e 	cmp.w	r9, #14
 8003ff6:	f300 8157 	bgt.w	80042a8 <_dtoa_r+0x730>
 8003ffa:	4b70      	ldr	r3, [pc, #448]	; (80041bc <_dtoa_r+0x644>)
 8003ffc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004000:	ed93 7b00 	vldr	d7, [r3]
 8004004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004006:	2b00      	cmp	r3, #0
 8004008:	eeb0 8a47 	vmov.f32	s16, s14
 800400c:	eef0 8a67 	vmov.f32	s17, s15
 8004010:	f280 80e2 	bge.w	80041d8 <_dtoa_r+0x660>
 8004014:	9b01      	ldr	r3, [sp, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f300 80de 	bgt.w	80041d8 <_dtoa_r+0x660>
 800401c:	f040 826a 	bne.w	80044f4 <_dtoa_r+0x97c>
 8004020:	2200      	movs	r2, #0
 8004022:	4b6b      	ldr	r3, [pc, #428]	; (80041d0 <_dtoa_r+0x658>)
 8004024:	ec51 0b17 	vmov	r0, r1, d7
 8004028:	f7fc ff2a 	bl	8000e80 <__aeabi_dmul>
 800402c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004030:	f7fd f9ac 	bl	800138c <__aeabi_dcmpge>
 8004034:	9e01      	ldr	r6, [sp, #4]
 8004036:	4637      	mov	r7, r6
 8004038:	2800      	cmp	r0, #0
 800403a:	f040 8240 	bne.w	80044be <_dtoa_r+0x946>
 800403e:	9d00      	ldr	r5, [sp, #0]
 8004040:	2331      	movs	r3, #49	; 0x31
 8004042:	f109 0901 	add.w	r9, r9, #1
 8004046:	f805 3b01 	strb.w	r3, [r5], #1
 800404a:	e23c      	b.n	80044c6 <_dtoa_r+0x94e>
 800404c:	07f2      	lsls	r2, r6, #31
 800404e:	d505      	bpl.n	800405c <_dtoa_r+0x4e4>
 8004050:	3501      	adds	r5, #1
 8004052:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004056:	f7fc ff13 	bl	8000e80 <__aeabi_dmul>
 800405a:	2301      	movs	r3, #1
 800405c:	1076      	asrs	r6, r6, #1
 800405e:	3708      	adds	r7, #8
 8004060:	e767      	b.n	8003f32 <_dtoa_r+0x3ba>
 8004062:	2502      	movs	r5, #2
 8004064:	e76a      	b.n	8003f3c <_dtoa_r+0x3c4>
 8004066:	9b01      	ldr	r3, [sp, #4]
 8004068:	f8cd 901c 	str.w	r9, [sp, #28]
 800406c:	930c      	str	r3, [sp, #48]	; 0x30
 800406e:	e789      	b.n	8003f84 <_dtoa_r+0x40c>
 8004070:	9900      	ldr	r1, [sp, #0]
 8004072:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004074:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004076:	4401      	add	r1, r0
 8004078:	4b50      	ldr	r3, [pc, #320]	; (80041bc <_dtoa_r+0x644>)
 800407a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800407e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004082:	9102      	str	r1, [sp, #8]
 8004084:	9908      	ldr	r1, [sp, #32]
 8004086:	eeb0 8a47 	vmov.f32	s16, s14
 800408a:	eef0 8a67 	vmov.f32	s17, s15
 800408e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004092:	2900      	cmp	r1, #0
 8004094:	d045      	beq.n	8004122 <_dtoa_r+0x5aa>
 8004096:	2000      	movs	r0, #0
 8004098:	494e      	ldr	r1, [pc, #312]	; (80041d4 <_dtoa_r+0x65c>)
 800409a:	f7fd f81b 	bl	80010d4 <__aeabi_ddiv>
 800409e:	ec53 2b18 	vmov	r2, r3, d8
 80040a2:	f7fc fd35 	bl	8000b10 <__aeabi_dsub>
 80040a6:	9d00      	ldr	r5, [sp, #0]
 80040a8:	ec41 0b18 	vmov	d8, r0, r1
 80040ac:	4639      	mov	r1, r7
 80040ae:	4630      	mov	r0, r6
 80040b0:	f7fd f996 	bl	80013e0 <__aeabi_d2iz>
 80040b4:	900c      	str	r0, [sp, #48]	; 0x30
 80040b6:	f7fc fe79 	bl	8000dac <__aeabi_i2d>
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	4630      	mov	r0, r6
 80040c0:	4639      	mov	r1, r7
 80040c2:	f7fc fd25 	bl	8000b10 <__aeabi_dsub>
 80040c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80040c8:	4606      	mov	r6, r0
 80040ca:	460f      	mov	r7, r1
 80040cc:	3330      	adds	r3, #48	; 0x30
 80040ce:	f805 3b01 	strb.w	r3, [r5], #1
 80040d2:	ec53 2b18 	vmov	r2, r3, d8
 80040d6:	f7fd f945 	bl	8001364 <__aeabi_dcmplt>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d164      	bne.n	80041a8 <_dtoa_r+0x630>
 80040de:	4632      	mov	r2, r6
 80040e0:	463b      	mov	r3, r7
 80040e2:	2000      	movs	r0, #0
 80040e4:	4937      	ldr	r1, [pc, #220]	; (80041c4 <_dtoa_r+0x64c>)
 80040e6:	f7fc fd13 	bl	8000b10 <__aeabi_dsub>
 80040ea:	ec53 2b18 	vmov	r2, r3, d8
 80040ee:	f7fd f939 	bl	8001364 <__aeabi_dcmplt>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	f040 80b8 	bne.w	8004268 <_dtoa_r+0x6f0>
 80040f8:	9b02      	ldr	r3, [sp, #8]
 80040fa:	429d      	cmp	r5, r3
 80040fc:	f43f af71 	beq.w	8003fe2 <_dtoa_r+0x46a>
 8004100:	2200      	movs	r2, #0
 8004102:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <_dtoa_r+0x650>)
 8004104:	ec51 0b18 	vmov	r0, r1, d8
 8004108:	f7fc feba 	bl	8000e80 <__aeabi_dmul>
 800410c:	2200      	movs	r2, #0
 800410e:	4b2e      	ldr	r3, [pc, #184]	; (80041c8 <_dtoa_r+0x650>)
 8004110:	ec41 0b18 	vmov	d8, r0, r1
 8004114:	4630      	mov	r0, r6
 8004116:	4639      	mov	r1, r7
 8004118:	f7fc feb2 	bl	8000e80 <__aeabi_dmul>
 800411c:	4606      	mov	r6, r0
 800411e:	460f      	mov	r7, r1
 8004120:	e7c4      	b.n	80040ac <_dtoa_r+0x534>
 8004122:	ec51 0b17 	vmov	r0, r1, d7
 8004126:	f7fc feab 	bl	8000e80 <__aeabi_dmul>
 800412a:	9b02      	ldr	r3, [sp, #8]
 800412c:	9d00      	ldr	r5, [sp, #0]
 800412e:	930c      	str	r3, [sp, #48]	; 0x30
 8004130:	ec41 0b18 	vmov	d8, r0, r1
 8004134:	4639      	mov	r1, r7
 8004136:	4630      	mov	r0, r6
 8004138:	f7fd f952 	bl	80013e0 <__aeabi_d2iz>
 800413c:	9011      	str	r0, [sp, #68]	; 0x44
 800413e:	f7fc fe35 	bl	8000dac <__aeabi_i2d>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4630      	mov	r0, r6
 8004148:	4639      	mov	r1, r7
 800414a:	f7fc fce1 	bl	8000b10 <__aeabi_dsub>
 800414e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004150:	4606      	mov	r6, r0
 8004152:	460f      	mov	r7, r1
 8004154:	3330      	adds	r3, #48	; 0x30
 8004156:	2200      	movs	r2, #0
 8004158:	f805 3b01 	strb.w	r3, [r5], #1
 800415c:	9b02      	ldr	r3, [sp, #8]
 800415e:	429d      	cmp	r5, r3
 8004160:	d125      	bne.n	80041ae <_dtoa_r+0x636>
 8004162:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <_dtoa_r+0x65c>)
 8004164:	ec51 0b18 	vmov	r0, r1, d8
 8004168:	f7fc fcd4 	bl	8000b14 <__adddf3>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4630      	mov	r0, r6
 8004172:	4639      	mov	r1, r7
 8004174:	f7fd f914 	bl	80013a0 <__aeabi_dcmpgt>
 8004178:	2800      	cmp	r0, #0
 800417a:	d175      	bne.n	8004268 <_dtoa_r+0x6f0>
 800417c:	2000      	movs	r0, #0
 800417e:	4915      	ldr	r1, [pc, #84]	; (80041d4 <_dtoa_r+0x65c>)
 8004180:	ec53 2b18 	vmov	r2, r3, d8
 8004184:	f7fc fcc4 	bl	8000b10 <__aeabi_dsub>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4630      	mov	r0, r6
 800418e:	4639      	mov	r1, r7
 8004190:	f7fd f8e8 	bl	8001364 <__aeabi_dcmplt>
 8004194:	2800      	cmp	r0, #0
 8004196:	f43f af24 	beq.w	8003fe2 <_dtoa_r+0x46a>
 800419a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800419c:	1e6b      	subs	r3, r5, #1
 800419e:	930c      	str	r3, [sp, #48]	; 0x30
 80041a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80041a4:	2b30      	cmp	r3, #48	; 0x30
 80041a6:	d0f8      	beq.n	800419a <_dtoa_r+0x622>
 80041a8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80041ac:	e04a      	b.n	8004244 <_dtoa_r+0x6cc>
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <_dtoa_r+0x650>)
 80041b0:	f7fc fe66 	bl	8000e80 <__aeabi_dmul>
 80041b4:	4606      	mov	r6, r0
 80041b6:	460f      	mov	r7, r1
 80041b8:	e7bc      	b.n	8004134 <_dtoa_r+0x5bc>
 80041ba:	bf00      	nop
 80041bc:	08005ef0 	.word	0x08005ef0
 80041c0:	08005ec8 	.word	0x08005ec8
 80041c4:	3ff00000 	.word	0x3ff00000
 80041c8:	40240000 	.word	0x40240000
 80041cc:	401c0000 	.word	0x401c0000
 80041d0:	40140000 	.word	0x40140000
 80041d4:	3fe00000 	.word	0x3fe00000
 80041d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80041dc:	9d00      	ldr	r5, [sp, #0]
 80041de:	4630      	mov	r0, r6
 80041e0:	4639      	mov	r1, r7
 80041e2:	ec53 2b18 	vmov	r2, r3, d8
 80041e6:	f7fc ff75 	bl	80010d4 <__aeabi_ddiv>
 80041ea:	f7fd f8f9 	bl	80013e0 <__aeabi_d2iz>
 80041ee:	4680      	mov	r8, r0
 80041f0:	f7fc fddc 	bl	8000dac <__aeabi_i2d>
 80041f4:	ec53 2b18 	vmov	r2, r3, d8
 80041f8:	f7fc fe42 	bl	8000e80 <__aeabi_dmul>
 80041fc:	4602      	mov	r2, r0
 80041fe:	4630      	mov	r0, r6
 8004200:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004204:	460b      	mov	r3, r1
 8004206:	4639      	mov	r1, r7
 8004208:	f7fc fc82 	bl	8000b10 <__aeabi_dsub>
 800420c:	f805 6b01 	strb.w	r6, [r5], #1
 8004210:	9e00      	ldr	r6, [sp, #0]
 8004212:	4602      	mov	r2, r0
 8004214:	9f01      	ldr	r7, [sp, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	1bae      	subs	r6, r5, r6
 800421a:	42b7      	cmp	r7, r6
 800421c:	d137      	bne.n	800428e <_dtoa_r+0x716>
 800421e:	f7fc fc79 	bl	8000b14 <__adddf3>
 8004222:	4606      	mov	r6, r0
 8004224:	460f      	mov	r7, r1
 8004226:	ec53 2b18 	vmov	r2, r3, d8
 800422a:	f7fd f8b9 	bl	80013a0 <__aeabi_dcmpgt>
 800422e:	b9c8      	cbnz	r0, 8004264 <_dtoa_r+0x6ec>
 8004230:	4630      	mov	r0, r6
 8004232:	4639      	mov	r1, r7
 8004234:	ec53 2b18 	vmov	r2, r3, d8
 8004238:	f7fd f88a 	bl	8001350 <__aeabi_dcmpeq>
 800423c:	b110      	cbz	r0, 8004244 <_dtoa_r+0x6cc>
 800423e:	f018 0f01 	tst.w	r8, #1
 8004242:	d10f      	bne.n	8004264 <_dtoa_r+0x6ec>
 8004244:	4620      	mov	r0, r4
 8004246:	4651      	mov	r1, sl
 8004248:	f000 fbba 	bl	80049c0 <_Bfree>
 800424c:	2300      	movs	r3, #0
 800424e:	f109 0001 	add.w	r0, r9, #1
 8004252:	702b      	strb	r3, [r5, #0]
 8004254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004256:	6018      	str	r0, [r3, #0]
 8004258:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800425a:	2b00      	cmp	r3, #0
 800425c:	f43f acd8 	beq.w	8003c10 <_dtoa_r+0x98>
 8004260:	601d      	str	r5, [r3, #0]
 8004262:	e4d5      	b.n	8003c10 <_dtoa_r+0x98>
 8004264:	f8cd 901c 	str.w	r9, [sp, #28]
 8004268:	462b      	mov	r3, r5
 800426a:	461d      	mov	r5, r3
 800426c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004270:	2a39      	cmp	r2, #57	; 0x39
 8004272:	d108      	bne.n	8004286 <_dtoa_r+0x70e>
 8004274:	9a00      	ldr	r2, [sp, #0]
 8004276:	429a      	cmp	r2, r3
 8004278:	d1f7      	bne.n	800426a <_dtoa_r+0x6f2>
 800427a:	9a07      	ldr	r2, [sp, #28]
 800427c:	9900      	ldr	r1, [sp, #0]
 800427e:	3201      	adds	r2, #1
 8004280:	9207      	str	r2, [sp, #28]
 8004282:	2230      	movs	r2, #48	; 0x30
 8004284:	700a      	strb	r2, [r1, #0]
 8004286:	781a      	ldrb	r2, [r3, #0]
 8004288:	3201      	adds	r2, #1
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e78c      	b.n	80041a8 <_dtoa_r+0x630>
 800428e:	2200      	movs	r2, #0
 8004290:	4b9c      	ldr	r3, [pc, #624]	; (8004504 <_dtoa_r+0x98c>)
 8004292:	f7fc fdf5 	bl	8000e80 <__aeabi_dmul>
 8004296:	2200      	movs	r2, #0
 8004298:	2300      	movs	r3, #0
 800429a:	4606      	mov	r6, r0
 800429c:	460f      	mov	r7, r1
 800429e:	f7fd f857 	bl	8001350 <__aeabi_dcmpeq>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d09b      	beq.n	80041de <_dtoa_r+0x666>
 80042a6:	e7cd      	b.n	8004244 <_dtoa_r+0x6cc>
 80042a8:	9a08      	ldr	r2, [sp, #32]
 80042aa:	2a00      	cmp	r2, #0
 80042ac:	f000 80c4 	beq.w	8004438 <_dtoa_r+0x8c0>
 80042b0:	9a05      	ldr	r2, [sp, #20]
 80042b2:	2a01      	cmp	r2, #1
 80042b4:	f300 80a9 	bgt.w	800440a <_dtoa_r+0x892>
 80042b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80042ba:	2a00      	cmp	r2, #0
 80042bc:	f000 80a1 	beq.w	8004402 <_dtoa_r+0x88a>
 80042c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80042c4:	9e06      	ldr	r6, [sp, #24]
 80042c6:	4645      	mov	r5, r8
 80042c8:	9a04      	ldr	r2, [sp, #16]
 80042ca:	2101      	movs	r1, #1
 80042cc:	4620      	mov	r0, r4
 80042ce:	4498      	add	r8, r3
 80042d0:	441a      	add	r2, r3
 80042d2:	9204      	str	r2, [sp, #16]
 80042d4:	f000 fc1a 	bl	8004b0c <__i2b>
 80042d8:	4607      	mov	r7, r0
 80042da:	2d00      	cmp	r5, #0
 80042dc:	dd0b      	ble.n	80042f6 <_dtoa_r+0x77e>
 80042de:	9b04      	ldr	r3, [sp, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	dd08      	ble.n	80042f6 <_dtoa_r+0x77e>
 80042e4:	42ab      	cmp	r3, r5
 80042e6:	9a04      	ldr	r2, [sp, #16]
 80042e8:	bfa8      	it	ge
 80042ea:	462b      	movge	r3, r5
 80042ec:	eba8 0803 	sub.w	r8, r8, r3
 80042f0:	1aed      	subs	r5, r5, r3
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	9304      	str	r3, [sp, #16]
 80042f6:	9b06      	ldr	r3, [sp, #24]
 80042f8:	b1fb      	cbz	r3, 800433a <_dtoa_r+0x7c2>
 80042fa:	9b08      	ldr	r3, [sp, #32]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 809f 	beq.w	8004440 <_dtoa_r+0x8c8>
 8004302:	2e00      	cmp	r6, #0
 8004304:	dd11      	ble.n	800432a <_dtoa_r+0x7b2>
 8004306:	4639      	mov	r1, r7
 8004308:	4632      	mov	r2, r6
 800430a:	4620      	mov	r0, r4
 800430c:	f000 fca2 	bl	8004c54 <__pow5mult>
 8004310:	4652      	mov	r2, sl
 8004312:	4601      	mov	r1, r0
 8004314:	4607      	mov	r7, r0
 8004316:	4620      	mov	r0, r4
 8004318:	f000 fc01 	bl	8004b1e <__multiply>
 800431c:	4651      	mov	r1, sl
 800431e:	9007      	str	r0, [sp, #28]
 8004320:	4620      	mov	r0, r4
 8004322:	f000 fb4d 	bl	80049c0 <_Bfree>
 8004326:	9b07      	ldr	r3, [sp, #28]
 8004328:	469a      	mov	sl, r3
 800432a:	9b06      	ldr	r3, [sp, #24]
 800432c:	1b9a      	subs	r2, r3, r6
 800432e:	d004      	beq.n	800433a <_dtoa_r+0x7c2>
 8004330:	4651      	mov	r1, sl
 8004332:	4620      	mov	r0, r4
 8004334:	f000 fc8e 	bl	8004c54 <__pow5mult>
 8004338:	4682      	mov	sl, r0
 800433a:	2101      	movs	r1, #1
 800433c:	4620      	mov	r0, r4
 800433e:	f000 fbe5 	bl	8004b0c <__i2b>
 8004342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004344:	4606      	mov	r6, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	dd7c      	ble.n	8004444 <_dtoa_r+0x8cc>
 800434a:	461a      	mov	r2, r3
 800434c:	4601      	mov	r1, r0
 800434e:	4620      	mov	r0, r4
 8004350:	f000 fc80 	bl	8004c54 <__pow5mult>
 8004354:	9b05      	ldr	r3, [sp, #20]
 8004356:	4606      	mov	r6, r0
 8004358:	2b01      	cmp	r3, #1
 800435a:	dd76      	ble.n	800444a <_dtoa_r+0x8d2>
 800435c:	2300      	movs	r3, #0
 800435e:	9306      	str	r3, [sp, #24]
 8004360:	6933      	ldr	r3, [r6, #16]
 8004362:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004366:	6918      	ldr	r0, [r3, #16]
 8004368:	f000 fb80 	bl	8004a6c <__hi0bits>
 800436c:	f1c0 0020 	rsb	r0, r0, #32
 8004370:	9b04      	ldr	r3, [sp, #16]
 8004372:	4418      	add	r0, r3
 8004374:	f010 001f 	ands.w	r0, r0, #31
 8004378:	f000 8086 	beq.w	8004488 <_dtoa_r+0x910>
 800437c:	f1c0 0320 	rsb	r3, r0, #32
 8004380:	2b04      	cmp	r3, #4
 8004382:	dd7f      	ble.n	8004484 <_dtoa_r+0x90c>
 8004384:	f1c0 001c 	rsb	r0, r0, #28
 8004388:	9b04      	ldr	r3, [sp, #16]
 800438a:	4480      	add	r8, r0
 800438c:	4405      	add	r5, r0
 800438e:	4403      	add	r3, r0
 8004390:	9304      	str	r3, [sp, #16]
 8004392:	f1b8 0f00 	cmp.w	r8, #0
 8004396:	dd05      	ble.n	80043a4 <_dtoa_r+0x82c>
 8004398:	4651      	mov	r1, sl
 800439a:	4642      	mov	r2, r8
 800439c:	4620      	mov	r0, r4
 800439e:	f000 fca7 	bl	8004cf0 <__lshift>
 80043a2:	4682      	mov	sl, r0
 80043a4:	9b04      	ldr	r3, [sp, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	dd05      	ble.n	80043b6 <_dtoa_r+0x83e>
 80043aa:	4631      	mov	r1, r6
 80043ac:	461a      	mov	r2, r3
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 fc9e 	bl	8004cf0 <__lshift>
 80043b4:	4606      	mov	r6, r0
 80043b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d067      	beq.n	800448c <_dtoa_r+0x914>
 80043bc:	4631      	mov	r1, r6
 80043be:	4650      	mov	r0, sl
 80043c0:	f000 fcf5 	bl	8004dae <__mcmp>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	da61      	bge.n	800448c <_dtoa_r+0x914>
 80043c8:	2300      	movs	r3, #0
 80043ca:	4651      	mov	r1, sl
 80043cc:	220a      	movs	r2, #10
 80043ce:	4620      	mov	r0, r4
 80043d0:	f000 fb0d 	bl	80049ee <__multadd>
 80043d4:	9b08      	ldr	r3, [sp, #32]
 80043d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80043da:	4682      	mov	sl, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8187 	beq.w	80046f0 <_dtoa_r+0xb78>
 80043e2:	4639      	mov	r1, r7
 80043e4:	2300      	movs	r3, #0
 80043e6:	220a      	movs	r2, #10
 80043e8:	4620      	mov	r0, r4
 80043ea:	f000 fb00 	bl	80049ee <__multadd>
 80043ee:	f1bb 0f00 	cmp.w	fp, #0
 80043f2:	4607      	mov	r7, r0
 80043f4:	f300 808e 	bgt.w	8004514 <_dtoa_r+0x99c>
 80043f8:	9b05      	ldr	r3, [sp, #20]
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	f340 808a 	ble.w	8004514 <_dtoa_r+0x99c>
 8004400:	e04c      	b.n	800449c <_dtoa_r+0x924>
 8004402:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004404:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004408:	e75c      	b.n	80042c4 <_dtoa_r+0x74c>
 800440a:	9b01      	ldr	r3, [sp, #4]
 800440c:	1e5e      	subs	r6, r3, #1
 800440e:	9b06      	ldr	r3, [sp, #24]
 8004410:	42b3      	cmp	r3, r6
 8004412:	bfb7      	itett	lt
 8004414:	9b06      	ldrlt	r3, [sp, #24]
 8004416:	1b9e      	subge	r6, r3, r6
 8004418:	9606      	strlt	r6, [sp, #24]
 800441a:	1af2      	sublt	r2, r6, r3
 800441c:	bfbf      	itttt	lt
 800441e:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8004420:	2600      	movlt	r6, #0
 8004422:	189b      	addlt	r3, r3, r2
 8004424:	930d      	strlt	r3, [sp, #52]	; 0x34
 8004426:	9b01      	ldr	r3, [sp, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	bfb5      	itete	lt
 800442c:	eba8 0503 	sublt.w	r5, r8, r3
 8004430:	4645      	movge	r5, r8
 8004432:	2300      	movlt	r3, #0
 8004434:	9b01      	ldrge	r3, [sp, #4]
 8004436:	e747      	b.n	80042c8 <_dtoa_r+0x750>
 8004438:	9e06      	ldr	r6, [sp, #24]
 800443a:	4645      	mov	r5, r8
 800443c:	9f08      	ldr	r7, [sp, #32]
 800443e:	e74c      	b.n	80042da <_dtoa_r+0x762>
 8004440:	9a06      	ldr	r2, [sp, #24]
 8004442:	e775      	b.n	8004330 <_dtoa_r+0x7b8>
 8004444:	9b05      	ldr	r3, [sp, #20]
 8004446:	2b01      	cmp	r3, #1
 8004448:	dc18      	bgt.n	800447c <_dtoa_r+0x904>
 800444a:	9b02      	ldr	r3, [sp, #8]
 800444c:	b9b3      	cbnz	r3, 800447c <_dtoa_r+0x904>
 800444e:	9b03      	ldr	r3, [sp, #12]
 8004450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004454:	b9a3      	cbnz	r3, 8004480 <_dtoa_r+0x908>
 8004456:	9b03      	ldr	r3, [sp, #12]
 8004458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800445c:	0d1b      	lsrs	r3, r3, #20
 800445e:	051b      	lsls	r3, r3, #20
 8004460:	b12b      	cbz	r3, 800446e <_dtoa_r+0x8f6>
 8004462:	9b04      	ldr	r3, [sp, #16]
 8004464:	f108 0801 	add.w	r8, r8, #1
 8004468:	3301      	adds	r3, #1
 800446a:	9304      	str	r3, [sp, #16]
 800446c:	2301      	movs	r3, #1
 800446e:	9306      	str	r3, [sp, #24]
 8004470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004472:	2b00      	cmp	r3, #0
 8004474:	f47f af74 	bne.w	8004360 <_dtoa_r+0x7e8>
 8004478:	2001      	movs	r0, #1
 800447a:	e779      	b.n	8004370 <_dtoa_r+0x7f8>
 800447c:	2300      	movs	r3, #0
 800447e:	e7f6      	b.n	800446e <_dtoa_r+0x8f6>
 8004480:	9b02      	ldr	r3, [sp, #8]
 8004482:	e7f4      	b.n	800446e <_dtoa_r+0x8f6>
 8004484:	d085      	beq.n	8004392 <_dtoa_r+0x81a>
 8004486:	4618      	mov	r0, r3
 8004488:	301c      	adds	r0, #28
 800448a:	e77d      	b.n	8004388 <_dtoa_r+0x810>
 800448c:	9b01      	ldr	r3, [sp, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	dc3a      	bgt.n	8004508 <_dtoa_r+0x990>
 8004492:	9b05      	ldr	r3, [sp, #20]
 8004494:	2b02      	cmp	r3, #2
 8004496:	dd37      	ble.n	8004508 <_dtoa_r+0x990>
 8004498:	f8dd b004 	ldr.w	fp, [sp, #4]
 800449c:	f1bb 0f00 	cmp.w	fp, #0
 80044a0:	d10d      	bne.n	80044be <_dtoa_r+0x946>
 80044a2:	4631      	mov	r1, r6
 80044a4:	465b      	mov	r3, fp
 80044a6:	2205      	movs	r2, #5
 80044a8:	4620      	mov	r0, r4
 80044aa:	f000 faa0 	bl	80049ee <__multadd>
 80044ae:	4601      	mov	r1, r0
 80044b0:	4606      	mov	r6, r0
 80044b2:	4650      	mov	r0, sl
 80044b4:	f000 fc7b 	bl	8004dae <__mcmp>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	f73f adc0 	bgt.w	800403e <_dtoa_r+0x4c6>
 80044be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c0:	9d00      	ldr	r5, [sp, #0]
 80044c2:	ea6f 0903 	mvn.w	r9, r3
 80044c6:	f04f 0800 	mov.w	r8, #0
 80044ca:	4631      	mov	r1, r6
 80044cc:	4620      	mov	r0, r4
 80044ce:	f000 fa77 	bl	80049c0 <_Bfree>
 80044d2:	2f00      	cmp	r7, #0
 80044d4:	f43f aeb6 	beq.w	8004244 <_dtoa_r+0x6cc>
 80044d8:	f1b8 0f00 	cmp.w	r8, #0
 80044dc:	d005      	beq.n	80044ea <_dtoa_r+0x972>
 80044de:	45b8      	cmp	r8, r7
 80044e0:	d003      	beq.n	80044ea <_dtoa_r+0x972>
 80044e2:	4641      	mov	r1, r8
 80044e4:	4620      	mov	r0, r4
 80044e6:	f000 fa6b 	bl	80049c0 <_Bfree>
 80044ea:	4639      	mov	r1, r7
 80044ec:	4620      	mov	r0, r4
 80044ee:	f000 fa67 	bl	80049c0 <_Bfree>
 80044f2:	e6a7      	b.n	8004244 <_dtoa_r+0x6cc>
 80044f4:	2600      	movs	r6, #0
 80044f6:	4637      	mov	r7, r6
 80044f8:	e7e1      	b.n	80044be <_dtoa_r+0x946>
 80044fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80044fc:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8004500:	4637      	mov	r7, r6
 8004502:	e59c      	b.n	800403e <_dtoa_r+0x4c6>
 8004504:	40240000 	.word	0x40240000
 8004508:	9b08      	ldr	r3, [sp, #32]
 800450a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 80f5 	beq.w	80046fe <_dtoa_r+0xb86>
 8004514:	2d00      	cmp	r5, #0
 8004516:	dd05      	ble.n	8004524 <_dtoa_r+0x9ac>
 8004518:	4639      	mov	r1, r7
 800451a:	462a      	mov	r2, r5
 800451c:	4620      	mov	r0, r4
 800451e:	f000 fbe7 	bl	8004cf0 <__lshift>
 8004522:	4607      	mov	r7, r0
 8004524:	9b06      	ldr	r3, [sp, #24]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d055      	beq.n	80045d6 <_dtoa_r+0xa5e>
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4620      	mov	r0, r4
 800452e:	f000 fa13 	bl	8004958 <_Balloc>
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4605      	mov	r5, r0
 8004536:	f107 010c 	add.w	r1, r7, #12
 800453a:	3202      	adds	r2, #2
 800453c:	300c      	adds	r0, #12
 800453e:	0092      	lsls	r2, r2, #2
 8004540:	f7fe fdee 	bl	8003120 <memcpy>
 8004544:	2201      	movs	r2, #1
 8004546:	4629      	mov	r1, r5
 8004548:	4620      	mov	r0, r4
 800454a:	f000 fbd1 	bl	8004cf0 <__lshift>
 800454e:	9b00      	ldr	r3, [sp, #0]
 8004550:	46b8      	mov	r8, r7
 8004552:	4607      	mov	r7, r0
 8004554:	3301      	adds	r3, #1
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	9b00      	ldr	r3, [sp, #0]
 800455a:	445b      	add	r3, fp
 800455c:	9307      	str	r3, [sp, #28]
 800455e:	9b02      	ldr	r3, [sp, #8]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	9306      	str	r3, [sp, #24]
 8004566:	9b01      	ldr	r3, [sp, #4]
 8004568:	4631      	mov	r1, r6
 800456a:	4650      	mov	r0, sl
 800456c:	f103 3bff 	add.w	fp, r3, #4294967295
 8004570:	f7ff fa70 	bl	8003a54 <quorem>
 8004574:	4603      	mov	r3, r0
 8004576:	4641      	mov	r1, r8
 8004578:	9002      	str	r0, [sp, #8]
 800457a:	4650      	mov	r0, sl
 800457c:	3330      	adds	r3, #48	; 0x30
 800457e:	9308      	str	r3, [sp, #32]
 8004580:	f000 fc15 	bl	8004dae <__mcmp>
 8004584:	463a      	mov	r2, r7
 8004586:	9004      	str	r0, [sp, #16]
 8004588:	4631      	mov	r1, r6
 800458a:	4620      	mov	r0, r4
 800458c:	f000 fc2b 	bl	8004de6 <__mdiff>
 8004590:	68c2      	ldr	r2, [r0, #12]
 8004592:	4605      	mov	r5, r0
 8004594:	9b08      	ldr	r3, [sp, #32]
 8004596:	bb02      	cbnz	r2, 80045da <_dtoa_r+0xa62>
 8004598:	4601      	mov	r1, r0
 800459a:	4650      	mov	r0, sl
 800459c:	f000 fc07 	bl	8004dae <__mcmp>
 80045a0:	9b08      	ldr	r3, [sp, #32]
 80045a2:	4602      	mov	r2, r0
 80045a4:	4629      	mov	r1, r5
 80045a6:	4620      	mov	r0, r4
 80045a8:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80045ac:	f000 fa08 	bl	80049c0 <_Bfree>
 80045b0:	9b05      	ldr	r3, [sp, #20]
 80045b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045b4:	9d01      	ldr	r5, [sp, #4]
 80045b6:	ea43 0102 	orr.w	r1, r3, r2
 80045ba:	9b06      	ldr	r3, [sp, #24]
 80045bc:	430b      	orrs	r3, r1
 80045be:	9b08      	ldr	r3, [sp, #32]
 80045c0:	d10d      	bne.n	80045de <_dtoa_r+0xa66>
 80045c2:	2b39      	cmp	r3, #57	; 0x39
 80045c4:	d027      	beq.n	8004616 <_dtoa_r+0xa9e>
 80045c6:	9a04      	ldr	r2, [sp, #16]
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	dd01      	ble.n	80045d0 <_dtoa_r+0xa58>
 80045cc:	9b02      	ldr	r3, [sp, #8]
 80045ce:	3331      	adds	r3, #49	; 0x31
 80045d0:	f88b 3000 	strb.w	r3, [fp]
 80045d4:	e779      	b.n	80044ca <_dtoa_r+0x952>
 80045d6:	4638      	mov	r0, r7
 80045d8:	e7b9      	b.n	800454e <_dtoa_r+0x9d6>
 80045da:	2201      	movs	r2, #1
 80045dc:	e7e2      	b.n	80045a4 <_dtoa_r+0xa2c>
 80045de:	9904      	ldr	r1, [sp, #16]
 80045e0:	2900      	cmp	r1, #0
 80045e2:	db04      	blt.n	80045ee <_dtoa_r+0xa76>
 80045e4:	9805      	ldr	r0, [sp, #20]
 80045e6:	4301      	orrs	r1, r0
 80045e8:	9806      	ldr	r0, [sp, #24]
 80045ea:	4301      	orrs	r1, r0
 80045ec:	d120      	bne.n	8004630 <_dtoa_r+0xab8>
 80045ee:	2a00      	cmp	r2, #0
 80045f0:	ddee      	ble.n	80045d0 <_dtoa_r+0xa58>
 80045f2:	4651      	mov	r1, sl
 80045f4:	2201      	movs	r2, #1
 80045f6:	4620      	mov	r0, r4
 80045f8:	9301      	str	r3, [sp, #4]
 80045fa:	f000 fb79 	bl	8004cf0 <__lshift>
 80045fe:	4631      	mov	r1, r6
 8004600:	4682      	mov	sl, r0
 8004602:	f000 fbd4 	bl	8004dae <__mcmp>
 8004606:	2800      	cmp	r0, #0
 8004608:	9b01      	ldr	r3, [sp, #4]
 800460a:	dc02      	bgt.n	8004612 <_dtoa_r+0xa9a>
 800460c:	d1e0      	bne.n	80045d0 <_dtoa_r+0xa58>
 800460e:	07da      	lsls	r2, r3, #31
 8004610:	d5de      	bpl.n	80045d0 <_dtoa_r+0xa58>
 8004612:	2b39      	cmp	r3, #57	; 0x39
 8004614:	d1da      	bne.n	80045cc <_dtoa_r+0xa54>
 8004616:	2339      	movs	r3, #57	; 0x39
 8004618:	f88b 3000 	strb.w	r3, [fp]
 800461c:	462b      	mov	r3, r5
 800461e:	461d      	mov	r5, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004626:	2a39      	cmp	r2, #57	; 0x39
 8004628:	d050      	beq.n	80046cc <_dtoa_r+0xb54>
 800462a:	3201      	adds	r2, #1
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	e74c      	b.n	80044ca <_dtoa_r+0x952>
 8004630:	2a00      	cmp	r2, #0
 8004632:	dd03      	ble.n	800463c <_dtoa_r+0xac4>
 8004634:	2b39      	cmp	r3, #57	; 0x39
 8004636:	d0ee      	beq.n	8004616 <_dtoa_r+0xa9e>
 8004638:	3301      	adds	r3, #1
 800463a:	e7c9      	b.n	80045d0 <_dtoa_r+0xa58>
 800463c:	9a01      	ldr	r2, [sp, #4]
 800463e:	9907      	ldr	r1, [sp, #28]
 8004640:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004644:	428a      	cmp	r2, r1
 8004646:	d02a      	beq.n	800469e <_dtoa_r+0xb26>
 8004648:	4651      	mov	r1, sl
 800464a:	2300      	movs	r3, #0
 800464c:	220a      	movs	r2, #10
 800464e:	4620      	mov	r0, r4
 8004650:	f000 f9cd 	bl	80049ee <__multadd>
 8004654:	45b8      	cmp	r8, r7
 8004656:	4682      	mov	sl, r0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	f04f 020a 	mov.w	r2, #10
 8004660:	4641      	mov	r1, r8
 8004662:	4620      	mov	r0, r4
 8004664:	d107      	bne.n	8004676 <_dtoa_r+0xafe>
 8004666:	f000 f9c2 	bl	80049ee <__multadd>
 800466a:	4680      	mov	r8, r0
 800466c:	4607      	mov	r7, r0
 800466e:	9b01      	ldr	r3, [sp, #4]
 8004670:	3301      	adds	r3, #1
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	e777      	b.n	8004566 <_dtoa_r+0x9ee>
 8004676:	f000 f9ba 	bl	80049ee <__multadd>
 800467a:	4639      	mov	r1, r7
 800467c:	4680      	mov	r8, r0
 800467e:	2300      	movs	r3, #0
 8004680:	220a      	movs	r2, #10
 8004682:	4620      	mov	r0, r4
 8004684:	f000 f9b3 	bl	80049ee <__multadd>
 8004688:	4607      	mov	r7, r0
 800468a:	e7f0      	b.n	800466e <_dtoa_r+0xaf6>
 800468c:	f1bb 0f00 	cmp.w	fp, #0
 8004690:	9a00      	ldr	r2, [sp, #0]
 8004692:	f04f 0800 	mov.w	r8, #0
 8004696:	bfcc      	ite	gt
 8004698:	465d      	movgt	r5, fp
 800469a:	2501      	movle	r5, #1
 800469c:	4415      	add	r5, r2
 800469e:	4651      	mov	r1, sl
 80046a0:	2201      	movs	r2, #1
 80046a2:	4620      	mov	r0, r4
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	f000 fb23 	bl	8004cf0 <__lshift>
 80046aa:	4631      	mov	r1, r6
 80046ac:	4682      	mov	sl, r0
 80046ae:	f000 fb7e 	bl	8004dae <__mcmp>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	dcb2      	bgt.n	800461c <_dtoa_r+0xaa4>
 80046b6:	d102      	bne.n	80046be <_dtoa_r+0xb46>
 80046b8:	9b01      	ldr	r3, [sp, #4]
 80046ba:	07db      	lsls	r3, r3, #31
 80046bc:	d4ae      	bmi.n	800461c <_dtoa_r+0xaa4>
 80046be:	462b      	mov	r3, r5
 80046c0:	461d      	mov	r5, r3
 80046c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046c6:	2a30      	cmp	r2, #48	; 0x30
 80046c8:	d0fa      	beq.n	80046c0 <_dtoa_r+0xb48>
 80046ca:	e6fe      	b.n	80044ca <_dtoa_r+0x952>
 80046cc:	9a00      	ldr	r2, [sp, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d1a5      	bne.n	800461e <_dtoa_r+0xaa6>
 80046d2:	2331      	movs	r3, #49	; 0x31
 80046d4:	f109 0901 	add.w	r9, r9, #1
 80046d8:	7013      	strb	r3, [r2, #0]
 80046da:	e6f6      	b.n	80044ca <_dtoa_r+0x952>
 80046dc:	4b12      	ldr	r3, [pc, #72]	; (8004728 <_dtoa_r+0xbb0>)
 80046de:	f7ff bab8 	b.w	8003c52 <_dtoa_r+0xda>
 80046e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f47f aa8e 	bne.w	8003c06 <_dtoa_r+0x8e>
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <_dtoa_r+0xbb4>)
 80046ec:	f7ff bab1 	b.w	8003c52 <_dtoa_r+0xda>
 80046f0:	f1bb 0f00 	cmp.w	fp, #0
 80046f4:	dc03      	bgt.n	80046fe <_dtoa_r+0xb86>
 80046f6:	9b05      	ldr	r3, [sp, #20]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	f73f aecf 	bgt.w	800449c <_dtoa_r+0x924>
 80046fe:	9d00      	ldr	r5, [sp, #0]
 8004700:	4631      	mov	r1, r6
 8004702:	4650      	mov	r0, sl
 8004704:	f7ff f9a6 	bl	8003a54 <quorem>
 8004708:	9a00      	ldr	r2, [sp, #0]
 800470a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800470e:	f805 3b01 	strb.w	r3, [r5], #1
 8004712:	1aaa      	subs	r2, r5, r2
 8004714:	4593      	cmp	fp, r2
 8004716:	ddb9      	ble.n	800468c <_dtoa_r+0xb14>
 8004718:	4651      	mov	r1, sl
 800471a:	2300      	movs	r3, #0
 800471c:	220a      	movs	r2, #10
 800471e:	4620      	mov	r0, r4
 8004720:	f000 f965 	bl	80049ee <__multadd>
 8004724:	4682      	mov	sl, r0
 8004726:	e7eb      	b.n	8004700 <_dtoa_r+0xb88>
 8004728:	08005e34 	.word	0x08005e34
 800472c:	08005e58 	.word	0x08005e58

08004730 <std>:
 8004730:	2300      	movs	r3, #0
 8004732:	b510      	push	{r4, lr}
 8004734:	4604      	mov	r4, r0
 8004736:	6083      	str	r3, [r0, #8]
 8004738:	8181      	strh	r1, [r0, #12]
 800473a:	4619      	mov	r1, r3
 800473c:	6643      	str	r3, [r0, #100]	; 0x64
 800473e:	81c2      	strh	r2, [r0, #14]
 8004740:	2208      	movs	r2, #8
 8004742:	6183      	str	r3, [r0, #24]
 8004744:	e9c0 3300 	strd	r3, r3, [r0]
 8004748:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800474c:	305c      	adds	r0, #92	; 0x5c
 800474e:	f7fe fcf4 	bl	800313a <memset>
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <std+0x38>)
 8004754:	6224      	str	r4, [r4, #32]
 8004756:	6263      	str	r3, [r4, #36]	; 0x24
 8004758:	4b04      	ldr	r3, [pc, #16]	; (800476c <std+0x3c>)
 800475a:	62a3      	str	r3, [r4, #40]	; 0x28
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <std+0x40>)
 800475e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <std+0x44>)
 8004762:	6323      	str	r3, [r4, #48]	; 0x30
 8004764:	bd10      	pop	{r4, pc}
 8004766:	bf00      	nop
 8004768:	080053c9 	.word	0x080053c9
 800476c:	080053eb 	.word	0x080053eb
 8004770:	08005423 	.word	0x08005423
 8004774:	08005447 	.word	0x08005447

08004778 <_cleanup_r>:
 8004778:	4901      	ldr	r1, [pc, #4]	; (8004780 <_cleanup_r+0x8>)
 800477a:	f000 b8af 	b.w	80048dc <_fwalk_reent>
 800477e:	bf00      	nop
 8004780:	0800571d 	.word	0x0800571d

08004784 <__sfmoreglue>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	1e4a      	subs	r2, r1, #1
 8004788:	2568      	movs	r5, #104	; 0x68
 800478a:	460e      	mov	r6, r1
 800478c:	4355      	muls	r5, r2
 800478e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004792:	f000 fc55 	bl	8005040 <_malloc_r>
 8004796:	4604      	mov	r4, r0
 8004798:	b140      	cbz	r0, 80047ac <__sfmoreglue+0x28>
 800479a:	2100      	movs	r1, #0
 800479c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047a0:	e9c0 1600 	strd	r1, r6, [r0]
 80047a4:	300c      	adds	r0, #12
 80047a6:	60a0      	str	r0, [r4, #8]
 80047a8:	f7fe fcc7 	bl	800313a <memset>
 80047ac:	4620      	mov	r0, r4
 80047ae:	bd70      	pop	{r4, r5, r6, pc}

080047b0 <__sfp_lock_acquire>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__sfp_lock_acquire+0x8>)
 80047b2:	f000 b8b8 	b.w	8004926 <__retarget_lock_acquire_recursive>
 80047b6:	bf00      	nop
 80047b8:	20001e04 	.word	0x20001e04

080047bc <__sfp_lock_release>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__sfp_lock_release+0x8>)
 80047be:	f000 b8b3 	b.w	8004928 <__retarget_lock_release_recursive>
 80047c2:	bf00      	nop
 80047c4:	20001e04 	.word	0x20001e04

080047c8 <__sinit_lock_acquire>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__sinit_lock_acquire+0x8>)
 80047ca:	f000 b8ac 	b.w	8004926 <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	20001dff 	.word	0x20001dff

080047d4 <__sinit_lock_release>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__sinit_lock_release+0x8>)
 80047d6:	f000 b8a7 	b.w	8004928 <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	20001dff 	.word	0x20001dff

080047e0 <__sinit>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	f7ff fff0 	bl	80047c8 <__sinit_lock_acquire>
 80047e8:	69a3      	ldr	r3, [r4, #24]
 80047ea:	b11b      	cbz	r3, 80047f4 <__sinit+0x14>
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f0:	f7ff bff0 	b.w	80047d4 <__sinit_lock_release>
 80047f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047f8:	6523      	str	r3, [r4, #80]	; 0x50
 80047fa:	4620      	mov	r0, r4
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <__sinit+0x68>)
 80047fe:	4a13      	ldr	r2, [pc, #76]	; (800484c <__sinit+0x6c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	62a2      	str	r2, [r4, #40]	; 0x28
 8004804:	42a3      	cmp	r3, r4
 8004806:	bf04      	itt	eq
 8004808:	2301      	moveq	r3, #1
 800480a:	61a3      	streq	r3, [r4, #24]
 800480c:	f000 f820 	bl	8004850 <__sfp>
 8004810:	6060      	str	r0, [r4, #4]
 8004812:	4620      	mov	r0, r4
 8004814:	f000 f81c 	bl	8004850 <__sfp>
 8004818:	60a0      	str	r0, [r4, #8]
 800481a:	4620      	mov	r0, r4
 800481c:	f000 f818 	bl	8004850 <__sfp>
 8004820:	2200      	movs	r2, #0
 8004822:	2104      	movs	r1, #4
 8004824:	60e0      	str	r0, [r4, #12]
 8004826:	6860      	ldr	r0, [r4, #4]
 8004828:	f7ff ff82 	bl	8004730 <std>
 800482c:	2201      	movs	r2, #1
 800482e:	2109      	movs	r1, #9
 8004830:	68a0      	ldr	r0, [r4, #8]
 8004832:	f7ff ff7d 	bl	8004730 <std>
 8004836:	2202      	movs	r2, #2
 8004838:	2112      	movs	r1, #18
 800483a:	68e0      	ldr	r0, [r4, #12]
 800483c:	f7ff ff78 	bl	8004730 <std>
 8004840:	2301      	movs	r3, #1
 8004842:	61a3      	str	r3, [r4, #24]
 8004844:	e7d2      	b.n	80047ec <__sinit+0xc>
 8004846:	bf00      	nop
 8004848:	08005e20 	.word	0x08005e20
 800484c:	08004779 	.word	0x08004779

08004850 <__sfp>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	4607      	mov	r7, r0
 8004854:	f7ff ffac 	bl	80047b0 <__sfp_lock_acquire>
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <__sfp+0x84>)
 800485a:	681e      	ldr	r6, [r3, #0]
 800485c:	69b3      	ldr	r3, [r6, #24]
 800485e:	b913      	cbnz	r3, 8004866 <__sfp+0x16>
 8004860:	4630      	mov	r0, r6
 8004862:	f7ff ffbd 	bl	80047e0 <__sinit>
 8004866:	3648      	adds	r6, #72	; 0x48
 8004868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	d503      	bpl.n	8004878 <__sfp+0x28>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	b30b      	cbz	r3, 80048b8 <__sfp+0x68>
 8004874:	6836      	ldr	r6, [r6, #0]
 8004876:	e7f7      	b.n	8004868 <__sfp+0x18>
 8004878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800487c:	b9d5      	cbnz	r5, 80048b4 <__sfp+0x64>
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <__sfp+0x88>)
 8004880:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004884:	6665      	str	r5, [r4, #100]	; 0x64
 8004886:	60e3      	str	r3, [r4, #12]
 8004888:	f000 f84c 	bl	8004924 <__retarget_lock_init_recursive>
 800488c:	f7ff ff96 	bl	80047bc <__sfp_lock_release>
 8004890:	2208      	movs	r2, #8
 8004892:	4629      	mov	r1, r5
 8004894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004898:	6025      	str	r5, [r4, #0]
 800489a:	61a5      	str	r5, [r4, #24]
 800489c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048a4:	f7fe fc49 	bl	800313a <memset>
 80048a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048b0:	4620      	mov	r0, r4
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b4:	3468      	adds	r4, #104	; 0x68
 80048b6:	e7d9      	b.n	800486c <__sfp+0x1c>
 80048b8:	2104      	movs	r1, #4
 80048ba:	4638      	mov	r0, r7
 80048bc:	f7ff ff62 	bl	8004784 <__sfmoreglue>
 80048c0:	4604      	mov	r4, r0
 80048c2:	6030      	str	r0, [r6, #0]
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d1d5      	bne.n	8004874 <__sfp+0x24>
 80048c8:	f7ff ff78 	bl	80047bc <__sfp_lock_release>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	e7ee      	b.n	80048b0 <__sfp+0x60>
 80048d2:	bf00      	nop
 80048d4:	08005e20 	.word	0x08005e20
 80048d8:	ffff0001 	.word	0xffff0001

080048dc <_fwalk_reent>:
 80048dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e0:	4606      	mov	r6, r0
 80048e2:	4688      	mov	r8, r1
 80048e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048e8:	2700      	movs	r7, #0
 80048ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048ee:	f1b9 0901 	subs.w	r9, r9, #1
 80048f2:	d505      	bpl.n	8004900 <_fwalk_reent+0x24>
 80048f4:	6824      	ldr	r4, [r4, #0]
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	d1f7      	bne.n	80048ea <_fwalk_reent+0xe>
 80048fa:	4638      	mov	r0, r7
 80048fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004900:	89ab      	ldrh	r3, [r5, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d907      	bls.n	8004916 <_fwalk_reent+0x3a>
 8004906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800490a:	3301      	adds	r3, #1
 800490c:	d003      	beq.n	8004916 <_fwalk_reent+0x3a>
 800490e:	4629      	mov	r1, r5
 8004910:	4630      	mov	r0, r6
 8004912:	47c0      	blx	r8
 8004914:	4307      	orrs	r7, r0
 8004916:	3568      	adds	r5, #104	; 0x68
 8004918:	e7e9      	b.n	80048ee <_fwalk_reent+0x12>
	...

0800491c <_localeconv_r>:
 800491c:	4800      	ldr	r0, [pc, #0]	; (8004920 <_localeconv_r+0x4>)
 800491e:	4770      	bx	lr
 8004920:	20000d54 	.word	0x20000d54

08004924 <__retarget_lock_init_recursive>:
 8004924:	4770      	bx	lr

08004926 <__retarget_lock_acquire_recursive>:
 8004926:	4770      	bx	lr

08004928 <__retarget_lock_release_recursive>:
 8004928:	4770      	bx	lr
	...

0800492c <malloc>:
 800492c:	4b02      	ldr	r3, [pc, #8]	; (8004938 <malloc+0xc>)
 800492e:	4601      	mov	r1, r0
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	f000 bb85 	b.w	8005040 <_malloc_r>
 8004936:	bf00      	nop
 8004938:	20000c00 	.word	0x20000c00

0800493c <memchr>:
 800493c:	b2c9      	uxtb	r1, r1
 800493e:	4402      	add	r2, r0
 8004940:	b510      	push	{r4, lr}
 8004942:	4290      	cmp	r0, r2
 8004944:	4603      	mov	r3, r0
 8004946:	d101      	bne.n	800494c <memchr+0x10>
 8004948:	2300      	movs	r3, #0
 800494a:	e003      	b.n	8004954 <memchr+0x18>
 800494c:	781c      	ldrb	r4, [r3, #0]
 800494e:	3001      	adds	r0, #1
 8004950:	428c      	cmp	r4, r1
 8004952:	d1f6      	bne.n	8004942 <memchr+0x6>
 8004954:	4618      	mov	r0, r3
 8004956:	bd10      	pop	{r4, pc}

08004958 <_Balloc>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800495c:	4604      	mov	r4, r0
 800495e:	460d      	mov	r5, r1
 8004960:	b93e      	cbnz	r6, 8004972 <_Balloc+0x1a>
 8004962:	2010      	movs	r0, #16
 8004964:	f7ff ffe2 	bl	800492c <malloc>
 8004968:	6260      	str	r0, [r4, #36]	; 0x24
 800496a:	6006      	str	r6, [r0, #0]
 800496c:	60c6      	str	r6, [r0, #12]
 800496e:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004972:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004974:	68f3      	ldr	r3, [r6, #12]
 8004976:	b183      	cbz	r3, 800499a <_Balloc+0x42>
 8004978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004980:	b9b8      	cbnz	r0, 80049b2 <_Balloc+0x5a>
 8004982:	2101      	movs	r1, #1
 8004984:	4620      	mov	r0, r4
 8004986:	fa01 f605 	lsl.w	r6, r1, r5
 800498a:	1d72      	adds	r2, r6, #5
 800498c:	0092      	lsls	r2, r2, #2
 800498e:	f000 faf7 	bl	8004f80 <_calloc_r>
 8004992:	b160      	cbz	r0, 80049ae <_Balloc+0x56>
 8004994:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004998:	e00e      	b.n	80049b8 <_Balloc+0x60>
 800499a:	2221      	movs	r2, #33	; 0x21
 800499c:	2104      	movs	r1, #4
 800499e:	4620      	mov	r0, r4
 80049a0:	f000 faee 	bl	8004f80 <_calloc_r>
 80049a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049a6:	60f0      	str	r0, [r6, #12]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e4      	bne.n	8004978 <_Balloc+0x20>
 80049ae:	2000      	movs	r0, #0
 80049b0:	bd70      	pop	{r4, r5, r6, pc}
 80049b2:	6802      	ldr	r2, [r0, #0]
 80049b4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80049b8:	2300      	movs	r3, #0
 80049ba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049be:	e7f7      	b.n	80049b0 <_Balloc+0x58>

080049c0 <_Bfree>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80049c4:	4605      	mov	r5, r0
 80049c6:	460c      	mov	r4, r1
 80049c8:	b93e      	cbnz	r6, 80049da <_Bfree+0x1a>
 80049ca:	2010      	movs	r0, #16
 80049cc:	f7ff ffae 	bl	800492c <malloc>
 80049d0:	6268      	str	r0, [r5, #36]	; 0x24
 80049d2:	6006      	str	r6, [r0, #0]
 80049d4:	60c6      	str	r6, [r0, #12]
 80049d6:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049da:	b13c      	cbz	r4, 80049ec <_Bfree+0x2c>
 80049dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80049de:	6862      	ldr	r2, [r4, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80049e6:	6021      	str	r1, [r4, #0]
 80049e8:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80049ec:	bd70      	pop	{r4, r5, r6, pc}

080049ee <__multadd>:
 80049ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049f2:	4607      	mov	r7, r0
 80049f4:	4698      	mov	r8, r3
 80049f6:	460c      	mov	r4, r1
 80049f8:	690e      	ldr	r6, [r1, #16]
 80049fa:	f101 0014 	add.w	r0, r1, #20
 80049fe:	2300      	movs	r3, #0
 8004a00:	6805      	ldr	r5, [r0, #0]
 8004a02:	3301      	adds	r3, #1
 8004a04:	b2a9      	uxth	r1, r5
 8004a06:	429e      	cmp	r6, r3
 8004a08:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8004a0c:	fb02 8101 	mla	r1, r2, r1, r8
 8004a10:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004a14:	b289      	uxth	r1, r1
 8004a16:	fb02 c505 	mla	r5, r2, r5, ip
 8004a1a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004a1e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004a22:	f840 1b04 	str.w	r1, [r0], #4
 8004a26:	dceb      	bgt.n	8004a00 <__multadd+0x12>
 8004a28:	f1b8 0f00 	cmp.w	r8, #0
 8004a2c:	d01b      	beq.n	8004a66 <__multadd+0x78>
 8004a2e:	68a3      	ldr	r3, [r4, #8]
 8004a30:	42b3      	cmp	r3, r6
 8004a32:	dc12      	bgt.n	8004a5a <__multadd+0x6c>
 8004a34:	6861      	ldr	r1, [r4, #4]
 8004a36:	4638      	mov	r0, r7
 8004a38:	3101      	adds	r1, #1
 8004a3a:	f7ff ff8d 	bl	8004958 <_Balloc>
 8004a3e:	6922      	ldr	r2, [r4, #16]
 8004a40:	4605      	mov	r5, r0
 8004a42:	f104 010c 	add.w	r1, r4, #12
 8004a46:	3202      	adds	r2, #2
 8004a48:	300c      	adds	r0, #12
 8004a4a:	0092      	lsls	r2, r2, #2
 8004a4c:	f7fe fb68 	bl	8003120 <memcpy>
 8004a50:	4621      	mov	r1, r4
 8004a52:	462c      	mov	r4, r5
 8004a54:	4638      	mov	r0, r7
 8004a56:	f7ff ffb3 	bl	80049c0 <_Bfree>
 8004a5a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004a5e:	3601      	adds	r6, #1
 8004a60:	f8c3 8014 	str.w	r8, [r3, #20]
 8004a64:	6126      	str	r6, [r4, #16]
 8004a66:	4620      	mov	r0, r4
 8004a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004a6c <__hi0bits>:
 8004a6c:	0c03      	lsrs	r3, r0, #16
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	b9d3      	cbnz	r3, 8004aa8 <__hi0bits+0x3c>
 8004a72:	0400      	lsls	r0, r0, #16
 8004a74:	2310      	movs	r3, #16
 8004a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004a7a:	bf04      	itt	eq
 8004a7c:	0200      	lsleq	r0, r0, #8
 8004a7e:	3308      	addeq	r3, #8
 8004a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004a84:	bf04      	itt	eq
 8004a86:	0100      	lsleq	r0, r0, #4
 8004a88:	3304      	addeq	r3, #4
 8004a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004a8e:	bf04      	itt	eq
 8004a90:	0080      	lsleq	r0, r0, #2
 8004a92:	3302      	addeq	r3, #2
 8004a94:	2800      	cmp	r0, #0
 8004a96:	db05      	blt.n	8004aa4 <__hi0bits+0x38>
 8004a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004a9c:	f103 0301 	add.w	r3, r3, #1
 8004aa0:	bf08      	it	eq
 8004aa2:	2320      	moveq	r3, #32
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	4770      	bx	lr
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e7e4      	b.n	8004a76 <__hi0bits+0xa>

08004aac <__lo0bits>:
 8004aac:	6803      	ldr	r3, [r0, #0]
 8004aae:	4601      	mov	r1, r0
 8004ab0:	f013 0207 	ands.w	r2, r3, #7
 8004ab4:	d00b      	beq.n	8004ace <__lo0bits+0x22>
 8004ab6:	07da      	lsls	r2, r3, #31
 8004ab8:	d424      	bmi.n	8004b04 <__lo0bits+0x58>
 8004aba:	0798      	lsls	r0, r3, #30
 8004abc:	bf47      	ittee	mi
 8004abe:	085b      	lsrmi	r3, r3, #1
 8004ac0:	2001      	movmi	r0, #1
 8004ac2:	089b      	lsrpl	r3, r3, #2
 8004ac4:	2002      	movpl	r0, #2
 8004ac6:	bf4c      	ite	mi
 8004ac8:	600b      	strmi	r3, [r1, #0]
 8004aca:	600b      	strpl	r3, [r1, #0]
 8004acc:	4770      	bx	lr
 8004ace:	b298      	uxth	r0, r3
 8004ad0:	b9b0      	cbnz	r0, 8004b00 <__lo0bits+0x54>
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	2010      	movs	r0, #16
 8004ad6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004ada:	bf04      	itt	eq
 8004adc:	0a1b      	lsreq	r3, r3, #8
 8004ade:	3008      	addeq	r0, #8
 8004ae0:	071a      	lsls	r2, r3, #28
 8004ae2:	bf04      	itt	eq
 8004ae4:	091b      	lsreq	r3, r3, #4
 8004ae6:	3004      	addeq	r0, #4
 8004ae8:	079a      	lsls	r2, r3, #30
 8004aea:	bf04      	itt	eq
 8004aec:	089b      	lsreq	r3, r3, #2
 8004aee:	3002      	addeq	r0, #2
 8004af0:	07da      	lsls	r2, r3, #31
 8004af2:	d403      	bmi.n	8004afc <__lo0bits+0x50>
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	f100 0001 	add.w	r0, r0, #1
 8004afa:	d005      	beq.n	8004b08 <__lo0bits+0x5c>
 8004afc:	600b      	str	r3, [r1, #0]
 8004afe:	4770      	bx	lr
 8004b00:	4610      	mov	r0, r2
 8004b02:	e7e8      	b.n	8004ad6 <__lo0bits+0x2a>
 8004b04:	2000      	movs	r0, #0
 8004b06:	4770      	bx	lr
 8004b08:	2020      	movs	r0, #32
 8004b0a:	4770      	bx	lr

08004b0c <__i2b>:
 8004b0c:	b510      	push	{r4, lr}
 8004b0e:	460c      	mov	r4, r1
 8004b10:	2101      	movs	r1, #1
 8004b12:	f7ff ff21 	bl	8004958 <_Balloc>
 8004b16:	2201      	movs	r2, #1
 8004b18:	6144      	str	r4, [r0, #20]
 8004b1a:	6102      	str	r2, [r0, #16]
 8004b1c:	bd10      	pop	{r4, pc}

08004b1e <__multiply>:
 8004b1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b22:	4615      	mov	r5, r2
 8004b24:	690a      	ldr	r2, [r1, #16]
 8004b26:	460c      	mov	r4, r1
 8004b28:	b085      	sub	sp, #20
 8004b2a:	692b      	ldr	r3, [r5, #16]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	bfbe      	ittt	lt
 8004b30:	460b      	movlt	r3, r1
 8004b32:	462c      	movlt	r4, r5
 8004b34:	461d      	movlt	r5, r3
 8004b36:	6927      	ldr	r7, [r4, #16]
 8004b38:	68a3      	ldr	r3, [r4, #8]
 8004b3a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8004b3e:	6861      	ldr	r1, [r4, #4]
 8004b40:	eb07 0609 	add.w	r6, r7, r9
 8004b44:	42b3      	cmp	r3, r6
 8004b46:	bfb8      	it	lt
 8004b48:	3101      	addlt	r1, #1
 8004b4a:	f7ff ff05 	bl	8004958 <_Balloc>
 8004b4e:	f100 0114 	add.w	r1, r0, #20
 8004b52:	2200      	movs	r2, #0
 8004b54:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 8004b58:	460b      	mov	r3, r1
 8004b5a:	4543      	cmp	r3, r8
 8004b5c:	d31d      	bcc.n	8004b9a <__multiply+0x7c>
 8004b5e:	f104 0314 	add.w	r3, r4, #20
 8004b62:	f105 0214 	add.w	r2, r5, #20
 8004b66:	f104 0515 	add.w	r5, r4, #21
 8004b6a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004b6e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004b72:	9302      	str	r3, [sp, #8]
 8004b74:	1b3b      	subs	r3, r7, r4
 8004b76:	3b15      	subs	r3, #21
 8004b78:	f023 0303 	bic.w	r3, r3, #3
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	42af      	cmp	r7, r5
 8004b80:	bf38      	it	cc
 8004b82:	2304      	movcc	r3, #4
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	9b02      	ldr	r3, [sp, #8]
 8004b88:	9203      	str	r2, [sp, #12]
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d808      	bhi.n	8004ba0 <__multiply+0x82>
 8004b8e:	2e00      	cmp	r6, #0
 8004b90:	dc5a      	bgt.n	8004c48 <__multiply+0x12a>
 8004b92:	6106      	str	r6, [r0, #16]
 8004b94:	b005      	add	sp, #20
 8004b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b9a:	f843 2b04 	str.w	r2, [r3], #4
 8004b9e:	e7dc      	b.n	8004b5a <__multiply+0x3c>
 8004ba0:	f8b2 a000 	ldrh.w	sl, [r2]
 8004ba4:	f1ba 0f00 	cmp.w	sl, #0
 8004ba8:	d024      	beq.n	8004bf4 <__multiply+0xd6>
 8004baa:	f104 0e14 	add.w	lr, r4, #20
 8004bae:	4689      	mov	r9, r1
 8004bb0:	f04f 0c00 	mov.w	ip, #0
 8004bb4:	f85e 5b04 	ldr.w	r5, [lr], #4
 8004bb8:	f8d9 b000 	ldr.w	fp, [r9]
 8004bbc:	b2ab      	uxth	r3, r5
 8004bbe:	4577      	cmp	r7, lr
 8004bc0:	fa1f fb8b 	uxth.w	fp, fp
 8004bc4:	fb0a b303 	mla	r3, sl, r3, fp
 8004bc8:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 8004bcc:	f8d9 5000 	ldr.w	r5, [r9]
 8004bd0:	4463      	add	r3, ip
 8004bd2:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8004bd6:	fb0a c50b 	mla	r5, sl, fp, ip
 8004bda:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8004be4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004be8:	f849 3b04 	str.w	r3, [r9], #4
 8004bec:	d8e2      	bhi.n	8004bb4 <__multiply+0x96>
 8004bee:	9b01      	ldr	r3, [sp, #4]
 8004bf0:	f841 c003 	str.w	ip, [r1, r3]
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	3204      	adds	r2, #4
 8004bf8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004bfc:	f1b9 0f00 	cmp.w	r9, #0
 8004c00:	d020      	beq.n	8004c44 <__multiply+0x126>
 8004c02:	680b      	ldr	r3, [r1, #0]
 8004c04:	f104 0c14 	add.w	ip, r4, #20
 8004c08:	468e      	mov	lr, r1
 8004c0a:	f04f 0a00 	mov.w	sl, #0
 8004c0e:	f8bc 5000 	ldrh.w	r5, [ip]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004c18:	fb09 b505 	mla	r5, r9, r5, fp
 8004c1c:	44aa      	add	sl, r5
 8004c1e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004c22:	f84e 3b04 	str.w	r3, [lr], #4
 8004c26:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004c2a:	f8be 5000 	ldrh.w	r5, [lr]
 8004c2e:	0c1b      	lsrs	r3, r3, #16
 8004c30:	4567      	cmp	r7, ip
 8004c32:	fb09 5303 	mla	r3, r9, r3, r5
 8004c36:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004c3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c3e:	d8e6      	bhi.n	8004c0e <__multiply+0xf0>
 8004c40:	9d01      	ldr	r5, [sp, #4]
 8004c42:	514b      	str	r3, [r1, r5]
 8004c44:	3104      	adds	r1, #4
 8004c46:	e79e      	b.n	8004b86 <__multiply+0x68>
 8004c48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1a0      	bne.n	8004b92 <__multiply+0x74>
 8004c50:	3e01      	subs	r6, #1
 8004c52:	e79c      	b.n	8004b8e <__multiply+0x70>

08004c54 <__pow5mult>:
 8004c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c58:	4615      	mov	r5, r2
 8004c5a:	f012 0203 	ands.w	r2, r2, #3
 8004c5e:	4606      	mov	r6, r0
 8004c60:	460f      	mov	r7, r1
 8004c62:	d007      	beq.n	8004c74 <__pow5mult+0x20>
 8004c64:	3a01      	subs	r2, #1
 8004c66:	4c21      	ldr	r4, [pc, #132]	; (8004cec <__pow5mult+0x98>)
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004c6e:	f7ff febe 	bl	80049ee <__multadd>
 8004c72:	4607      	mov	r7, r0
 8004c74:	10ad      	asrs	r5, r5, #2
 8004c76:	d035      	beq.n	8004ce4 <__pow5mult+0x90>
 8004c78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004c7a:	b93c      	cbnz	r4, 8004c8c <__pow5mult+0x38>
 8004c7c:	2010      	movs	r0, #16
 8004c7e:	f7ff fe55 	bl	800492c <malloc>
 8004c82:	6270      	str	r0, [r6, #36]	; 0x24
 8004c84:	6004      	str	r4, [r0, #0]
 8004c86:	60c4      	str	r4, [r0, #12]
 8004c88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004c8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004c90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c94:	b94c      	cbnz	r4, 8004caa <__pow5mult+0x56>
 8004c96:	f240 2171 	movw	r1, #625	; 0x271
 8004c9a:	4630      	mov	r0, r6
 8004c9c:	f7ff ff36 	bl	8004b0c <__i2b>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ca8:	6003      	str	r3, [r0, #0]
 8004caa:	f04f 0900 	mov.w	r9, #0
 8004cae:	07eb      	lsls	r3, r5, #31
 8004cb0:	d50a      	bpl.n	8004cc8 <__pow5mult+0x74>
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	f7ff ff31 	bl	8004b1e <__multiply>
 8004cbc:	4680      	mov	r8, r0
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4647      	mov	r7, r8
 8004cc4:	f7ff fe7c 	bl	80049c0 <_Bfree>
 8004cc8:	106d      	asrs	r5, r5, #1
 8004cca:	d00b      	beq.n	8004ce4 <__pow5mult+0x90>
 8004ccc:	6820      	ldr	r0, [r4, #0]
 8004cce:	b938      	cbnz	r0, 8004ce0 <__pow5mult+0x8c>
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f7ff ff22 	bl	8004b1e <__multiply>
 8004cda:	6020      	str	r0, [r4, #0]
 8004cdc:	f8c0 9000 	str.w	r9, [r0]
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	e7e4      	b.n	8004cae <__pow5mult+0x5a>
 8004ce4:	4638      	mov	r0, r7
 8004ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cea:	bf00      	nop
 8004cec:	08005fb8 	.word	0x08005fb8

08004cf0 <__lshift>:
 8004cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	4607      	mov	r7, r0
 8004cf8:	4691      	mov	r9, r2
 8004cfa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	6849      	ldr	r1, [r1, #4]
 8004d02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d06:	68a3      	ldr	r3, [r4, #8]
 8004d08:	f108 0601 	add.w	r6, r8, #1
 8004d0c:	42b3      	cmp	r3, r6
 8004d0e:	db3f      	blt.n	8004d90 <__lshift+0xa0>
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7ff fe21 	bl	8004958 <_Balloc>
 8004d16:	2300      	movs	r3, #0
 8004d18:	4605      	mov	r5, r0
 8004d1a:	f100 0114 	add.w	r1, r0, #20
 8004d1e:	f100 0210 	add.w	r2, r0, #16
 8004d22:	4618      	mov	r0, r3
 8004d24:	4553      	cmp	r3, sl
 8004d26:	db36      	blt.n	8004d96 <__lshift+0xa6>
 8004d28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004d2c:	f104 0314 	add.w	r3, r4, #20
 8004d30:	6920      	ldr	r0, [r4, #16]
 8004d32:	f019 091f 	ands.w	r9, r9, #31
 8004d36:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004d3a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004d3e:	d02e      	beq.n	8004d9e <__lshift+0xae>
 8004d40:	f1c9 0e20 	rsb	lr, r9, #32
 8004d44:	468a      	mov	sl, r1
 8004d46:	2200      	movs	r2, #0
 8004d48:	6818      	ldr	r0, [r3, #0]
 8004d4a:	fa00 f009 	lsl.w	r0, r0, r9
 8004d4e:	4302      	orrs	r2, r0
 8004d50:	f84a 2b04 	str.w	r2, [sl], #4
 8004d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d58:	459c      	cmp	ip, r3
 8004d5a:	fa22 f20e 	lsr.w	r2, r2, lr
 8004d5e:	d8f3      	bhi.n	8004d48 <__lshift+0x58>
 8004d60:	ebac 0304 	sub.w	r3, ip, r4
 8004d64:	f104 0015 	add.w	r0, r4, #21
 8004d68:	3b15      	subs	r3, #21
 8004d6a:	f023 0303 	bic.w	r3, r3, #3
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4560      	cmp	r0, ip
 8004d72:	bf88      	it	hi
 8004d74:	2304      	movhi	r3, #4
 8004d76:	50ca      	str	r2, [r1, r3]
 8004d78:	b10a      	cbz	r2, 8004d7e <__lshift+0x8e>
 8004d7a:	f108 0602 	add.w	r6, r8, #2
 8004d7e:	3e01      	subs	r6, #1
 8004d80:	4638      	mov	r0, r7
 8004d82:	4621      	mov	r1, r4
 8004d84:	612e      	str	r6, [r5, #16]
 8004d86:	f7ff fe1b 	bl	80049c0 <_Bfree>
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d90:	3101      	adds	r1, #1
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	e7ba      	b.n	8004d0c <__lshift+0x1c>
 8004d96:	3301      	adds	r3, #1
 8004d98:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d9c:	e7c2      	b.n	8004d24 <__lshift+0x34>
 8004d9e:	3904      	subs	r1, #4
 8004da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004da4:	459c      	cmp	ip, r3
 8004da6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004daa:	d8f9      	bhi.n	8004da0 <__lshift+0xb0>
 8004dac:	e7e7      	b.n	8004d7e <__lshift+0x8e>

08004dae <__mcmp>:
 8004dae:	6902      	ldr	r2, [r0, #16]
 8004db0:	b530      	push	{r4, r5, lr}
 8004db2:	690c      	ldr	r4, [r1, #16]
 8004db4:	1b12      	subs	r2, r2, r4
 8004db6:	d10e      	bne.n	8004dd6 <__mcmp+0x28>
 8004db8:	f100 0314 	add.w	r3, r0, #20
 8004dbc:	3114      	adds	r1, #20
 8004dbe:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004dc2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004dc6:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004dca:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004dce:	42a5      	cmp	r5, r4
 8004dd0:	d003      	beq.n	8004dda <__mcmp+0x2c>
 8004dd2:	d305      	bcc.n	8004de0 <__mcmp+0x32>
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	bd30      	pop	{r4, r5, pc}
 8004dda:	4283      	cmp	r3, r0
 8004ddc:	d3f3      	bcc.n	8004dc6 <__mcmp+0x18>
 8004dde:	e7fa      	b.n	8004dd6 <__mcmp+0x28>
 8004de0:	f04f 32ff 	mov.w	r2, #4294967295
 8004de4:	e7f7      	b.n	8004dd6 <__mcmp+0x28>

08004de6 <__mdiff>:
 8004de6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	460c      	mov	r4, r1
 8004dec:	4606      	mov	r6, r0
 8004dee:	4611      	mov	r1, r2
 8004df0:	4692      	mov	sl, r2
 8004df2:	4620      	mov	r0, r4
 8004df4:	f7ff ffdb 	bl	8004dae <__mcmp>
 8004df8:	1e05      	subs	r5, r0, #0
 8004dfa:	d108      	bne.n	8004e0e <__mdiff+0x28>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7ff fdaa 	bl	8004958 <_Balloc>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e0e:	bfa3      	ittte	ge
 8004e10:	4653      	movge	r3, sl
 8004e12:	46a2      	movge	sl, r4
 8004e14:	2500      	movge	r5, #0
 8004e16:	2501      	movlt	r5, #1
 8004e18:	bfa8      	it	ge
 8004e1a:	461c      	movge	r4, r3
 8004e1c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004e20:	4630      	mov	r0, r6
 8004e22:	f7ff fd99 	bl	8004958 <_Balloc>
 8004e26:	f104 0914 	add.w	r9, r4, #20
 8004e2a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004e2e:	f100 0814 	add.w	r8, r0, #20
 8004e32:	6926      	ldr	r6, [r4, #16]
 8004e34:	f10a 0210 	add.w	r2, sl, #16
 8004e38:	60c5      	str	r5, [r0, #12]
 8004e3a:	f10a 0514 	add.w	r5, sl, #20
 8004e3e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004e42:	46c2      	mov	sl, r8
 8004e44:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004e48:	f04f 0c00 	mov.w	ip, #0
 8004e4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004e50:	f859 3b04 	ldr.w	r3, [r9], #4
 8004e54:	fa1f f18b 	uxth.w	r1, fp
 8004e58:	454e      	cmp	r6, r9
 8004e5a:	4461      	add	r1, ip
 8004e5c:	fa1f fc83 	uxth.w	ip, r3
 8004e60:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004e64:	eba1 010c 	sub.w	r1, r1, ip
 8004e68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004e6c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004e70:	b289      	uxth	r1, r1
 8004e72:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004e76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004e7a:	f84a 3b04 	str.w	r3, [sl], #4
 8004e7e:	d8e5      	bhi.n	8004e4c <__mdiff+0x66>
 8004e80:	1b33      	subs	r3, r6, r4
 8004e82:	3415      	adds	r4, #21
 8004e84:	3b15      	subs	r3, #21
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	42a6      	cmp	r6, r4
 8004e8e:	bf38      	it	cc
 8004e90:	2304      	movcc	r3, #4
 8004e92:	441d      	add	r5, r3
 8004e94:	4443      	add	r3, r8
 8004e96:	462c      	mov	r4, r5
 8004e98:	461e      	mov	r6, r3
 8004e9a:	4574      	cmp	r4, lr
 8004e9c:	d30e      	bcc.n	8004ebc <__mdiff+0xd6>
 8004e9e:	f10e 0203 	add.w	r2, lr, #3
 8004ea2:	1b52      	subs	r2, r2, r5
 8004ea4:	3d03      	subs	r5, #3
 8004ea6:	f022 0203 	bic.w	r2, r2, #3
 8004eaa:	45ae      	cmp	lr, r5
 8004eac:	bf38      	it	cc
 8004eae:	2200      	movcc	r2, #0
 8004eb0:	441a      	add	r2, r3
 8004eb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004eb6:	b18b      	cbz	r3, 8004edc <__mdiff+0xf6>
 8004eb8:	6107      	str	r7, [r0, #16]
 8004eba:	e7a6      	b.n	8004e0a <__mdiff+0x24>
 8004ebc:	f854 8b04 	ldr.w	r8, [r4], #4
 8004ec0:	fa1f f288 	uxth.w	r2, r8
 8004ec4:	4462      	add	r2, ip
 8004ec6:	1411      	asrs	r1, r2, #16
 8004ec8:	b292      	uxth	r2, r2
 8004eca:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8004ece:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004ed2:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8004ed6:	f846 2b04 	str.w	r2, [r6], #4
 8004eda:	e7de      	b.n	8004e9a <__mdiff+0xb4>
 8004edc:	3f01      	subs	r7, #1
 8004ede:	e7e8      	b.n	8004eb2 <__mdiff+0xcc>

08004ee0 <__d2b>:
 8004ee0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ee4:	ec57 6b10 	vmov	r6, r7, d0
 8004ee8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8004eec:	4689      	mov	r9, r1
 8004eee:	2101      	movs	r1, #1
 8004ef0:	4690      	mov	r8, r2
 8004ef2:	f7ff fd31 	bl	8004958 <_Balloc>
 8004ef6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004efa:	4604      	mov	r4, r0
 8004efc:	bb35      	cbnz	r5, 8004f4c <__d2b+0x6c>
 8004efe:	2e00      	cmp	r6, #0
 8004f00:	9301      	str	r3, [sp, #4]
 8004f02:	d028      	beq.n	8004f56 <__d2b+0x76>
 8004f04:	4668      	mov	r0, sp
 8004f06:	9600      	str	r6, [sp, #0]
 8004f08:	f7ff fdd0 	bl	8004aac <__lo0bits>
 8004f0c:	9900      	ldr	r1, [sp, #0]
 8004f0e:	b300      	cbz	r0, 8004f52 <__d2b+0x72>
 8004f10:	9a01      	ldr	r2, [sp, #4]
 8004f12:	f1c0 0320 	rsb	r3, r0, #32
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	40c2      	lsrs	r2, r0
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	9201      	str	r2, [sp, #4]
 8004f20:	6163      	str	r3, [r4, #20]
 8004f22:	9b01      	ldr	r3, [sp, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	61a3      	str	r3, [r4, #24]
 8004f28:	bf14      	ite	ne
 8004f2a:	2202      	movne	r2, #2
 8004f2c:	2201      	moveq	r2, #1
 8004f2e:	6122      	str	r2, [r4, #16]
 8004f30:	b1d5      	cbz	r5, 8004f68 <__d2b+0x88>
 8004f32:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004f36:	4405      	add	r5, r0
 8004f38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004f3c:	f8c9 5000 	str.w	r5, [r9]
 8004f40:	f8c8 0000 	str.w	r0, [r8]
 8004f44:	4620      	mov	r0, r4
 8004f46:	b003      	add	sp, #12
 8004f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f50:	e7d5      	b.n	8004efe <__d2b+0x1e>
 8004f52:	6161      	str	r1, [r4, #20]
 8004f54:	e7e5      	b.n	8004f22 <__d2b+0x42>
 8004f56:	a801      	add	r0, sp, #4
 8004f58:	f7ff fda8 	bl	8004aac <__lo0bits>
 8004f5c:	9b01      	ldr	r3, [sp, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	3020      	adds	r0, #32
 8004f62:	6163      	str	r3, [r4, #20]
 8004f64:	6122      	str	r2, [r4, #16]
 8004f66:	e7e3      	b.n	8004f30 <__d2b+0x50>
 8004f68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004f6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004f70:	f8c9 0000 	str.w	r0, [r9]
 8004f74:	6918      	ldr	r0, [r3, #16]
 8004f76:	f7ff fd79 	bl	8004a6c <__hi0bits>
 8004f7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004f7e:	e7df      	b.n	8004f40 <__d2b+0x60>

08004f80 <_calloc_r>:
 8004f80:	434a      	muls	r2, r1
 8004f82:	b513      	push	{r0, r1, r4, lr}
 8004f84:	4611      	mov	r1, r2
 8004f86:	9201      	str	r2, [sp, #4]
 8004f88:	f000 f85a 	bl	8005040 <_malloc_r>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	b118      	cbz	r0, 8004f98 <_calloc_r+0x18>
 8004f90:	9a01      	ldr	r2, [sp, #4]
 8004f92:	2100      	movs	r1, #0
 8004f94:	f7fe f8d1 	bl	800313a <memset>
 8004f98:	4620      	mov	r0, r4
 8004f9a:	b002      	add	sp, #8
 8004f9c:	bd10      	pop	{r4, pc}
	...

08004fa0 <_free_r>:
 8004fa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fa2:	2900      	cmp	r1, #0
 8004fa4:	d047      	beq.n	8005036 <_free_r+0x96>
 8004fa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004faa:	1f0c      	subs	r4, r1, #4
 8004fac:	9001      	str	r0, [sp, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	bfb8      	it	lt
 8004fb2:	18e4      	addlt	r4, r4, r3
 8004fb4:	f000 fc76 	bl	80058a4 <__malloc_lock>
 8004fb8:	4a20      	ldr	r2, [pc, #128]	; (800503c <_free_r+0x9c>)
 8004fba:	9801      	ldr	r0, [sp, #4]
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	4615      	mov	r5, r2
 8004fc0:	b933      	cbnz	r3, 8004fd0 <_free_r+0x30>
 8004fc2:	6063      	str	r3, [r4, #4]
 8004fc4:	6014      	str	r4, [r2, #0]
 8004fc6:	b003      	add	sp, #12
 8004fc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fcc:	f000 bc70 	b.w	80058b0 <__malloc_unlock>
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	d90b      	bls.n	8004fec <_free_r+0x4c>
 8004fd4:	6821      	ldr	r1, [r4, #0]
 8004fd6:	1862      	adds	r2, r4, r1
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	bf02      	ittt	eq
 8004fdc:	681a      	ldreq	r2, [r3, #0]
 8004fde:	685b      	ldreq	r3, [r3, #4]
 8004fe0:	1852      	addeq	r2, r2, r1
 8004fe2:	6063      	str	r3, [r4, #4]
 8004fe4:	bf08      	it	eq
 8004fe6:	6022      	streq	r2, [r4, #0]
 8004fe8:	602c      	str	r4, [r5, #0]
 8004fea:	e7ec      	b.n	8004fc6 <_free_r+0x26>
 8004fec:	461a      	mov	r2, r3
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	b10b      	cbz	r3, 8004ff6 <_free_r+0x56>
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	d9fa      	bls.n	8004fec <_free_r+0x4c>
 8004ff6:	6811      	ldr	r1, [r2, #0]
 8004ff8:	1855      	adds	r5, r2, r1
 8004ffa:	42a5      	cmp	r5, r4
 8004ffc:	d10b      	bne.n	8005016 <_free_r+0x76>
 8004ffe:	6824      	ldr	r4, [r4, #0]
 8005000:	4421      	add	r1, r4
 8005002:	1854      	adds	r4, r2, r1
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	42a3      	cmp	r3, r4
 8005008:	d1dd      	bne.n	8004fc6 <_free_r+0x26>
 800500a:	681c      	ldr	r4, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4421      	add	r1, r4
 8005010:	6053      	str	r3, [r2, #4]
 8005012:	6011      	str	r1, [r2, #0]
 8005014:	e7d7      	b.n	8004fc6 <_free_r+0x26>
 8005016:	d902      	bls.n	800501e <_free_r+0x7e>
 8005018:	230c      	movs	r3, #12
 800501a:	6003      	str	r3, [r0, #0]
 800501c:	e7d3      	b.n	8004fc6 <_free_r+0x26>
 800501e:	6825      	ldr	r5, [r4, #0]
 8005020:	1961      	adds	r1, r4, r5
 8005022:	428b      	cmp	r3, r1
 8005024:	bf02      	ittt	eq
 8005026:	6819      	ldreq	r1, [r3, #0]
 8005028:	685b      	ldreq	r3, [r3, #4]
 800502a:	1949      	addeq	r1, r1, r5
 800502c:	6063      	str	r3, [r4, #4]
 800502e:	bf08      	it	eq
 8005030:	6021      	streq	r1, [r4, #0]
 8005032:	6054      	str	r4, [r2, #4]
 8005034:	e7c7      	b.n	8004fc6 <_free_r+0x26>
 8005036:	b003      	add	sp, #12
 8005038:	bd30      	pop	{r4, r5, pc}
 800503a:	bf00      	nop
 800503c:	20001df0 	.word	0x20001df0

08005040 <_malloc_r>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	1ccd      	adds	r5, r1, #3
 8005044:	4606      	mov	r6, r0
 8005046:	f025 0503 	bic.w	r5, r5, #3
 800504a:	3508      	adds	r5, #8
 800504c:	2d0c      	cmp	r5, #12
 800504e:	bf38      	it	cc
 8005050:	250c      	movcc	r5, #12
 8005052:	2d00      	cmp	r5, #0
 8005054:	db01      	blt.n	800505a <_malloc_r+0x1a>
 8005056:	42a9      	cmp	r1, r5
 8005058:	d903      	bls.n	8005062 <_malloc_r+0x22>
 800505a:	230c      	movs	r3, #12
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	2000      	movs	r0, #0
 8005060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005062:	f000 fc1f 	bl	80058a4 <__malloc_lock>
 8005066:	4921      	ldr	r1, [pc, #132]	; (80050ec <_malloc_r+0xac>)
 8005068:	680a      	ldr	r2, [r1, #0]
 800506a:	4614      	mov	r4, r2
 800506c:	b99c      	cbnz	r4, 8005096 <_malloc_r+0x56>
 800506e:	4f20      	ldr	r7, [pc, #128]	; (80050f0 <_malloc_r+0xb0>)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	b923      	cbnz	r3, 800507e <_malloc_r+0x3e>
 8005074:	4621      	mov	r1, r4
 8005076:	4630      	mov	r0, r6
 8005078:	f000 f996 	bl	80053a8 <_sbrk_r>
 800507c:	6038      	str	r0, [r7, #0]
 800507e:	4629      	mov	r1, r5
 8005080:	4630      	mov	r0, r6
 8005082:	f000 f991 	bl	80053a8 <_sbrk_r>
 8005086:	1c43      	adds	r3, r0, #1
 8005088:	d123      	bne.n	80050d2 <_malloc_r+0x92>
 800508a:	230c      	movs	r3, #12
 800508c:	4630      	mov	r0, r6
 800508e:	6033      	str	r3, [r6, #0]
 8005090:	f000 fc0e 	bl	80058b0 <__malloc_unlock>
 8005094:	e7e3      	b.n	800505e <_malloc_r+0x1e>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	1b5b      	subs	r3, r3, r5
 800509a:	d417      	bmi.n	80050cc <_malloc_r+0x8c>
 800509c:	2b0b      	cmp	r3, #11
 800509e:	d903      	bls.n	80050a8 <_malloc_r+0x68>
 80050a0:	6023      	str	r3, [r4, #0]
 80050a2:	441c      	add	r4, r3
 80050a4:	6025      	str	r5, [r4, #0]
 80050a6:	e004      	b.n	80050b2 <_malloc_r+0x72>
 80050a8:	6863      	ldr	r3, [r4, #4]
 80050aa:	42a2      	cmp	r2, r4
 80050ac:	bf0c      	ite	eq
 80050ae:	600b      	streq	r3, [r1, #0]
 80050b0:	6053      	strne	r3, [r2, #4]
 80050b2:	4630      	mov	r0, r6
 80050b4:	f000 fbfc 	bl	80058b0 <__malloc_unlock>
 80050b8:	f104 000b 	add.w	r0, r4, #11
 80050bc:	1d23      	adds	r3, r4, #4
 80050be:	f020 0007 	bic.w	r0, r0, #7
 80050c2:	1ac2      	subs	r2, r0, r3
 80050c4:	d0cc      	beq.n	8005060 <_malloc_r+0x20>
 80050c6:	1a1b      	subs	r3, r3, r0
 80050c8:	50a3      	str	r3, [r4, r2]
 80050ca:	e7c9      	b.n	8005060 <_malloc_r+0x20>
 80050cc:	4622      	mov	r2, r4
 80050ce:	6864      	ldr	r4, [r4, #4]
 80050d0:	e7cc      	b.n	800506c <_malloc_r+0x2c>
 80050d2:	1cc4      	adds	r4, r0, #3
 80050d4:	f024 0403 	bic.w	r4, r4, #3
 80050d8:	42a0      	cmp	r0, r4
 80050da:	d0e3      	beq.n	80050a4 <_malloc_r+0x64>
 80050dc:	1a21      	subs	r1, r4, r0
 80050de:	4630      	mov	r0, r6
 80050e0:	f000 f962 	bl	80053a8 <_sbrk_r>
 80050e4:	3001      	adds	r0, #1
 80050e6:	d1dd      	bne.n	80050a4 <_malloc_r+0x64>
 80050e8:	e7cf      	b.n	800508a <_malloc_r+0x4a>
 80050ea:	bf00      	nop
 80050ec:	20001df0 	.word	0x20001df0
 80050f0:	20001df4 	.word	0x20001df4

080050f4 <__sfputc_r>:
 80050f4:	6893      	ldr	r3, [r2, #8]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	6093      	str	r3, [r2, #8]
 80050fc:	b410      	push	{r4}
 80050fe:	da08      	bge.n	8005112 <__sfputc_r+0x1e>
 8005100:	6994      	ldr	r4, [r2, #24]
 8005102:	42a3      	cmp	r3, r4
 8005104:	db01      	blt.n	800510a <__sfputc_r+0x16>
 8005106:	290a      	cmp	r1, #10
 8005108:	d103      	bne.n	8005112 <__sfputc_r+0x1e>
 800510a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800510e:	f000 b99f 	b.w	8005450 <__swbuf_r>
 8005112:	6813      	ldr	r3, [r2, #0]
 8005114:	1c58      	adds	r0, r3, #1
 8005116:	6010      	str	r0, [r2, #0]
 8005118:	4608      	mov	r0, r1
 800511a:	7019      	strb	r1, [r3, #0]
 800511c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005120:	4770      	bx	lr

08005122 <__sfputs_r>:
 8005122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005124:	4606      	mov	r6, r0
 8005126:	460f      	mov	r7, r1
 8005128:	4614      	mov	r4, r2
 800512a:	18d5      	adds	r5, r2, r3
 800512c:	42ac      	cmp	r4, r5
 800512e:	d101      	bne.n	8005134 <__sfputs_r+0x12>
 8005130:	2000      	movs	r0, #0
 8005132:	e007      	b.n	8005144 <__sfputs_r+0x22>
 8005134:	463a      	mov	r2, r7
 8005136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513a:	4630      	mov	r0, r6
 800513c:	f7ff ffda 	bl	80050f4 <__sfputc_r>
 8005140:	1c43      	adds	r3, r0, #1
 8005142:	d1f3      	bne.n	800512c <__sfputs_r+0xa>
 8005144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005148 <_vfiprintf_r>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	460d      	mov	r5, r1
 800514e:	b09d      	sub	sp, #116	; 0x74
 8005150:	4614      	mov	r4, r2
 8005152:	4698      	mov	r8, r3
 8005154:	4606      	mov	r6, r0
 8005156:	b118      	cbz	r0, 8005160 <_vfiprintf_r+0x18>
 8005158:	6983      	ldr	r3, [r0, #24]
 800515a:	b90b      	cbnz	r3, 8005160 <_vfiprintf_r+0x18>
 800515c:	f7ff fb40 	bl	80047e0 <__sinit>
 8005160:	4b89      	ldr	r3, [pc, #548]	; (8005388 <_vfiprintf_r+0x240>)
 8005162:	429d      	cmp	r5, r3
 8005164:	d11b      	bne.n	800519e <_vfiprintf_r+0x56>
 8005166:	6875      	ldr	r5, [r6, #4]
 8005168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800516a:	07d9      	lsls	r1, r3, #31
 800516c:	d405      	bmi.n	800517a <_vfiprintf_r+0x32>
 800516e:	89ab      	ldrh	r3, [r5, #12]
 8005170:	059a      	lsls	r2, r3, #22
 8005172:	d402      	bmi.n	800517a <_vfiprintf_r+0x32>
 8005174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005176:	f7ff fbd6 	bl	8004926 <__retarget_lock_acquire_recursive>
 800517a:	89ab      	ldrh	r3, [r5, #12]
 800517c:	071b      	lsls	r3, r3, #28
 800517e:	d501      	bpl.n	8005184 <_vfiprintf_r+0x3c>
 8005180:	692b      	ldr	r3, [r5, #16]
 8005182:	b9eb      	cbnz	r3, 80051c0 <_vfiprintf_r+0x78>
 8005184:	4629      	mov	r1, r5
 8005186:	4630      	mov	r0, r6
 8005188:	f000 f9c6 	bl	8005518 <__swsetup_r>
 800518c:	b1c0      	cbz	r0, 80051c0 <_vfiprintf_r+0x78>
 800518e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005190:	07dc      	lsls	r4, r3, #31
 8005192:	d50e      	bpl.n	80051b2 <_vfiprintf_r+0x6a>
 8005194:	f04f 30ff 	mov.w	r0, #4294967295
 8005198:	b01d      	add	sp, #116	; 0x74
 800519a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800519e:	4b7b      	ldr	r3, [pc, #492]	; (800538c <_vfiprintf_r+0x244>)
 80051a0:	429d      	cmp	r5, r3
 80051a2:	d101      	bne.n	80051a8 <_vfiprintf_r+0x60>
 80051a4:	68b5      	ldr	r5, [r6, #8]
 80051a6:	e7df      	b.n	8005168 <_vfiprintf_r+0x20>
 80051a8:	4b79      	ldr	r3, [pc, #484]	; (8005390 <_vfiprintf_r+0x248>)
 80051aa:	429d      	cmp	r5, r3
 80051ac:	bf08      	it	eq
 80051ae:	68f5      	ldreq	r5, [r6, #12]
 80051b0:	e7da      	b.n	8005168 <_vfiprintf_r+0x20>
 80051b2:	89ab      	ldrh	r3, [r5, #12]
 80051b4:	0598      	lsls	r0, r3, #22
 80051b6:	d4ed      	bmi.n	8005194 <_vfiprintf_r+0x4c>
 80051b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051ba:	f7ff fbb5 	bl	8004928 <__retarget_lock_release_recursive>
 80051be:	e7e9      	b.n	8005194 <_vfiprintf_r+0x4c>
 80051c0:	2300      	movs	r3, #0
 80051c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051c6:	f04f 0901 	mov.w	r9, #1
 80051ca:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8005394 <_vfiprintf_r+0x24c>
 80051ce:	9309      	str	r3, [sp, #36]	; 0x24
 80051d0:	2320      	movs	r3, #32
 80051d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051d6:	2330      	movs	r3, #48	; 0x30
 80051d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051dc:	4623      	mov	r3, r4
 80051de:	469a      	mov	sl, r3
 80051e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051e4:	b10a      	cbz	r2, 80051ea <_vfiprintf_r+0xa2>
 80051e6:	2a25      	cmp	r2, #37	; 0x25
 80051e8:	d1f9      	bne.n	80051de <_vfiprintf_r+0x96>
 80051ea:	ebba 0b04 	subs.w	fp, sl, r4
 80051ee:	d00b      	beq.n	8005208 <_vfiprintf_r+0xc0>
 80051f0:	465b      	mov	r3, fp
 80051f2:	4622      	mov	r2, r4
 80051f4:	4629      	mov	r1, r5
 80051f6:	4630      	mov	r0, r6
 80051f8:	f7ff ff93 	bl	8005122 <__sfputs_r>
 80051fc:	3001      	adds	r0, #1
 80051fe:	f000 80aa 	beq.w	8005356 <_vfiprintf_r+0x20e>
 8005202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005204:	445a      	add	r2, fp
 8005206:	9209      	str	r2, [sp, #36]	; 0x24
 8005208:	f89a 3000 	ldrb.w	r3, [sl]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80a2 	beq.w	8005356 <_vfiprintf_r+0x20e>
 8005212:	2300      	movs	r3, #0
 8005214:	f04f 32ff 	mov.w	r2, #4294967295
 8005218:	f10a 0a01 	add.w	sl, sl, #1
 800521c:	9304      	str	r3, [sp, #16]
 800521e:	9307      	str	r3, [sp, #28]
 8005220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005224:	931a      	str	r3, [sp, #104]	; 0x68
 8005226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800522a:	4654      	mov	r4, sl
 800522c:	2205      	movs	r2, #5
 800522e:	4859      	ldr	r0, [pc, #356]	; (8005394 <_vfiprintf_r+0x24c>)
 8005230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005234:	f7ff fb82 	bl	800493c <memchr>
 8005238:	9a04      	ldr	r2, [sp, #16]
 800523a:	b9d8      	cbnz	r0, 8005274 <_vfiprintf_r+0x12c>
 800523c:	06d1      	lsls	r1, r2, #27
 800523e:	bf44      	itt	mi
 8005240:	2320      	movmi	r3, #32
 8005242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005246:	0713      	lsls	r3, r2, #28
 8005248:	bf44      	itt	mi
 800524a:	232b      	movmi	r3, #43	; 0x2b
 800524c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005250:	f89a 3000 	ldrb.w	r3, [sl]
 8005254:	2b2a      	cmp	r3, #42	; 0x2a
 8005256:	d015      	beq.n	8005284 <_vfiprintf_r+0x13c>
 8005258:	9a07      	ldr	r2, [sp, #28]
 800525a:	4654      	mov	r4, sl
 800525c:	2000      	movs	r0, #0
 800525e:	f04f 0c0a 	mov.w	ip, #10
 8005262:	4621      	mov	r1, r4
 8005264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005268:	3b30      	subs	r3, #48	; 0x30
 800526a:	2b09      	cmp	r3, #9
 800526c:	d94e      	bls.n	800530c <_vfiprintf_r+0x1c4>
 800526e:	b1b0      	cbz	r0, 800529e <_vfiprintf_r+0x156>
 8005270:	9207      	str	r2, [sp, #28]
 8005272:	e014      	b.n	800529e <_vfiprintf_r+0x156>
 8005274:	eba0 0308 	sub.w	r3, r0, r8
 8005278:	46a2      	mov	sl, r4
 800527a:	fa09 f303 	lsl.w	r3, r9, r3
 800527e:	4313      	orrs	r3, r2
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	e7d2      	b.n	800522a <_vfiprintf_r+0xe2>
 8005284:	9b03      	ldr	r3, [sp, #12]
 8005286:	1d19      	adds	r1, r3, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	9103      	str	r1, [sp, #12]
 800528e:	bfbb      	ittet	lt
 8005290:	425b      	neglt	r3, r3
 8005292:	f042 0202 	orrlt.w	r2, r2, #2
 8005296:	9307      	strge	r3, [sp, #28]
 8005298:	9307      	strlt	r3, [sp, #28]
 800529a:	bfb8      	it	lt
 800529c:	9204      	strlt	r2, [sp, #16]
 800529e:	7823      	ldrb	r3, [r4, #0]
 80052a0:	2b2e      	cmp	r3, #46	; 0x2e
 80052a2:	d10c      	bne.n	80052be <_vfiprintf_r+0x176>
 80052a4:	7863      	ldrb	r3, [r4, #1]
 80052a6:	2b2a      	cmp	r3, #42	; 0x2a
 80052a8:	d135      	bne.n	8005316 <_vfiprintf_r+0x1ce>
 80052aa:	9b03      	ldr	r3, [sp, #12]
 80052ac:	3402      	adds	r4, #2
 80052ae:	1d1a      	adds	r2, r3, #4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	9203      	str	r2, [sp, #12]
 80052b6:	bfb8      	it	lt
 80052b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80052bc:	9305      	str	r3, [sp, #20]
 80052be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80053a4 <_vfiprintf_r+0x25c>
 80052c2:	2203      	movs	r2, #3
 80052c4:	7821      	ldrb	r1, [r4, #0]
 80052c6:	4650      	mov	r0, sl
 80052c8:	f7ff fb38 	bl	800493c <memchr>
 80052cc:	b140      	cbz	r0, 80052e0 <_vfiprintf_r+0x198>
 80052ce:	2340      	movs	r3, #64	; 0x40
 80052d0:	eba0 000a 	sub.w	r0, r0, sl
 80052d4:	3401      	adds	r4, #1
 80052d6:	fa03 f000 	lsl.w	r0, r3, r0
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	4303      	orrs	r3, r0
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e4:	2206      	movs	r2, #6
 80052e6:	482c      	ldr	r0, [pc, #176]	; (8005398 <_vfiprintf_r+0x250>)
 80052e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ec:	f7ff fb26 	bl	800493c <memchr>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d03f      	beq.n	8005374 <_vfiprintf_r+0x22c>
 80052f4:	4b29      	ldr	r3, [pc, #164]	; (800539c <_vfiprintf_r+0x254>)
 80052f6:	bb1b      	cbnz	r3, 8005340 <_vfiprintf_r+0x1f8>
 80052f8:	9b03      	ldr	r3, [sp, #12]
 80052fa:	3307      	adds	r3, #7
 80052fc:	f023 0307 	bic.w	r3, r3, #7
 8005300:	3308      	adds	r3, #8
 8005302:	9303      	str	r3, [sp, #12]
 8005304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005306:	443b      	add	r3, r7
 8005308:	9309      	str	r3, [sp, #36]	; 0x24
 800530a:	e767      	b.n	80051dc <_vfiprintf_r+0x94>
 800530c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005310:	460c      	mov	r4, r1
 8005312:	2001      	movs	r0, #1
 8005314:	e7a5      	b.n	8005262 <_vfiprintf_r+0x11a>
 8005316:	2300      	movs	r3, #0
 8005318:	3401      	adds	r4, #1
 800531a:	f04f 0c0a 	mov.w	ip, #10
 800531e:	4619      	mov	r1, r3
 8005320:	9305      	str	r3, [sp, #20]
 8005322:	4620      	mov	r0, r4
 8005324:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005328:	3a30      	subs	r2, #48	; 0x30
 800532a:	2a09      	cmp	r2, #9
 800532c:	d903      	bls.n	8005336 <_vfiprintf_r+0x1ee>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0c5      	beq.n	80052be <_vfiprintf_r+0x176>
 8005332:	9105      	str	r1, [sp, #20]
 8005334:	e7c3      	b.n	80052be <_vfiprintf_r+0x176>
 8005336:	fb0c 2101 	mla	r1, ip, r1, r2
 800533a:	4604      	mov	r4, r0
 800533c:	2301      	movs	r3, #1
 800533e:	e7f0      	b.n	8005322 <_vfiprintf_r+0x1da>
 8005340:	ab03      	add	r3, sp, #12
 8005342:	462a      	mov	r2, r5
 8005344:	a904      	add	r1, sp, #16
 8005346:	4630      	mov	r0, r6
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <_vfiprintf_r+0x258>)
 800534c:	f7fd ff9e 	bl	800328c <_printf_float>
 8005350:	4607      	mov	r7, r0
 8005352:	1c78      	adds	r0, r7, #1
 8005354:	d1d6      	bne.n	8005304 <_vfiprintf_r+0x1bc>
 8005356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005358:	07d9      	lsls	r1, r3, #31
 800535a:	d405      	bmi.n	8005368 <_vfiprintf_r+0x220>
 800535c:	89ab      	ldrh	r3, [r5, #12]
 800535e:	059a      	lsls	r2, r3, #22
 8005360:	d402      	bmi.n	8005368 <_vfiprintf_r+0x220>
 8005362:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005364:	f7ff fae0 	bl	8004928 <__retarget_lock_release_recursive>
 8005368:	89ab      	ldrh	r3, [r5, #12]
 800536a:	065b      	lsls	r3, r3, #25
 800536c:	f53f af12 	bmi.w	8005194 <_vfiprintf_r+0x4c>
 8005370:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005372:	e711      	b.n	8005198 <_vfiprintf_r+0x50>
 8005374:	ab03      	add	r3, sp, #12
 8005376:	462a      	mov	r2, r5
 8005378:	a904      	add	r1, sp, #16
 800537a:	4630      	mov	r0, r6
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <_vfiprintf_r+0x258>)
 8005380:	f7fe fa2a 	bl	80037d8 <_printf_i>
 8005384:	e7e4      	b.n	8005350 <_vfiprintf_r+0x208>
 8005386:	bf00      	nop
 8005388:	08005e88 	.word	0x08005e88
 800538c:	08005ea8 	.word	0x08005ea8
 8005390:	08005e68 	.word	0x08005e68
 8005394:	08005fc4 	.word	0x08005fc4
 8005398:	08005fce 	.word	0x08005fce
 800539c:	0800328d 	.word	0x0800328d
 80053a0:	08005123 	.word	0x08005123
 80053a4:	08005fca 	.word	0x08005fca

080053a8 <_sbrk_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	2300      	movs	r3, #0
 80053ac:	4d05      	ldr	r5, [pc, #20]	; (80053c4 <_sbrk_r+0x1c>)
 80053ae:	4604      	mov	r4, r0
 80053b0:	4608      	mov	r0, r1
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	f000 faec 	bl	8005990 <_sbrk>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_sbrk_r+0x1a>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_sbrk_r+0x1a>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	20001e08 	.word	0x20001e08

080053c8 <__sread>:
 80053c8:	b510      	push	{r4, lr}
 80053ca:	460c      	mov	r4, r1
 80053cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d0:	f000 fa74 	bl	80058bc <_read_r>
 80053d4:	2800      	cmp	r0, #0
 80053d6:	bfab      	itete	ge
 80053d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053da:	89a3      	ldrhlt	r3, [r4, #12]
 80053dc:	181b      	addge	r3, r3, r0
 80053de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053e2:	bfac      	ite	ge
 80053e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80053e6:	81a3      	strhlt	r3, [r4, #12]
 80053e8:	bd10      	pop	{r4, pc}

080053ea <__swrite>:
 80053ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ee:	461f      	mov	r7, r3
 80053f0:	898b      	ldrh	r3, [r1, #12]
 80053f2:	4605      	mov	r5, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	05db      	lsls	r3, r3, #23
 80053f8:	4616      	mov	r6, r2
 80053fa:	d505      	bpl.n	8005408 <__swrite+0x1e>
 80053fc:	2302      	movs	r3, #2
 80053fe:	2200      	movs	r2, #0
 8005400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005404:	f000 f9c6 	bl	8005794 <_lseek_r>
 8005408:	89a3      	ldrh	r3, [r4, #12]
 800540a:	4632      	mov	r2, r6
 800540c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005410:	4628      	mov	r0, r5
 8005412:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005416:	81a3      	strh	r3, [r4, #12]
 8005418:	463b      	mov	r3, r7
 800541a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800541e:	f000 b869 	b.w	80054f4 <_write_r>

08005422 <__sseek>:
 8005422:	b510      	push	{r4, lr}
 8005424:	460c      	mov	r4, r1
 8005426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542a:	f000 f9b3 	bl	8005794 <_lseek_r>
 800542e:	1c43      	adds	r3, r0, #1
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	bf15      	itete	ne
 8005434:	6560      	strne	r0, [r4, #84]	; 0x54
 8005436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800543a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800543e:	81a3      	strheq	r3, [r4, #12]
 8005440:	bf18      	it	ne
 8005442:	81a3      	strhne	r3, [r4, #12]
 8005444:	bd10      	pop	{r4, pc}

08005446 <__sclose>:
 8005446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800544a:	f000 b8d3 	b.w	80055f4 <_close_r>
	...

08005450 <__swbuf_r>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	460e      	mov	r6, r1
 8005454:	4614      	mov	r4, r2
 8005456:	4605      	mov	r5, r0
 8005458:	b118      	cbz	r0, 8005462 <__swbuf_r+0x12>
 800545a:	6983      	ldr	r3, [r0, #24]
 800545c:	b90b      	cbnz	r3, 8005462 <__swbuf_r+0x12>
 800545e:	f7ff f9bf 	bl	80047e0 <__sinit>
 8005462:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <__swbuf_r+0x98>)
 8005464:	429c      	cmp	r4, r3
 8005466:	d12b      	bne.n	80054c0 <__swbuf_r+0x70>
 8005468:	686c      	ldr	r4, [r5, #4]
 800546a:	69a3      	ldr	r3, [r4, #24]
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	071a      	lsls	r2, r3, #28
 8005472:	d52f      	bpl.n	80054d4 <__swbuf_r+0x84>
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	b36b      	cbz	r3, 80054d4 <__swbuf_r+0x84>
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	b2f6      	uxtb	r6, r6
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	4637      	mov	r7, r6
 8005480:	1ac0      	subs	r0, r0, r3
 8005482:	6963      	ldr	r3, [r4, #20]
 8005484:	4283      	cmp	r3, r0
 8005486:	dc04      	bgt.n	8005492 <__swbuf_r+0x42>
 8005488:	4621      	mov	r1, r4
 800548a:	4628      	mov	r0, r5
 800548c:	f000 f946 	bl	800571c <_fflush_r>
 8005490:	bb30      	cbnz	r0, 80054e0 <__swbuf_r+0x90>
 8005492:	68a3      	ldr	r3, [r4, #8]
 8005494:	3001      	adds	r0, #1
 8005496:	3b01      	subs	r3, #1
 8005498:	60a3      	str	r3, [r4, #8]
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	6022      	str	r2, [r4, #0]
 80054a0:	701e      	strb	r6, [r3, #0]
 80054a2:	6963      	ldr	r3, [r4, #20]
 80054a4:	4283      	cmp	r3, r0
 80054a6:	d004      	beq.n	80054b2 <__swbuf_r+0x62>
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	07db      	lsls	r3, r3, #31
 80054ac:	d506      	bpl.n	80054bc <__swbuf_r+0x6c>
 80054ae:	2e0a      	cmp	r6, #10
 80054b0:	d104      	bne.n	80054bc <__swbuf_r+0x6c>
 80054b2:	4621      	mov	r1, r4
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 f931 	bl	800571c <_fflush_r>
 80054ba:	b988      	cbnz	r0, 80054e0 <__swbuf_r+0x90>
 80054bc:	4638      	mov	r0, r7
 80054be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <__swbuf_r+0x9c>)
 80054c2:	429c      	cmp	r4, r3
 80054c4:	d101      	bne.n	80054ca <__swbuf_r+0x7a>
 80054c6:	68ac      	ldr	r4, [r5, #8]
 80054c8:	e7cf      	b.n	800546a <__swbuf_r+0x1a>
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <__swbuf_r+0xa0>)
 80054cc:	429c      	cmp	r4, r3
 80054ce:	bf08      	it	eq
 80054d0:	68ec      	ldreq	r4, [r5, #12]
 80054d2:	e7ca      	b.n	800546a <__swbuf_r+0x1a>
 80054d4:	4621      	mov	r1, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 f81e 	bl	8005518 <__swsetup_r>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d0cb      	beq.n	8005478 <__swbuf_r+0x28>
 80054e0:	f04f 37ff 	mov.w	r7, #4294967295
 80054e4:	e7ea      	b.n	80054bc <__swbuf_r+0x6c>
 80054e6:	bf00      	nop
 80054e8:	08005e88 	.word	0x08005e88
 80054ec:	08005ea8 	.word	0x08005ea8
 80054f0:	08005e68 	.word	0x08005e68

080054f4 <_write_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4604      	mov	r4, r0
 80054f8:	4d06      	ldr	r5, [pc, #24]	; (8005514 <_write_r+0x20>)
 80054fa:	4608      	mov	r0, r1
 80054fc:	4611      	mov	r1, r2
 80054fe:	2200      	movs	r2, #0
 8005500:	602a      	str	r2, [r5, #0]
 8005502:	461a      	mov	r2, r3
 8005504:	f7fd f91e 	bl	8002744 <_write>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_write_r+0x1e>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b103      	cbz	r3, 8005512 <_write_r+0x1e>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	20001e08 	.word	0x20001e08

08005518 <__swsetup_r>:
 8005518:	4b32      	ldr	r3, [pc, #200]	; (80055e4 <__swsetup_r+0xcc>)
 800551a:	b570      	push	{r4, r5, r6, lr}
 800551c:	681d      	ldr	r5, [r3, #0]
 800551e:	4606      	mov	r6, r0
 8005520:	460c      	mov	r4, r1
 8005522:	b125      	cbz	r5, 800552e <__swsetup_r+0x16>
 8005524:	69ab      	ldr	r3, [r5, #24]
 8005526:	b913      	cbnz	r3, 800552e <__swsetup_r+0x16>
 8005528:	4628      	mov	r0, r5
 800552a:	f7ff f959 	bl	80047e0 <__sinit>
 800552e:	4b2e      	ldr	r3, [pc, #184]	; (80055e8 <__swsetup_r+0xd0>)
 8005530:	429c      	cmp	r4, r3
 8005532:	d10f      	bne.n	8005554 <__swsetup_r+0x3c>
 8005534:	686c      	ldr	r4, [r5, #4]
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800553c:	0719      	lsls	r1, r3, #28
 800553e:	d42c      	bmi.n	800559a <__swsetup_r+0x82>
 8005540:	06dd      	lsls	r5, r3, #27
 8005542:	d411      	bmi.n	8005568 <__swsetup_r+0x50>
 8005544:	2309      	movs	r3, #9
 8005546:	6033      	str	r3, [r6, #0]
 8005548:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800554c:	f04f 30ff 	mov.w	r0, #4294967295
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	e03e      	b.n	80055d2 <__swsetup_r+0xba>
 8005554:	4b25      	ldr	r3, [pc, #148]	; (80055ec <__swsetup_r+0xd4>)
 8005556:	429c      	cmp	r4, r3
 8005558:	d101      	bne.n	800555e <__swsetup_r+0x46>
 800555a:	68ac      	ldr	r4, [r5, #8]
 800555c:	e7eb      	b.n	8005536 <__swsetup_r+0x1e>
 800555e:	4b24      	ldr	r3, [pc, #144]	; (80055f0 <__swsetup_r+0xd8>)
 8005560:	429c      	cmp	r4, r3
 8005562:	bf08      	it	eq
 8005564:	68ec      	ldreq	r4, [r5, #12]
 8005566:	e7e6      	b.n	8005536 <__swsetup_r+0x1e>
 8005568:	0758      	lsls	r0, r3, #29
 800556a:	d512      	bpl.n	8005592 <__swsetup_r+0x7a>
 800556c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800556e:	b141      	cbz	r1, 8005582 <__swsetup_r+0x6a>
 8005570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005574:	4299      	cmp	r1, r3
 8005576:	d002      	beq.n	800557e <__swsetup_r+0x66>
 8005578:	4630      	mov	r0, r6
 800557a:	f7ff fd11 	bl	8004fa0 <_free_r>
 800557e:	2300      	movs	r3, #0
 8005580:	6363      	str	r3, [r4, #52]	; 0x34
 8005582:	89a3      	ldrh	r3, [r4, #12]
 8005584:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005588:	81a3      	strh	r3, [r4, #12]
 800558a:	2300      	movs	r3, #0
 800558c:	6063      	str	r3, [r4, #4]
 800558e:	6923      	ldr	r3, [r4, #16]
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	f043 0308 	orr.w	r3, r3, #8
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	b94b      	cbnz	r3, 80055b2 <__swsetup_r+0x9a>
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a8:	d003      	beq.n	80055b2 <__swsetup_r+0x9a>
 80055aa:	4621      	mov	r1, r4
 80055ac:	4630      	mov	r0, r6
 80055ae:	f000 f927 	bl	8005800 <__smakebuf_r>
 80055b2:	89a0      	ldrh	r0, [r4, #12]
 80055b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055b8:	f010 0301 	ands.w	r3, r0, #1
 80055bc:	d00a      	beq.n	80055d4 <__swsetup_r+0xbc>
 80055be:	2300      	movs	r3, #0
 80055c0:	60a3      	str	r3, [r4, #8]
 80055c2:	6963      	ldr	r3, [r4, #20]
 80055c4:	425b      	negs	r3, r3
 80055c6:	61a3      	str	r3, [r4, #24]
 80055c8:	6923      	ldr	r3, [r4, #16]
 80055ca:	b943      	cbnz	r3, 80055de <__swsetup_r+0xc6>
 80055cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055d0:	d1ba      	bne.n	8005548 <__swsetup_r+0x30>
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	0781      	lsls	r1, r0, #30
 80055d6:	bf58      	it	pl
 80055d8:	6963      	ldrpl	r3, [r4, #20]
 80055da:	60a3      	str	r3, [r4, #8]
 80055dc:	e7f4      	b.n	80055c8 <__swsetup_r+0xb0>
 80055de:	2000      	movs	r0, #0
 80055e0:	e7f7      	b.n	80055d2 <__swsetup_r+0xba>
 80055e2:	bf00      	nop
 80055e4:	20000c00 	.word	0x20000c00
 80055e8:	08005e88 	.word	0x08005e88
 80055ec:	08005ea8 	.word	0x08005ea8
 80055f0:	08005e68 	.word	0x08005e68

080055f4 <_close_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	2300      	movs	r3, #0
 80055f8:	4d05      	ldr	r5, [pc, #20]	; (8005610 <_close_r+0x1c>)
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f000 f99e 	bl	8005940 <_close>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_close_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_close_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20001e08 	.word	0x20001e08

08005614 <__sflush_r>:
 8005614:	898a      	ldrh	r2, [r1, #12]
 8005616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800561a:	4605      	mov	r5, r0
 800561c:	0710      	lsls	r0, r2, #28
 800561e:	460c      	mov	r4, r1
 8005620:	d458      	bmi.n	80056d4 <__sflush_r+0xc0>
 8005622:	684b      	ldr	r3, [r1, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	dc05      	bgt.n	8005634 <__sflush_r+0x20>
 8005628:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	dc02      	bgt.n	8005634 <__sflush_r+0x20>
 800562e:	2000      	movs	r0, #0
 8005630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005636:	2e00      	cmp	r6, #0
 8005638:	d0f9      	beq.n	800562e <__sflush_r+0x1a>
 800563a:	2300      	movs	r3, #0
 800563c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005640:	682f      	ldr	r7, [r5, #0]
 8005642:	602b      	str	r3, [r5, #0]
 8005644:	d032      	beq.n	80056ac <__sflush_r+0x98>
 8005646:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	075a      	lsls	r2, r3, #29
 800564c:	d505      	bpl.n	800565a <__sflush_r+0x46>
 800564e:	6863      	ldr	r3, [r4, #4]
 8005650:	1ac0      	subs	r0, r0, r3
 8005652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005654:	b10b      	cbz	r3, 800565a <__sflush_r+0x46>
 8005656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005658:	1ac0      	subs	r0, r0, r3
 800565a:	2300      	movs	r3, #0
 800565c:	4602      	mov	r2, r0
 800565e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005660:	4628      	mov	r0, r5
 8005662:	6a21      	ldr	r1, [r4, #32]
 8005664:	47b0      	blx	r6
 8005666:	1c43      	adds	r3, r0, #1
 8005668:	89a3      	ldrh	r3, [r4, #12]
 800566a:	d106      	bne.n	800567a <__sflush_r+0x66>
 800566c:	6829      	ldr	r1, [r5, #0]
 800566e:	291d      	cmp	r1, #29
 8005670:	d82c      	bhi.n	80056cc <__sflush_r+0xb8>
 8005672:	4a29      	ldr	r2, [pc, #164]	; (8005718 <__sflush_r+0x104>)
 8005674:	40ca      	lsrs	r2, r1
 8005676:	07d6      	lsls	r6, r2, #31
 8005678:	d528      	bpl.n	80056cc <__sflush_r+0xb8>
 800567a:	2200      	movs	r2, #0
 800567c:	04d9      	lsls	r1, r3, #19
 800567e:	6062      	str	r2, [r4, #4]
 8005680:	6922      	ldr	r2, [r4, #16]
 8005682:	6022      	str	r2, [r4, #0]
 8005684:	d504      	bpl.n	8005690 <__sflush_r+0x7c>
 8005686:	1c42      	adds	r2, r0, #1
 8005688:	d101      	bne.n	800568e <__sflush_r+0x7a>
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	b903      	cbnz	r3, 8005690 <__sflush_r+0x7c>
 800568e:	6560      	str	r0, [r4, #84]	; 0x54
 8005690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005692:	602f      	str	r7, [r5, #0]
 8005694:	2900      	cmp	r1, #0
 8005696:	d0ca      	beq.n	800562e <__sflush_r+0x1a>
 8005698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800569c:	4299      	cmp	r1, r3
 800569e:	d002      	beq.n	80056a6 <__sflush_r+0x92>
 80056a0:	4628      	mov	r0, r5
 80056a2:	f7ff fc7d 	bl	8004fa0 <_free_r>
 80056a6:	2000      	movs	r0, #0
 80056a8:	6360      	str	r0, [r4, #52]	; 0x34
 80056aa:	e7c1      	b.n	8005630 <__sflush_r+0x1c>
 80056ac:	6a21      	ldr	r1, [r4, #32]
 80056ae:	2301      	movs	r3, #1
 80056b0:	4628      	mov	r0, r5
 80056b2:	47b0      	blx	r6
 80056b4:	1c41      	adds	r1, r0, #1
 80056b6:	d1c7      	bne.n	8005648 <__sflush_r+0x34>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d0c4      	beq.n	8005648 <__sflush_r+0x34>
 80056be:	2b1d      	cmp	r3, #29
 80056c0:	d001      	beq.n	80056c6 <__sflush_r+0xb2>
 80056c2:	2b16      	cmp	r3, #22
 80056c4:	d101      	bne.n	80056ca <__sflush_r+0xb6>
 80056c6:	602f      	str	r7, [r5, #0]
 80056c8:	e7b1      	b.n	800562e <__sflush_r+0x1a>
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d0:	81a3      	strh	r3, [r4, #12]
 80056d2:	e7ad      	b.n	8005630 <__sflush_r+0x1c>
 80056d4:	690f      	ldr	r7, [r1, #16]
 80056d6:	2f00      	cmp	r7, #0
 80056d8:	d0a9      	beq.n	800562e <__sflush_r+0x1a>
 80056da:	0793      	lsls	r3, r2, #30
 80056dc:	680e      	ldr	r6, [r1, #0]
 80056de:	600f      	str	r7, [r1, #0]
 80056e0:	bf0c      	ite	eq
 80056e2:	694b      	ldreq	r3, [r1, #20]
 80056e4:	2300      	movne	r3, #0
 80056e6:	eba6 0807 	sub.w	r8, r6, r7
 80056ea:	608b      	str	r3, [r1, #8]
 80056ec:	f1b8 0f00 	cmp.w	r8, #0
 80056f0:	dd9d      	ble.n	800562e <__sflush_r+0x1a>
 80056f2:	4643      	mov	r3, r8
 80056f4:	463a      	mov	r2, r7
 80056f6:	6a21      	ldr	r1, [r4, #32]
 80056f8:	4628      	mov	r0, r5
 80056fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056fc:	47b0      	blx	r6
 80056fe:	2800      	cmp	r0, #0
 8005700:	dc06      	bgt.n	8005710 <__sflush_r+0xfc>
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	e78f      	b.n	8005630 <__sflush_r+0x1c>
 8005710:	4407      	add	r7, r0
 8005712:	eba8 0800 	sub.w	r8, r8, r0
 8005716:	e7e9      	b.n	80056ec <__sflush_r+0xd8>
 8005718:	20400001 	.word	0x20400001

0800571c <_fflush_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	690b      	ldr	r3, [r1, #16]
 8005720:	4605      	mov	r5, r0
 8005722:	460c      	mov	r4, r1
 8005724:	b913      	cbnz	r3, 800572c <_fflush_r+0x10>
 8005726:	2500      	movs	r5, #0
 8005728:	4628      	mov	r0, r5
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	b118      	cbz	r0, 8005736 <_fflush_r+0x1a>
 800572e:	6983      	ldr	r3, [r0, #24]
 8005730:	b90b      	cbnz	r3, 8005736 <_fflush_r+0x1a>
 8005732:	f7ff f855 	bl	80047e0 <__sinit>
 8005736:	4b14      	ldr	r3, [pc, #80]	; (8005788 <_fflush_r+0x6c>)
 8005738:	429c      	cmp	r4, r3
 800573a:	d11b      	bne.n	8005774 <_fflush_r+0x58>
 800573c:	686c      	ldr	r4, [r5, #4]
 800573e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ef      	beq.n	8005726 <_fflush_r+0xa>
 8005746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005748:	07d0      	lsls	r0, r2, #31
 800574a:	d404      	bmi.n	8005756 <_fflush_r+0x3a>
 800574c:	0599      	lsls	r1, r3, #22
 800574e:	d402      	bmi.n	8005756 <_fflush_r+0x3a>
 8005750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005752:	f7ff f8e8 	bl	8004926 <__retarget_lock_acquire_recursive>
 8005756:	4628      	mov	r0, r5
 8005758:	4621      	mov	r1, r4
 800575a:	f7ff ff5b 	bl	8005614 <__sflush_r>
 800575e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005760:	4605      	mov	r5, r0
 8005762:	07da      	lsls	r2, r3, #31
 8005764:	d4e0      	bmi.n	8005728 <_fflush_r+0xc>
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	059b      	lsls	r3, r3, #22
 800576a:	d4dd      	bmi.n	8005728 <_fflush_r+0xc>
 800576c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800576e:	f7ff f8db 	bl	8004928 <__retarget_lock_release_recursive>
 8005772:	e7d9      	b.n	8005728 <_fflush_r+0xc>
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <_fflush_r+0x70>)
 8005776:	429c      	cmp	r4, r3
 8005778:	d101      	bne.n	800577e <_fflush_r+0x62>
 800577a:	68ac      	ldr	r4, [r5, #8]
 800577c:	e7df      	b.n	800573e <_fflush_r+0x22>
 800577e:	4b04      	ldr	r3, [pc, #16]	; (8005790 <_fflush_r+0x74>)
 8005780:	429c      	cmp	r4, r3
 8005782:	bf08      	it	eq
 8005784:	68ec      	ldreq	r4, [r5, #12]
 8005786:	e7da      	b.n	800573e <_fflush_r+0x22>
 8005788:	08005e88 	.word	0x08005e88
 800578c:	08005ea8 	.word	0x08005ea8
 8005790:	08005e68 	.word	0x08005e68

08005794 <_lseek_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4604      	mov	r4, r0
 8005798:	4d06      	ldr	r5, [pc, #24]	; (80057b4 <_lseek_r+0x20>)
 800579a:	4608      	mov	r0, r1
 800579c:	4611      	mov	r1, r2
 800579e:	2200      	movs	r2, #0
 80057a0:	602a      	str	r2, [r5, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	f000 f8e4 	bl	8005970 <_lseek>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_lseek_r+0x1e>
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_lseek_r+0x1e>
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20001e08 	.word	0x20001e08

080057b8 <__swhatbuf_r>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	460e      	mov	r6, r1
 80057bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c0:	b096      	sub	sp, #88	; 0x58
 80057c2:	4614      	mov	r4, r2
 80057c4:	2900      	cmp	r1, #0
 80057c6:	461d      	mov	r5, r3
 80057c8:	da07      	bge.n	80057da <__swhatbuf_r+0x22>
 80057ca:	2300      	movs	r3, #0
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	89b3      	ldrh	r3, [r6, #12]
 80057d0:	061a      	lsls	r2, r3, #24
 80057d2:	d410      	bmi.n	80057f6 <__swhatbuf_r+0x3e>
 80057d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057d8:	e00e      	b.n	80057f8 <__swhatbuf_r+0x40>
 80057da:	466a      	mov	r2, sp
 80057dc:	f000 f88e 	bl	80058fc <_fstat_r>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	dbf2      	blt.n	80057ca <__swhatbuf_r+0x12>
 80057e4:	9a01      	ldr	r2, [sp, #4]
 80057e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057ee:	425a      	negs	r2, r3
 80057f0:	415a      	adcs	r2, r3
 80057f2:	602a      	str	r2, [r5, #0]
 80057f4:	e7ee      	b.n	80057d4 <__swhatbuf_r+0x1c>
 80057f6:	2340      	movs	r3, #64	; 0x40
 80057f8:	2000      	movs	r0, #0
 80057fa:	6023      	str	r3, [r4, #0]
 80057fc:	b016      	add	sp, #88	; 0x58
 80057fe:	bd70      	pop	{r4, r5, r6, pc}

08005800 <__smakebuf_r>:
 8005800:	898b      	ldrh	r3, [r1, #12]
 8005802:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005804:	079d      	lsls	r5, r3, #30
 8005806:	4606      	mov	r6, r0
 8005808:	460c      	mov	r4, r1
 800580a:	d507      	bpl.n	800581c <__smakebuf_r+0x1c>
 800580c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	6123      	str	r3, [r4, #16]
 8005814:	2301      	movs	r3, #1
 8005816:	6163      	str	r3, [r4, #20]
 8005818:	b002      	add	sp, #8
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	ab01      	add	r3, sp, #4
 800581e:	466a      	mov	r2, sp
 8005820:	f7ff ffca 	bl	80057b8 <__swhatbuf_r>
 8005824:	9900      	ldr	r1, [sp, #0]
 8005826:	4605      	mov	r5, r0
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff fc09 	bl	8005040 <_malloc_r>
 800582e:	b948      	cbnz	r0, 8005844 <__smakebuf_r+0x44>
 8005830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005834:	059a      	lsls	r2, r3, #22
 8005836:	d4ef      	bmi.n	8005818 <__smakebuf_r+0x18>
 8005838:	f023 0303 	bic.w	r3, r3, #3
 800583c:	f043 0302 	orr.w	r3, r3, #2
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	e7e3      	b.n	800580c <__smakebuf_r+0xc>
 8005844:	4b0d      	ldr	r3, [pc, #52]	; (800587c <__smakebuf_r+0x7c>)
 8005846:	62b3      	str	r3, [r6, #40]	; 0x28
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	6020      	str	r0, [r4, #0]
 800584c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005850:	6120      	str	r0, [r4, #16]
 8005852:	81a3      	strh	r3, [r4, #12]
 8005854:	9b00      	ldr	r3, [sp, #0]
 8005856:	6163      	str	r3, [r4, #20]
 8005858:	9b01      	ldr	r3, [sp, #4]
 800585a:	b15b      	cbz	r3, 8005874 <__smakebuf_r+0x74>
 800585c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005860:	4630      	mov	r0, r6
 8005862:	f000 f85d 	bl	8005920 <_isatty_r>
 8005866:	b128      	cbz	r0, 8005874 <__smakebuf_r+0x74>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	89a0      	ldrh	r0, [r4, #12]
 8005876:	4305      	orrs	r5, r0
 8005878:	81a5      	strh	r5, [r4, #12]
 800587a:	e7cd      	b.n	8005818 <__smakebuf_r+0x18>
 800587c:	08004779 	.word	0x08004779

08005880 <__ascii_mbtowc>:
 8005880:	b082      	sub	sp, #8
 8005882:	b901      	cbnz	r1, 8005886 <__ascii_mbtowc+0x6>
 8005884:	a901      	add	r1, sp, #4
 8005886:	b142      	cbz	r2, 800589a <__ascii_mbtowc+0x1a>
 8005888:	b14b      	cbz	r3, 800589e <__ascii_mbtowc+0x1e>
 800588a:	7813      	ldrb	r3, [r2, #0]
 800588c:	600b      	str	r3, [r1, #0]
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	1e10      	subs	r0, r2, #0
 8005892:	bf18      	it	ne
 8005894:	2001      	movne	r0, #1
 8005896:	b002      	add	sp, #8
 8005898:	4770      	bx	lr
 800589a:	4610      	mov	r0, r2
 800589c:	e7fb      	b.n	8005896 <__ascii_mbtowc+0x16>
 800589e:	f06f 0001 	mvn.w	r0, #1
 80058a2:	e7f8      	b.n	8005896 <__ascii_mbtowc+0x16>

080058a4 <__malloc_lock>:
 80058a4:	4801      	ldr	r0, [pc, #4]	; (80058ac <__malloc_lock+0x8>)
 80058a6:	f7ff b83e 	b.w	8004926 <__retarget_lock_acquire_recursive>
 80058aa:	bf00      	nop
 80058ac:	20001e00 	.word	0x20001e00

080058b0 <__malloc_unlock>:
 80058b0:	4801      	ldr	r0, [pc, #4]	; (80058b8 <__malloc_unlock+0x8>)
 80058b2:	f7ff b839 	b.w	8004928 <__retarget_lock_release_recursive>
 80058b6:	bf00      	nop
 80058b8:	20001e00 	.word	0x20001e00

080058bc <_read_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4604      	mov	r4, r0
 80058c0:	4d06      	ldr	r5, [pc, #24]	; (80058dc <_read_r+0x20>)
 80058c2:	4608      	mov	r0, r1
 80058c4:	4611      	mov	r1, r2
 80058c6:	2200      	movs	r2, #0
 80058c8:	602a      	str	r2, [r5, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 f858 	bl	8005980 <_read>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d102      	bne.n	80058da <_read_r+0x1e>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b103      	cbz	r3, 80058da <_read_r+0x1e>
 80058d8:	6023      	str	r3, [r4, #0]
 80058da:	bd38      	pop	{r3, r4, r5, pc}
 80058dc:	20001e08 	.word	0x20001e08

080058e0 <__ascii_wctomb>:
 80058e0:	b149      	cbz	r1, 80058f6 <__ascii_wctomb+0x16>
 80058e2:	2aff      	cmp	r2, #255	; 0xff
 80058e4:	bf8d      	iteet	hi
 80058e6:	238a      	movhi	r3, #138	; 0x8a
 80058e8:	2001      	movls	r0, #1
 80058ea:	700a      	strbls	r2, [r1, #0]
 80058ec:	6003      	strhi	r3, [r0, #0]
 80058ee:	bf88      	it	hi
 80058f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80058f4:	4770      	bx	lr
 80058f6:	4608      	mov	r0, r1
 80058f8:	4770      	bx	lr
	...

080058fc <_fstat_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	2300      	movs	r3, #0
 8005900:	4d06      	ldr	r5, [pc, #24]	; (800591c <_fstat_r+0x20>)
 8005902:	4604      	mov	r4, r0
 8005904:	4608      	mov	r0, r1
 8005906:	4611      	mov	r1, r2
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	f000 f821 	bl	8005950 <_fstat>
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	d102      	bne.n	8005918 <_fstat_r+0x1c>
 8005912:	682b      	ldr	r3, [r5, #0]
 8005914:	b103      	cbz	r3, 8005918 <_fstat_r+0x1c>
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	bd38      	pop	{r3, r4, r5, pc}
 800591a:	bf00      	nop
 800591c:	20001e08 	.word	0x20001e08

08005920 <_isatty_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	2300      	movs	r3, #0
 8005924:	4d05      	ldr	r5, [pc, #20]	; (800593c <_isatty_r+0x1c>)
 8005926:	4604      	mov	r4, r0
 8005928:	4608      	mov	r0, r1
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	f000 f818 	bl	8005960 <_isatty>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_isatty_r+0x1a>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	b103      	cbz	r3, 800593a <_isatty_r+0x1a>
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	20001e08 	.word	0x20001e08

08005940 <_close>:
 8005940:	4b02      	ldr	r3, [pc, #8]	; (800594c <_close+0xc>)
 8005942:	2258      	movs	r2, #88	; 0x58
 8005944:	f04f 30ff 	mov.w	r0, #4294967295
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	4770      	bx	lr
 800594c:	20001e08 	.word	0x20001e08

08005950 <_fstat>:
 8005950:	4b02      	ldr	r3, [pc, #8]	; (800595c <_fstat+0xc>)
 8005952:	2258      	movs	r2, #88	; 0x58
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	4770      	bx	lr
 800595c:	20001e08 	.word	0x20001e08

08005960 <_isatty>:
 8005960:	4b02      	ldr	r3, [pc, #8]	; (800596c <_isatty+0xc>)
 8005962:	2258      	movs	r2, #88	; 0x58
 8005964:	2000      	movs	r0, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20001e08 	.word	0x20001e08

08005970 <_lseek>:
 8005970:	4b02      	ldr	r3, [pc, #8]	; (800597c <_lseek+0xc>)
 8005972:	2258      	movs	r2, #88	; 0x58
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	4770      	bx	lr
 800597c:	20001e08 	.word	0x20001e08

08005980 <_read>:
 8005980:	4b02      	ldr	r3, [pc, #8]	; (800598c <_read+0xc>)
 8005982:	2258      	movs	r2, #88	; 0x58
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	4770      	bx	lr
 800598c:	20001e08 	.word	0x20001e08

08005990 <_sbrk>:
 8005990:	4904      	ldr	r1, [pc, #16]	; (80059a4 <_sbrk+0x14>)
 8005992:	4a05      	ldr	r2, [pc, #20]	; (80059a8 <_sbrk+0x18>)
 8005994:	680b      	ldr	r3, [r1, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf08      	it	eq
 800599a:	4613      	moveq	r3, r2
 800599c:	181a      	adds	r2, r3, r0
 800599e:	4618      	mov	r0, r3
 80059a0:	600a      	str	r2, [r1, #0]
 80059a2:	4770      	bx	lr
 80059a4:	20001df8 	.word	0x20001df8
 80059a8:	20001e0c 	.word	0x20001e0c

080059ac <_init>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	bf00      	nop
 80059b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b2:	bc08      	pop	{r3}
 80059b4:	469e      	mov	lr, r3
 80059b6:	4770      	bx	lr

080059b8 <_fini>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr
 80059c4:	0000      	movs	r0, r0
	...

080059c8 <__mbedtls_memory_buffer_alloc_init_veneer>:
 80059c8:	b401      	push	{r0}
 80059ca:	4802      	ldr	r0, [pc, #8]	; (80059d4 <__mbedtls_memory_buffer_alloc_init_veneer+0xc>)
 80059cc:	4684      	mov	ip, r0
 80059ce:	bc01      	pop	{r0}
 80059d0:	4760      	bx	ip
 80059d2:	bf00      	nop
 80059d4:	0ff5ece9 	.word	0x0ff5ece9

080059d8 <__mbedtls_aes_setkey_enc_veneer>:
 80059d8:	b401      	push	{r0}
 80059da:	4802      	ldr	r0, [pc, #8]	; (80059e4 <__mbedtls_aes_setkey_enc_veneer+0xc>)
 80059dc:	4684      	mov	ip, r0
 80059de:	bc01      	pop	{r0}
 80059e0:	4760      	bx	ip
 80059e2:	bf00      	nop
 80059e4:	0ff56cc9 	.word	0x0ff56cc9

080059e8 <__mbedtls_aes_free_veneer>:
 80059e8:	b401      	push	{r0}
 80059ea:	4802      	ldr	r0, [pc, #8]	; (80059f4 <__mbedtls_aes_free_veneer+0xc>)
 80059ec:	4684      	mov	ip, r0
 80059ee:	bc01      	pop	{r0}
 80059f0:	4760      	bx	ip
 80059f2:	bf00      	nop
 80059f4:	0ff56ca5 	.word	0x0ff56ca5

080059f8 <__mbedtls_aes_crypt_cbc_veneer>:
 80059f8:	b401      	push	{r0}
 80059fa:	4802      	ldr	r0, [pc, #8]	; (8005a04 <__mbedtls_aes_crypt_cbc_veneer+0xc>)
 80059fc:	4684      	mov	ip, r0
 80059fe:	bc01      	pop	{r0}
 8005a00:	4760      	bx	ip
 8005a02:	bf00      	nop
 8005a04:	0ff56a25 	.word	0x0ff56a25

08005a08 <__qspi_flash_sector_erase_veneer>:
 8005a08:	b401      	push	{r0}
 8005a0a:	4802      	ldr	r0, [pc, #8]	; (8005a14 <__qspi_flash_sector_erase_veneer+0xc>)
 8005a0c:	4684      	mov	ip, r0
 8005a0e:	bc01      	pop	{r0}
 8005a10:	4760      	bx	ip
 8005a12:	bf00      	nop
 8005a14:	200002a9 	.word	0x200002a9

08005a18 <__qspi_flash_read_veneer>:
 8005a18:	b401      	push	{r0}
 8005a1a:	4802      	ldr	r0, [pc, #8]	; (8005a24 <__qspi_flash_read_veneer+0xc>)
 8005a1c:	4684      	mov	ip, r0
 8005a1e:	bc01      	pop	{r0}
 8005a20:	4760      	bx	ip
 8005a22:	bf00      	nop
 8005a24:	200004c5 	.word	0x200004c5

08005a28 <__mbedtls_aes_setkey_dec_veneer>:
 8005a28:	b401      	push	{r0}
 8005a2a:	4802      	ldr	r0, [pc, #8]	; (8005a34 <__mbedtls_aes_setkey_dec_veneer+0xc>)
 8005a2c:	4684      	mov	ip, r0
 8005a2e:	bc01      	pop	{r0}
 8005a30:	4760      	bx	ip
 8005a32:	bf00      	nop
 8005a34:	0ff56cb9 	.word	0x0ff56cb9

08005a38 <__mbedtls_aes_init_veneer>:
 8005a38:	b401      	push	{r0}
 8005a3a:	4802      	ldr	r0, [pc, #8]	; (8005a44 <__mbedtls_aes_init_veneer+0xc>)
 8005a3c:	4684      	mov	ip, r0
 8005a3e:	bc01      	pop	{r0}
 8005a40:	4760      	bx	ip
 8005a42:	bf00      	nop
 8005a44:	0ff56cb1 	.word	0x0ff56cb1

08005a48 <__mbedtls_calloc_veneer>:
 8005a48:	b401      	push	{r0}
 8005a4a:	4802      	ldr	r0, [pc, #8]	; (8005a54 <__mbedtls_calloc_veneer+0xc>)
 8005a4c:	4684      	mov	ip, r0
 8005a4e:	bc01      	pop	{r0}
 8005a50:	4760      	bx	ip
 8005a52:	bf00      	nop
 8005a54:	0ff57d29 	.word	0x0ff57d29

08005a58 <__mbedtls_free_veneer>:
 8005a58:	b401      	push	{r0}
 8005a5a:	4802      	ldr	r0, [pc, #8]	; (8005a64 <__mbedtls_free_veneer+0xc>)
 8005a5c:	4684      	mov	ip, r0
 8005a5e:	bc01      	pop	{r0}
 8005a60:	4760      	bx	ip
 8005a62:	bf00      	nop
 8005a64:	0ff5b34d 	.word	0x0ff5b34d

08005a68 <__qspi_flash_config_veneer>:
 8005a68:	b401      	push	{r0}
 8005a6a:	4802      	ldr	r0, [pc, #8]	; (8005a74 <__qspi_flash_config_veneer+0xc>)
 8005a6c:	4684      	mov	ip, r0
 8005a6e:	bc01      	pop	{r0}
 8005a70:	4760      	bx	ip
 8005a72:	bf00      	nop
 8005a74:	20000361 	.word	0x20000361

08005a78 <__mbedtls_aes_crypt_ecb_veneer>:
 8005a78:	b401      	push	{r0}
 8005a7a:	4802      	ldr	r0, [pc, #8]	; (8005a84 <__mbedtls_aes_crypt_ecb_veneer+0xc>)
 8005a7c:	4684      	mov	ip, r0
 8005a7e:	bc01      	pop	{r0}
 8005a80:	4760      	bx	ip
 8005a82:	bf00      	nop
 8005a84:	0ff56c11 	.word	0x0ff56c11

08005a88 <__qspi_flash_page_program_veneer>:
 8005a88:	b401      	push	{r0}
 8005a8a:	4802      	ldr	r0, [pc, #8]	; (8005a94 <__qspi_flash_page_program_veneer+0xc>)
 8005a8c:	4684      	mov	ip, r0
 8005a8e:	bc01      	pop	{r0}
 8005a90:	4760      	bx	ip
 8005a92:	bf00      	nop
 8005a94:	2000051d 	.word	0x2000051d

08005a98 <__mbedtls_md5_ret_veneer>:
 8005a98:	b401      	push	{r0}
 8005a9a:	4802      	ldr	r0, [pc, #8]	; (8005aa4 <__mbedtls_md5_ret_veneer+0xc>)
 8005a9c:	4684      	mov	ip, r0
 8005a9e:	bc01      	pop	{r0}
 8005aa0:	4760      	bx	ip
 8005aa2:	bf00      	nop
 8005aa4:	0ff5e7ad 	.word	0x0ff5e7ad
